!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADDRMAN_GETADDR_MAX	addrman.h	188;"	d
ADDRMAN_GETADDR_MAX_PCT	addrman.h	185;"	d
ADDRMAN_HORIZON_DAYS	addrman.h	173;"	d
ADDRMAN_MAX_FAILURES	addrman.h	179;"	d
ADDRMAN_MIN_FAIL_DAYS	addrman.h	182;"	d
ADDRMAN_NEW_BUCKETS_PER_ADDRESS	addrman.h	167;"	d
ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP	addrman.h	164;"	d
ADDRMAN_NEW_BUCKET_COUNT	addrman.h	155;"	d
ADDRMAN_NEW_BUCKET_SIZE	addrman.h	158;"	d
ADDRMAN_RETRIES	addrman.h	176;"	d
ADDRMAN_TRIED_BUCKETS_PER_GROUP	addrman.h	161;"	d
ADDRMAN_TRIED_BUCKET_COUNT	addrman.h	149;"	d
ADDRMAN_TRIED_BUCKET_SIZE	addrman.h	152;"	d
ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT	addrman.h	170;"	d
ARRAYLEN	common.h	61;"	d
Acquire	sync.h	/^		void Acquire() {$/;"	f	class:CSemaphoreGrant
Add	addrman.h	/^    bool Add(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty = 0)$/;"	f	class:CAddrMan
Add	addrman.h	/^    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64 nTimePenalty = 0)$/;"	f	class:CAddrMan
Add_	addrman.cpp	/^bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty)$/;"	f	class:CAddrMan
Attempt	addrman.h	/^    void Attempt(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Attempt_	addrman.cpp	/^void CAddrMan::Attempt_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
BEGIN	common.h	57;"	d
BIP0031_VERSION	common.h	/^static const int BIP0031_VERSION = 60000;$/;"	v
BITCOIN_BIGNUM_H	bignum.h	27;"	d
BITCOIN_STRLCPY_H	strlcpy.h	17;"	d
ByteReverse	common.h	/^inline uint32_t ByteReverse(uint32_t value)$/;"	f
CADDR_TIME_VERSION	common.h	/^static const int CADDR_TIME_VERSION = 31402;$/;"	v
CAddrDB	addrman.cpp	/^CAddrDB::CAddrDB(const char *path)$/;"	f	class:CAddrDB
CAddrDB	addrman.h	/^class CAddrDB$/;"	c
CAddrInfo	addrman.h	/^    CAddrInfo() : CAddress(), source()$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^    CAddrInfo(const CAddress &addrIn, const CNetAddr &addrSource) : CAddress(addrIn), source(addrSource)$/;"	f	class:CAddrInfo
CAddrInfo	addrman.h	/^class CAddrInfo : public CAddress$/;"	c
CAddrMan	addrman.h	/^    CAddrMan() : vRandom(0), vvTried(ADDRMAN_TRIED_BUCKET_COUNT, std::vector<int>(0)), vvNew(ADDRMAN_NEW_BUCKET_COUNT, std::set<int>())$/;"	f	class:CAddrMan
CAddrMan	addrman.h	/^class CAddrMan$/;"	c
CAddress	protocol.h	/^		CAddress() : CService()$/;"	f	class:CAddress
CAddress	protocol.h	/^		explicit CAddress(CService ipIn, uint64 nServicesIn = NODE_NETWORK) : CService(ipIn)$/;"	f	class:CAddress
CAddress	protocol.h	/^class CAddress : public CService$/;"	c
CAutoBN_CTX	bignum.h	/^    CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
CAutoBN_CTX	bignum.h	/^class CAutoBN_CTX$/;"	c
CAutoFile	serialize.h	/^    CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)$/;"	f	class:CAutoFile
CAutoFile	serialize.h	/^class CAutoFile$/;"	c
CBigNum	bignum.h	/^    CBigNum()$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(const CBigNum& b)$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(int n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(int64 n)            { BN_init(this); setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(long n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(short n)            { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(signed char n)      { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(uint64 n)           { BN_init(this); setuint64(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned char n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned int n)     { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned long n)    { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    CBigNum(unsigned short n)   { BN_init(this); setulong(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    explicit CBigNum(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
CBigNum	bignum.h	/^    explicit CBigNum(uint256 n) { BN_init(this); setuint256(n); }$/;"	f	class:CBigNum
CBigNum	bignum.h	/^class CBigNum : public BIGNUM$/;"	c
CCriticalBlock	sync.h	/^typedef CMutexLock<CCriticalSection> CCriticalBlock;$/;"	t
CCriticalSection	sync.h	/^typedef boost::recursive_mutex CCriticalSection;$/;"	t
CDataStream	serialize.h	/^    CDataStream(const char* pbegin, const char* pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const std::vector<char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const vector_type& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn, int nVersionIn) : vch(pbegin, pend)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^    explicit CDataStream(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
CDataStream	serialize.h	/^class CDataStream$/;"	c
CFlatData	serialize.h	/^    CFlatData(void* pbeginIn, void* pendIn) : pbegin((char*)pbeginIn), pend((char*)pendIn) { }$/;"	f	class:CFlatData
CFlatData	serialize.h	/^class CFlatData$/;"	c
CHARSET	bech32.cpp	/^	const char* CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";$/;"	m	namespace:__anon1	file:
CHARSET_REV	bech32.cpp	/^	const int8_t CHARSET_REV[128] = {$/;"	m	namespace:__anon1	file:
CHECKSUM_OFFSET	protocol.h	/^			CHECKSUM_OFFSET=MESSAGE_SIZE_OFFSET+MESSAGE_SIZE_SIZE$/;"	e	enum:CMessageHeader::__anon2
CHECKSUM_SIZE	protocol.h	/^			CHECKSUM_SIZE=sizeof(int),$/;"	e	enum:CMessageHeader::__anon2
CHashWriter	common.h	/^    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {$/;"	f	class:CHashWriter
CHashWriter	common.h	/^class CHashWriter$/;"	c
CInv	protocol.h	/^class CInv$/;"	c
CLockLocation	sync.cpp	/^    CLockLocation(const char* pszName, const char* pszFile, int nLine)$/;"	f	struct:CLockLocation
CLockLocation	sync.cpp	/^struct CLockLocation$/;"	s	file:
CMedianFilter	common.h	/^    CMedianFilter(unsigned int size, T initial_value):$/;"	f	class:CMedianFilter
CMedianFilter	common.h	/^template <typename T> class CMedianFilter$/;"	c
CMessageHeader	protocol.h	/^class CMessageHeader$/;"	c
CMutexLock	sync.h	/^		CMutexLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) : lock(mutexIn, boost::defer_lock)$/;"	f	class:CMutexLock
CMutexLock	sync.h	/^class CMutexLock$/;"	c
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr()$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const char *pszIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const std::string &strIp, bool fAllowLookup)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr)$/;"	f	class:CNetAddr
CNetAddr	netbase.cpp	/^CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)$/;"	f	class:CNetAddr
CNetAddr	netbase.h	/^class CNetAddr$/;"	c
COMMAND_SIZE	protocol.h	/^			COMMAND_SIZE=12,$/;"	e	enum:CMessageHeader::__anon2
CSemaphore	sync.h	/^		CSemaphore(int init) : value(init) {}$/;"	f	class:CSemaphore
CSemaphore	sync.h	/^class CSemaphore$/;"	c
CSemaphoreGrant	sync.h	/^		CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^		CSemaphoreGrant(CSemaphore &sema, bool fTry = false) : sem(&sema), fHaveGrant(false) {$/;"	f	class:CSemaphoreGrant
CSemaphoreGrant	sync.h	/^class CSemaphoreGrant$/;"	c
CSerActionGetSerializeSize	serialize.h	/^class CSerActionGetSerializeSize { };$/;"	c
CSerActionSerialize	serialize.h	/^class CSerActionSerialize { };$/;"	c
CSerActionUnserialize	serialize.h	/^class CSerActionUnserialize { };$/;"	c
CService	netbase.cpp	/^CService::CService()$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const CNetAddr& cip, unsigned short portIn) : CNetAddr(cip), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const char *pszIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const char *pszIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const std::string &strIpPort, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const std::string &strIpPort, int portDefault, bool fAllowLookup)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct in6_addr& ipv6Addr, unsigned short portIn) : CNetAddr(ipv6Addr), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct in_addr& ipv4Addr, unsigned short portIn) : CNetAddr(ipv4Addr), port(portIn)$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), port(ntohs(addr.sin_port))$/;"	f	class:CService
CService	netbase.cpp	/^CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr), port(ntohs(addr.sin6_port))$/;"	f	class:CService
CService	netbase.h	/^class CService : public CNetAddr$/;"	c
CWaitableCriticalSection	sync.h	/^typedef boost::mutex CWaitableCriticalSection;$/;"	t
Cat	bech32.cpp	/^	cbuff Cat(cbuff x, const cbuff& y)$/;"	f	namespace:__anon1
Check	addrman.h	/^    void Check()$/;"	f	class:CAddrMan
Check_	addrman.cpp	/^int CAddrMan::Check_()$/;"	f	class:CAddrMan
Compact	serialize.h	/^    inline void Compact()$/;"	f	class:CDataStream
ConnectSocket	netbase.cpp	/^bool ConnectSocket(const CService &addrDest, unsigned int& hSocketRet, int nTimeout)$/;"	f
ConnectSocketByName	netbase.cpp	/^bool ConnectSocketByName(CService &addr, unsigned int& hSocketRet, const char *pszDest, int portDefault, int nTimeout)$/;"	f
ConnectSocketDirectly	netbase.cpp	/^bool static ConnectSocketDirectly(const CService &addrConnect, unsigned int& hSocketRet, int nTimeout)$/;"	f	file:
Connected	addrman.h	/^    void Connected(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Connected_	addrman.cpp	/^void CAddrMan::Connected_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
Create	addrman.cpp	/^CAddrInfo* CAddrMan::Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId)$/;"	f	class:CAddrMan
CreateChecksum	bech32.cpp	/^	cbuff CreateChecksum(const std::string& hrp, const cbuff& values)$/;"	f	namespace:__anon1
CreateThread	common.h	/^inline HANDLE CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=false)$/;"	f
CreateThread	common.h	/^inline pthread_t CreateThread(void(*pfn)(void*), void* parg, bool fWantHandle=false)$/;"	f
DateTimeStrFormat	common.h	/^inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)$/;"	f
Decode	bech32.cpp	/^	std::pair<std::string, cbuff> Decode(const std::string& str) {$/;"	f	namespace:bech32
END	common.h	58;"	d
ENTER_CRITICAL_SECTION	sync.h	129;"	d
Encode	bech32.cpp	/^	std::string Encode(const std::string& hrp, const cbuff& values) {$/;"	f	namespace:bech32
Enter	sync.h	/^		void Enter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
EnterCritical	sync.cpp	/^void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)$/;"	f
EnterCritical	sync.h	/^void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}$/;"	f
ExitThread	common.h	/^inline void ExitThread(size_t nExitCode)$/;"	f
ExpandHRP	bech32.cpp	/^	cbuff ExpandHRP(const std::string& hrp)$/;"	f	namespace:__anon1
FLATDATA	serialize.h	249;"	d
Find	addrman.cpp	/^CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)$/;"	f	class:CAddrMan
Get64	uint256.h	/^    uint64 Get64(int n=0) const$/;"	f	class:base_uint
GetAddr	addrman.h	/^    std::vector<CAddress> GetAddr()$/;"	f	class:CAddrMan
GetAddr_	addrman.cpp	/^void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)$/;"	f	class:CAddrMan
GetByte	netbase.cpp	/^int CNetAddr::GetByte(int n) const$/;"	f	class:CNetAddr
GetChance	addrman.cpp	/^double CAddrInfo::GetChance(int64 nNow) const$/;"	f	class:CAddrInfo
GetCompact	bignum.h	/^    unsigned int GetCompact() const$/;"	f	class:CBigNum
GetExtNetwork	netbase.cpp	/^int static GetExtNetwork(const CNetAddr *addr)$/;"	f	file:
GetGroup	netbase.cpp	/^std::vector<unsigned char> CNetAddr::GetGroup() const$/;"	f	class:CNetAddr
GetHash	common.h	/^    uint256 GetHash() {$/;"	f	class:CHashWriter
GetHash	netbase.cpp	/^uint64 CNetAddr::GetHash() const$/;"	f	class:CNetAddr
GetHex	bignum.h	/^    std::string GetHex() const$/;"	f	class:CBigNum
GetHex	uint256.h	/^    std::string GetHex() const$/;"	f	class:base_uint
GetIn6Addr	netbase.cpp	/^bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const$/;"	f	class:CNetAddr
GetInAddr	netbase.cpp	/^bool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const$/;"	f	class:CNetAddr
GetKey	netbase.cpp	/^std::vector<unsigned char> CService::GetKey() const$/;"	f	class:CService
GetKey	uint256.h	/^    shkey_t *GetKey()$/;"	f	class:uint160
GetLock	sync.h	/^		boost::unique_lock<Mutex> &GetLock()$/;"	f	class:CMutexLock
GetNameProxy	netbase.cpp	/^bool GetNameProxy() {$/;"	f
GetNetwork	netbase.cpp	/^enum Network CNetAddr::GetNetwork() const$/;"	f	class:CNetAddr
GetNewBucket	addrman.cpp	/^int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const$/;"	f	class:CAddrInfo
GetNewBucket	addrman.h	/^    int GetNewBucket(const std::vector<unsigned char> &nKey) const$/;"	f	class:CAddrInfo
GetPerformanceCounter	common.h	/^inline int64 GetPerformanceCounter()$/;"	f
GetPort	netbase.cpp	/^unsigned short CService::GetPort() const$/;"	f	class:CService
GetProxy	netbase.cpp	/^bool GetProxy(enum Network net, CService &addrProxy) {$/;"	f
GetRaw	uint256.h	/^    unsigned int *GetRaw()$/;"	f	class:base_uint
GetReachabilityFrom	netbase.cpp	/^int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const$/;"	f	class:CNetAddr
GetSerializeSize	bignum.h	/^    unsigned int GetSerializeSize(int nType=0, int nVersion=1\/*PROTOCOL_VERSION*\/) const$/;"	f	class:CBigNum
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CAutoFile
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(const T& obj)$/;"	f	class:CDataStream
GetSerializeSize	serialize.h	/^    unsigned int GetSerializeSize(int, int=0) const$/;"	f	class:CFlatData
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(char a,           int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(double a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(float a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(int64 a,          int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed char a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed int a,     int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed long a,    int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(signed short a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(uint64 a,         int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned char a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned int a,   int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned long a,  int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^inline unsigned int GetSerializeSize(unsigned short a, int, int=0) { return sizeof(a); }$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::basic_string<C>& str, int, int)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
GetSerializeSize	serialize.h	/^unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
GetSerializeSize	uint256.h	/^    unsigned int GetSerializeSize(int nType, int nVersion) const$/;"	f	class:base_uint
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
GetSerializeSize_impl	serialize.h	/^unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
GetSizeOfCompactSize	serialize.h	/^inline unsigned int GetSizeOfCompactSize(uint64 nSize)$/;"	f
GetSockAddr	netbase.cpp	/^bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const$/;"	f	class:CService
GetTimeMillis	common.h	/^inline int64 GetTimeMillis()$/;"	f
GetTriedBucket	addrman.cpp	/^int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const$/;"	f	class:CAddrInfo
GetType	serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CAutoFile
GetType	serialize.h	/^    int GetType()                { return nType; }$/;"	f	class:CDataStream
GetVersion	serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CAutoFile
GetVersion	serialize.h	/^    int GetVersion()             { return nVersion; }$/;"	f	class:CDataStream
Good	addrman.h	/^    void Good(const CService &addr, int64 nTime = GetAdjustedTime())$/;"	f	class:CAddrMan
Good_	addrman.cpp	/^void CAddrMan::Good_(const CService &addr, int64 nTime)$/;"	f	class:CAddrMan
Hash	common.h	/^inline uint256 Hash(const T1 p1begin, const T1 p1end,$/;"	f
Hash	common.h	/^inline uint256 Hash(const T1 pbegin, const T1 pend)$/;"	f
Hash	common.h	/^inline uint256 Hash(uint160 hash)$/;"	f
Hash160	common.h	/^inline uint160 Hash160(const std::vector<unsigned char>& vch)$/;"	f
HexStr	common.h	/^inline std::string HexStr(const std::vector<unsigned char>& vch, bool fSpaces=false)$/;"	f
HexStr	common.h	/^std::string HexStr(const T itbegin, const T itend, bool fSpaces=false)$/;"	f
IMPLEMENT_RANDOMIZE_STACK	common.h	361;"	d
IMPLEMENT_SERIALIZE	serialize.h	65;"	d
INVALID_SOCKET	compat.h	37;"	d
Init	addrman.h	/^    void Init()$/;"	f	class:CAddrInfo
Init	common.h	/^    void Init() {$/;"	f	class:CHashWriter
Init	netbase.cpp	/^void CNetAddr::Init()$/;"	f	class:CNetAddr
Init	netbase.cpp	/^void CService::Init()$/;"	f	class:CService
Init	protocol.h	/^		void Init()$/;"	f	class:CAddress
Init	serialize.h	/^    void Init(int nTypeIn, int nVersionIn)$/;"	f	class:CDataStream
IsI2P	netbase.cpp	/^bool CNetAddr::IsI2P() const$/;"	f	class:CNetAddr
IsIPv4	netbase.cpp	/^bool CNetAddr::IsIPv4() const$/;"	f	class:CNetAddr
IsIPv6	netbase.cpp	/^bool CNetAddr::IsIPv6() const$/;"	f	class:CNetAddr
IsLocal	netbase.cpp	/^bool CNetAddr::IsLocal() const$/;"	f	class:CNetAddr
IsMulticast	netbase.cpp	/^bool CNetAddr::IsMulticast() const$/;"	f	class:CNetAddr
IsNull	uint256.h	/^    bool IsNull()$/;"	f	class:base_uint
IsProxy	netbase.cpp	/^bool IsProxy(const CNetAddr &addr) {$/;"	f
IsRFC1918	netbase.cpp	/^bool CNetAddr::IsRFC1918() const$/;"	f	class:CNetAddr
IsRFC3849	netbase.cpp	/^bool CNetAddr::IsRFC3849() const$/;"	f	class:CNetAddr
IsRFC3927	netbase.cpp	/^bool CNetAddr::IsRFC3927() const$/;"	f	class:CNetAddr
IsRFC3964	netbase.cpp	/^bool CNetAddr::IsRFC3964() const$/;"	f	class:CNetAddr
IsRFC4193	netbase.cpp	/^bool CNetAddr::IsRFC4193() const$/;"	f	class:CNetAddr
IsRFC4380	netbase.cpp	/^bool CNetAddr::IsRFC4380() const$/;"	f	class:CNetAddr
IsRFC4843	netbase.cpp	/^bool CNetAddr::IsRFC4843() const$/;"	f	class:CNetAddr
IsRFC4862	netbase.cpp	/^bool CNetAddr::IsRFC4862() const$/;"	f	class:CNetAddr
IsRFC6052	netbase.cpp	/^bool CNetAddr::IsRFC6052() const$/;"	f	class:CNetAddr
IsRFC6145	netbase.cpp	/^bool CNetAddr::IsRFC6145() const$/;"	f	class:CNetAddr
IsRoutable	netbase.cpp	/^bool CNetAddr::IsRoutable() const$/;"	f	class:CNetAddr
IsSwitchChar	common.h	/^inline bool IsSwitchChar(char c)$/;"	f
IsTerrible	addrman.cpp	/^bool CAddrInfo::IsTerrible(int64 nNow) const$/;"	f	class:CAddrInfo
IsTor	netbase.cpp	/^bool CNetAddr::IsTor() const$/;"	f	class:CNetAddr
IsValid	netbase.cpp	/^bool CNetAddr::IsValid() const$/;"	f	class:CNetAddr
LEAVE_CRITICAL_SECTION	sync.h	135;"	d
LOCK	sync.h	125;"	d
LOCK2	sync.h	126;"	d
Leave	sync.h	/^		void Leave()$/;"	f	class:CMutexLock
LeaveCritical	sync.cpp	/^void LeaveCritical()$/;"	f
LeaveCritical	sync.h	/^void static inline LeaveCritical() {}$/;"	f
LockStack	sync.cpp	/^typedef std::vector< std::pair<void*, CLockLocation> > LockStack;$/;"	t	file:
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)$/;"	f
Lookup	netbase.cpp	/^bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)$/;"	f
LookupHost	netbase.cpp	/^bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f
LookupHostNumeric	netbase.cpp	/^bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions)$/;"	f
LookupIntern	netbase.cpp	/^bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)$/;"	f	file:
LookupNumeric	netbase.cpp	/^bool LookupNumeric(const char *pszName, CService& addr, int portDefault)$/;"	f
LowerCase	bech32.cpp	/^	inline unsigned char LowerCase(unsigned char c)$/;"	f	namespace:__anon1
MAX_SIZE	serialize.h	/^static const unsigned int MAX_SIZE = 0x05000000;$/;"	v
MESSAGE_SIZE_OFFSET	protocol.h	/^			MESSAGE_SIZE_OFFSET=MESSAGE_START_SIZE+COMMAND_SIZE,$/;"	e	enum:CMessageHeader::__anon2
MESSAGE_SIZE_SIZE	protocol.h	/^			MESSAGE_SIZE_SIZE=sizeof(int),$/;"	e	enum:CMessageHeader::__anon2
MESSAGE_START_SIZE	protocol.h	/^			MESSAGE_START_SIZE=4,$/;"	e	enum:CMessageHeader::__anon2
MIN_PROTO_VERSION	common.h	/^static const int MIN_PROTO_VERSION = 209;$/;"	v
MakeTried	addrman.cpp	/^void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)$/;"	f	class:CAddrMan
MoveTo	sync.h	/^		void MoveTo(CSemaphoreGrant &grant) {$/;"	f	class:CSemaphoreGrant
NET_I2P	netbase.h	/^  NET_I2P,$/;"	e	enum:Network
NET_IPV4	netbase.h	/^  NET_IPV4,$/;"	e	enum:Network
NET_IPV6	netbase.h	/^  NET_IPV6,$/;"	e	enum:Network
NET_MAX	netbase.h	/^  NET_MAX,$/;"	e	enum:Network
NET_TEREDO	netbase.cpp	/^static const int NET_TEREDO  = NET_MAX + 1;$/;"	v	file:
NET_TOR	netbase.h	/^  NET_TOR,$/;"	e	enum:Network
NET_UNKNOWN	netbase.cpp	/^static const int NET_UNKNOWN = NET_MAX + 0;$/;"	v	file:
NET_UNROUTABLE	netbase.h	/^  NET_UNROUTABLE,$/;"	e	enum:Network
NOBLKS_VERSION_END	common.h	/^static const int NOBLKS_VERSION_END = 32400;$/;"	v
NOBLKS_VERSION_START	common.h	/^static const int NOBLKS_VERSION_START = 32000;$/;"	v
NODE_BLOOM	protocol.h	/^	NODE_BLOOM = (1 << 2),$/;"	e	enum:__anon3
NODE_GETUTXO	protocol.h	/^	NODE_GETUTXO = (1 << 1),$/;"	e	enum:__anon3
NODE_NETWORK	protocol.h	/^	NODE_NETWORK = (1 << 0),$/;"	e	enum:__anon3
NODE_WITNESS	protocol.h	/^	NODE_WITNESS = (1 << 3)$/;"	e	enum:__anon3
NOMINMAX	compat.h	32;"	d
Network	netbase.h	/^enum Network$/;"	g
PAGESIZE	allocators.h	46;"	d
PAIRTYPE	common.h	76;"	d
PRI64d	common.h	65;"	d
PRI64d	common.h	69;"	d
PRI64u	common.h	66;"	d
PRI64u	common.h	70;"	d
PRI64x	common.h	67;"	d
PRI64x	common.h	71;"	d
ParseNetwork	netbase.cpp	/^enum Network ParseNetwork(std::string net) {$/;"	f
PolyMod	bech32.cpp	/^	uint32_t PolyMod(const cbuff& v)$/;"	f	namespace:__anon1
PrintHex	common.h	/^inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintHex	common.h	/^void PrintHex(const T pbegin, const T pend, const char* pszFormat="%s", bool fSpaces=true)$/;"	f
PrintLockContention	sync.cpp	/^void PrintLockContention(const char* pszName, const char* pszFile, int nLine)$/;"	f
READDATA	serialize.h	114;"	d
READWRITE	serialize.h	103;"	d
REF	serialize.h	/^inline T& REF(const T& val)$/;"	f
ReadCompactSize	serialize.h	/^uint64 ReadCompactSize(Stream& is)$/;"	f
ReadVersion	serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CAutoFile
ReadVersion	serialize.h	/^    void ReadVersion()           { *this >> nVersion; }$/;"	f	class:CDataStream
Release	sync.h	/^		void Release() {$/;"	f	class:CSemaphoreGrant
Rewind	serialize.h	/^    bool Rewind(size_type n)$/;"	f	class:CDataStream
SER_BLOCKHEADERONLY	serialize.h	/^    SER_BLOCKHEADERONLY = (1 << 17),$/;"	e	enum:__anon4
SER_DISK	serialize.h	/^    SER_DISK            = (1 << 1),$/;"	e	enum:__anon4
SER_GETHASH	serialize.h	/^    SER_GETHASH         = (1 << 2),$/;"	e	enum:__anon4
SER_NETWORK	serialize.h	/^    SER_NETWORK         = (1 << 0),$/;"	e	enum:__anon4
SER_SKIPSIG	serialize.h	/^    SER_SKIPSIG         = (1 << 16),$/;"	e	enum:__anon4
SOCKET_ERROR	compat.h	41;"	d
SecureString	allocators.h	/^typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;$/;"	t
Select	addrman.h	/^    CAddress Select(int nUnkBias = 50)$/;"	f	class:CAddrMan
SelectTried	addrman.cpp	/^int CAddrMan::SelectTried(int nKBucket)$/;"	f	class:CAddrMan
Select_	addrman.cpp	/^CAddress CAddrMan::Select_(int nUnkBias)$/;"	f	class:CAddrMan
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, T& obj, int nType, int nVersion, CSerActionUnserialize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionGetSerializeSize ser_action)$/;"	f
SerReadWrite	serialize.h	/^inline unsigned int SerReadWrite(Stream& s, const T& obj, int nType, int nVersion, CSerActionSerialize ser_action)$/;"	f
Serialize	bignum.h	/^    void Serialize(Stream& s, int nType=0, int nVersion=1\/*PROTOCOL_VERSION*\/) const$/;"	f	class:CBigNum
Serialize	serialize.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:CDataStream
Serialize	serialize.h	/^    void Serialize(Stream& s, int, int=0) const$/;"	f	class:CFlatData
Serialize	serialize.h	/^inline void Serialize(Stream& os, const T& a, long nType, int nVersion)$/;"	f
Serialize	serialize.h	/^inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, char a,           int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, double a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, float a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, int64 a,          int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed char a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed int a,     int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed long a,    int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, signed short a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, uint64 a,         int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned char a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned int a,   int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned long a,  int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^template<typename Stream> inline void Serialize(Stream& s, unsigned short a, int, int=0) { WRITEDATA(s, a); }$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const CScript& v, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::basic_string<C>& str, int, int)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Serialize	serialize.h	/^void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Serialize	uint256.h	/^    void Serialize(Stream& s, int nType, int nVersion) const$/;"	f	class:base_uint
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Serialize_impl	serialize.h	/^void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
SetCompact	bignum.h	/^    CBigNum& SetCompact(unsigned int nCompact)$/;"	f	class:CBigNum
SetHex	bignum.h	/^    void SetHex(const std::string& str)$/;"	f	class:CBigNum
SetHex	uint256.h	/^    void SetHex(const char* psz)$/;"	f	class:base_uint
SetHex	uint256.h	/^    void SetHex(const std::string& str)$/;"	f	class:base_uint
SetIP	netbase.cpp	/^void CNetAddr::SetIP(const CNetAddr& ipIn)$/;"	f	class:CNetAddr
SetNameProxy	netbase.cpp	/^bool SetNameProxy(CService addrProxy, int nSocksVersion) {$/;"	f
SetNull	uint256.h	/^    void SetNull()$/;"	f	class:base_uint
SetPort	netbase.cpp	/^void CService::SetPort(unsigned short portIn)$/;"	f	class:CService
SetPort	netbase.h	37;"	d
SetProxy	netbase.cpp	/^bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion) {$/;"	f
SetRaw	uint256.h	/^    void SetRaw(unsigned int *val)$/;"	f	class:base_uint
SetSockAddr	netbase.cpp	/^bool CService::SetSockAddr(const struct sockaddr *paddr)$/;"	f	class:CService
SetSpecial	netbase.cpp	/^bool CNetAddr::SetSpecial(const std::string &strName)$/;"	f	class:CNetAddr
SetThreadPriority	common.h	/^inline void SetThreadPriority(int nPriority)$/;"	f
SetType	serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CAutoFile
SetType	serialize.h	/^    void SetType(int n)          { nType = n; }$/;"	f	class:CDataStream
SetVersion	serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CAutoFile
SetVersion	serialize.h	/^    void SetVersion(int n)       { nVersion = n; }$/;"	f	class:CDataStream
ShrinkNew	addrman.cpp	/^int CAddrMan::ShrinkNew(int nUBucket)$/;"	f	class:CAddrMan
Socks4	netbase.cpp	/^bool static Socks4(const CService &addrDest, unsigned int& hSocket)$/;"	f	file:
Socks5	netbase.cpp	/^bool static Socks5(string strDest, int port, unsigned int& hSocket)$/;"	f	file:
SplitHostPort	netbase.cpp	/^void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {$/;"	f
SwapRandom	addrman.cpp	/^void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)$/;"	f	class:CAddrMan
THREAD_PRIORITY_ABOVE_NORMAL	common.h	598;"	d
THREAD_PRIORITY_BELOW_NORMAL	common.h	596;"	d
THREAD_PRIORITY_LOWEST	common.h	595;"	d
THREAD_PRIORITY_NORMAL	common.h	597;"	d
TRY_LOCK	sync.h	127;"	d
Testuint256AdHoc	uint256.h	/^inline int Testuint256AdHoc(std::vector<std::string> vArg)$/;"	f
ToString	bignum.h	/^    std::string ToString(int nBase=10) const$/;"	f	class:CBigNum
ToString	netbase.cpp	/^std::string CNetAddr::ToString() const$/;"	f	class:CNetAddr
ToString	netbase.cpp	/^std::string CService::ToString() const$/;"	f	class:CService
ToString	sync.cpp	/^    std::string ToString() const$/;"	f	struct:CLockLocation
ToString	uint256.h	/^    std::string ToString() const$/;"	f	class:base_uint
ToStringIP	netbase.cpp	/^std::string CNetAddr::ToStringIP() const$/;"	f	class:CNetAddr
ToStringIPPort	netbase.cpp	/^std::string CService::ToStringIPPort() const$/;"	f	class:CService
ToStringPort	netbase.cpp	/^std::string CService::ToStringPort() const$/;"	f	class:CService
TryAcquire	sync.h	/^		bool TryAcquire() {$/;"	f	class:CSemaphoreGrant
TryEnter	sync.h	/^		bool TryEnter(const char* pszName, const char* pszFile, int nLine)$/;"	f	class:CMutexLock
UBEGIN	common.h	59;"	d
UEND	common.h	60;"	d
Unserialize	bignum.h	/^    void Unserialize(Stream& s, int nType=0, int nVersion=1\/*PROTOCOL_VERSION*\/)$/;"	f	class:CBigNum
Unserialize	serialize.h	/^    void Unserialize(Stream& s, int, int=0)$/;"	f	class:CFlatData
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, T& a, long nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0) { char f; READDATA(s, f); a=f; }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, char& a,           int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, double& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, float& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, int64& a,          int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed char& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed int& a,     int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed long& a,    int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, signed short& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, uint64& a,         int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,   int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,  int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a, int, int=0) { READDATA(s, a); }$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, CScript& v, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::basic_string<C>& str, int, int)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)$/;"	f
Unserialize	serialize.h	/^void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion)$/;"	f
Unserialize	uint256.h	/^    void Unserialize(Stream& s, int nType, int nVersion)$/;"	f	class:base_uint
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)$/;"	f
Unserialize_impl	serialize.h	/^void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)$/;"	f
VerifyChecksum	bech32.cpp	/^	bool VerifyChecksum(const std::string& hrp, const cbuff& values)$/;"	f	namespace:__anon1
WIDTH	uint256.h	/^    enum { WIDTH=BITS\/32 };$/;"	e	enum:base_uint::__anon5
WIN32_LEAN_AND_MEAN	compat.h	30;"	d
WRITEDATA	serialize.h	113;"	d
WSAGetLastError	netbase.cpp	41;"	d	file:
Write	addrman.cpp	/^bool CAddrDB::Write(const CAddrMan& addr)$/;"	f	class:CAddrDB
WriteCompactSize	serialize.h	/^void WriteCompactSize(Stream& os, uint64 nSize)$/;"	f
WriteVersion	serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CAutoFile
WriteVersion	serialize.h	/^    void WriteVersion()          { *this << nVersion; }$/;"	f	class:CDataStream
_	common.h	/^inline std::string _(const char* psz)$/;"	f
_BITCOIN_ADDRMAN	addrman.h	31;"	d
_BN_bn2mpi	bignum.h	/^static int _BN_bn2mpi(const BIGNUM *a, unsigned char *d)$/;"	f
_BN_bn2mpi	bignum.h	72;"	d
_UINT256_H	uint256.h	2;"	d
__ALLOCATORS_H	allocators.h	27;"	d
__COMMON_H__	common.h	3;"	d
__COMPAT_H	compat.h	27;"	d
__SERVER__NETBASE_H__	netbase.h	27;"	d
__SERVER__PROTOCOL_H__	protocol.h	31;"	d
__SERVER__SERIALIZE_H__	serialize.h	27;"	d
__SERVER__SYNC_H__	sync.h	27;"	d
abs64	common.h	/^inline int64 abs64(int64 n)$/;"	f
alignup	common.h	/^T* alignup(T* p)$/;"	f
allocate	allocators.h	/^    T* allocate(std::size_t n, const void *hint = 0)$/;"	f	struct:secure_allocator
allocator_type	serialize.h	/^    typedef vector_type::allocator_type   allocator_type;$/;"	t	class:CDataStream
atoi	common.h	/^inline int atoi(const std::string& str)$/;"	f
atoi64	common.h	/^inline int64 atoi64(const char* psz)$/;"	f
atoi64	common.h	/^inline int64 atoi64(const std::string& str)$/;"	f
base	allocators.h	/^    typedef std::allocator<T> base;$/;"	t	struct:secure_allocator
base	allocators.h	/^    typedef std::allocator<T> base;$/;"	t	struct:zero_after_free_allocator
base_uint	uint256.h	/^class base_uint$/;"	c
base_uint160	uint256.h	/^typedef base_uint<160> base_uint160;$/;"	t
base_uint256	uint256.h	/^typedef base_uint<256> base_uint256;$/;"	t
basetype	uint256.h	/^    typedef base_uint160 basetype;$/;"	t	class:uint160
basetype	uint256.h	/^    typedef base_uint256 basetype;$/;"	t	class:uint256
bech32	bech32.cpp	/^namespace bech32$/;"	n	file:
bech32	bech32.h	/^namespace bech32$/;"	n
begin	serialize.h	/^    char* begin() { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const char* begin() const { return pbegin; }$/;"	f	class:CFlatData
begin	serialize.h	/^    const_iterator begin() const                     { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	serialize.h	/^    iterator begin()                                 { return vch.begin() + nReadPos; }$/;"	f	class:CDataStream
begin	uint256.h	/^    const unsigned char* begin() const$/;"	f	class:base_uint
begin	uint256.h	/^    unsigned char* begin()$/;"	f	class:base_uint
bignum_error	bignum.h	/^    explicit bignum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:bignum_error
bignum_error	bignum.h	/^class bignum_error : public std::runtime_error$/;"	c
bits	bignum.h	/^		int bits()$/;"	f	class:CBigNum
cbuff	common.h	/^typedef std::vector<unsigned char> cbuff;$/;"	t
clear	serialize.h	/^    void clear()                                     { vch.clear(); nReadPos = 0; }$/;"	f	class:CDataStream
clear	serialize.h	/^    void clear(short n = 0)      { state = n; }$/;"	f	class:CAutoFile
clear	serialize.h	/^    void clear(short n)          { state = n; }  \/\/ name conflict with vector clear()$/;"	f	class:CDataStream
closesocket	compat.h	47;"	d
condition	sync.h	/^		boost::condition_variable condition;$/;"	m	class:CSemaphore
const_iterator	serialize.h	/^    typedef vector_type::const_iterator   const_iterator;$/;"	t	class:CDataStream
const_pointer	allocators.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:secure_allocator
const_pointer	allocators.h	/^    typedef typename base::const_pointer const_pointer;$/;"	t	struct:zero_after_free_allocator
const_reference	allocators.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:secure_allocator
const_reference	allocators.h	/^    typedef typename base::const_reference const_reference;$/;"	t	struct:zero_after_free_allocator
const_reference	serialize.h	/^    typedef vector_type::const_reference  const_reference;$/;"	t	class:CDataStream
cs	addrman.h	/^    mutable CCriticalSection cs;$/;"	m	class:CAddrMan
ctx	common.h	/^    SHA256_CTX ctx;$/;"	m	class:CHashWriter
dd_mutex	sync.cpp	/^static boost::mutex dd_mutex;$/;"	v	file:
deallocate	allocators.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:secure_allocator
deallocate	allocators.h	/^    void deallocate(T* p, std::size_t n)$/;"	f	struct:zero_after_free_allocator
difference_type	allocators.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:secure_allocator
difference_type	allocators.h	/^    typedef typename base::difference_type  difference_type;$/;"	t	struct:zero_after_free_allocator
difference_type	serialize.h	/^    typedef vector_type::difference_type  difference_type;$/;"	t	class:CDataStream
empty	serialize.h	/^    bool empty() const                               { return vch.size() == nReadPos; }$/;"	f	class:CDataStream
end	serialize.h	/^    char* end() { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const char* end() const { return pend; }$/;"	f	class:CFlatData
end	serialize.h	/^    const_iterator end() const                       { return vch.end(); }$/;"	f	class:CDataStream
end	serialize.h	/^    iterator end()                                   { return vch.end(); }$/;"	f	class:CDataStream
end	uint256.h	/^    const unsigned char* end() const$/;"	f	class:base_uint
end	uint256.h	/^    unsigned char* end()$/;"	f	class:base_uint
eof	serialize.h	/^    bool eof() const             { return size() == 0; }$/;"	f	class:CDataStream
erase	serialize.h	/^    iterator erase(iterator first, iterator last)$/;"	f	class:CDataStream
erase	serialize.h	/^    iterator erase(iterator it)$/;"	f	class:CDataStream
exceptions	serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CAutoFile
exceptions	serialize.h	/^    short exceptions()           { return exceptmask; }$/;"	f	class:CDataStream
exceptions	serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CAutoFile"); return prev; }$/;"	f	class:CAutoFile
exceptions	serialize.h	/^    short exceptions(short mask) { short prev = exceptmask; exceptmask = mask; setstate(0, "CDataStream"); return prev; }$/;"	f	class:CDataStream
exceptmask	serialize.h	/^    short exceptmask;$/;"	m	class:CAutoFile
exceptmask	serialize.h	/^    short exceptmask;$/;"	m	class:CDataStream
fHaveGrant	sync.h	/^		bool fHaveGrant;$/;"	m	class:CSemaphoreGrant
fInTried	addrman.h	/^    bool fInTried;$/;"	m	class:CAddrInfo
fNameLookup	netbase.cpp	/^bool fNameLookup = false;$/;"	v
fail	serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CAutoFile
fail	serialize.h	/^    bool fail() const            { return state & (std::ios::badbit | std::ios::failbit); }$/;"	f	class:CDataStream
fclose	serialize.h	/^    void fclose()$/;"	f	class:CAutoFile
fcntl	netbase.cpp	34;"	d	file:
file	serialize.h	/^    FILE* file;$/;"	m	class:CAutoFile
getint	bignum.h	/^    int getint() const$/;"	f	class:CBigNum
getuint	bignum.h	/^    unsigned int getuint() const$/;"	f	class:CBigNum
getuint256	bignum.h	/^    uint256 getuint256()$/;"	f	class:CBigNum
getulong	bignum.h	/^    unsigned long getulong() const$/;"	f	class:CBigNum
getvch	bignum.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CBigNum
good	serialize.h	/^    bool good() const            { return !eof() && (state == 0); }$/;"	f	class:CDataStream
good	serialize.h	/^    bool good() const            { return state == 0; }$/;"	f	class:CAutoFile
hash	protocol.h	/^		uint256 hash;$/;"	m	class:CInv
i64tostr	common.h	/^inline std::string i64tostr(int64 n)$/;"	f
ifaceIndex	protocol.h	/^		mutable int ifaceIndex;$/;"	m	class:CInv
ignore	serialize.h	/^    CDataStream& ignore(int nSize)$/;"	f	class:CDataStream
in_avail	serialize.h	/^    int in_avail()               { return size(); }$/;"	f	class:CDataStream
input	common.h	/^    void input(T value)$/;"	f	class:CMedianFilter
insert	serialize.h	/^    iterator insert(iterator it, const char& x=char()) { return vch.insert(it, x); }$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, const char* first, const char* last)$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, const_iterator first, const_iterator last)$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, size_type n, const char& x) { vch.insert(it, n, x); }$/;"	f	class:CDataStream
insert	serialize.h	/^    void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const_iterator last)$/;"	f	class:CDataStream
int64	uint256.h	/^typedef long long  int64;$/;"	t
ip	netbase.h	/^    unsigned char ip[16]; \/\/ in network byte order$/;"	m	class:CNetAddr
iterator	serialize.h	/^    typedef vector_type::iterator         iterator;$/;"	t	class:CDataStream
itostr	common.h	/^inline std::string itostr(int n)$/;"	f
lock	sync.h	/^		boost::unique_lock<Mutex> lock;$/;"	m	class:CMutexLock
lockorders	sync.cpp	/^static std::map<std::pair<void*, void*>, LockStack> lockorders;$/;"	v	file:
lockstack	sync.cpp	/^static boost::thread_specific_ptr<LockStack> lockstack;$/;"	v	file:
loop	common.h	56;"	d
main	serialize.h	/^int main(int argc, char *argv[])$/;"	f
mapAddr	addrman.h	/^    std::map<CNetAddr, int> mapAddr;$/;"	m	class:CAddrMan
mapInfo	addrman.h	/^    std::map<int, CAddrInfo> mapInfo;$/;"	m	class:CAddrMan
median	common.h	/^    T median() const$/;"	f	class:CMedianFilter
mlock	allocators.h	38;"	d
mlock	allocators.h	48;"	d
munlock	allocators.h	39;"	d
munlock	allocators.h	51;"	d
mutex	sync.h	/^		boost::mutex mutex;$/;"	m	class:CSemaphore
mutexName	sync.cpp	/^    std::string mutexName;$/;"	m	struct:CLockLocation	file:
nAttempts	addrman.h	/^    int nAttempts;$/;"	m	class:CAddrInfo
nChecksum	protocol.h	/^		unsigned int nChecksum;$/;"	m	class:CMessageHeader
nConnectTimeout	netbase.cpp	/^int nConnectTimeout = 5000;$/;"	v
nIdCount	addrman.h	/^    int nIdCount;$/;"	m	class:CAddrMan
nKey	addrman.h	/^    std::vector<unsigned char> nKey;$/;"	m	class:CAddrMan
nLastSuccess	addrman.h	/^    int64 nLastSuccess;$/;"	m	class:CAddrInfo
nLastTry	protocol.h	/^		mutable int64 nLastTry;$/;"	m	class:CAddress
nMessageSize	protocol.h	/^		unsigned int nMessageSize;$/;"	m	class:CMessageHeader
nNew	addrman.h	/^    int nNew;$/;"	m	class:CAddrMan
nRandomPos	addrman.h	/^    int nRandomPos;$/;"	m	class:CAddrInfo
nReadPos	serialize.h	/^    unsigned int nReadPos;$/;"	m	class:CDataStream
nRefCount	addrman.h	/^    int nRefCount;$/;"	m	class:CAddrInfo
nServices	protocol.h	/^		uint64 nServices;$/;"	m	class:CAddress
nSize	common.h	/^    unsigned int nSize;$/;"	m	class:CMedianFilter
nTime	protocol.h	/^		unsigned int nTime;$/;"	m	class:CAddress
nTried	addrman.h	/^    int nTried;$/;"	m	class:CAddrMan
nType	common.h	/^    int nType;$/;"	m	class:CHashWriter
nType	serialize.h	/^    int nType;$/;"	m	class:CAutoFile
nType	serialize.h	/^    int nType;$/;"	m	class:CDataStream
nType	serialize.h	/^    int nType;$/;"	m	struct:ser_streamplaceholder
nVersion	common.h	/^    int nVersion;$/;"	m	class:CHashWriter
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CAutoFile
nVersion	serialize.h	/^    int nVersion;$/;"	m	class:CDataStream
nVersion	serialize.h	/^    int nVersion;$/;"	m	struct:ser_streamplaceholder
nameproxyInfo	netbase.cpp	/^static proxyType nameproxyInfo;$/;"	v	file:
operator !	bignum.h	/^    bool operator!() const$/;"	f	class:CBigNum
operator !	bignum.h	/^    bool operator!() { return (pctx == NULL); }$/;"	f	class:CAutoBN_CTX
operator !	serialize.h	/^    bool operator!()            { return (file == NULL); }$/;"	f	class:CAutoFile
operator !	uint256.h	/^    bool operator!() const$/;"	f	class:base_uint
operator !=	bignum.h	/^inline bool operator!=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) != 0); }$/;"	f
operator !=	netbase.cpp	/^bool operator!=(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator !=	netbase.cpp	/^bool operator!=(const CService& a, const CService& b)$/;"	f
operator !=	uint256.h	/^    friend inline bool operator!=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator !=	uint256.h	/^    friend inline bool operator!=(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator !=	uint256.h	/^inline bool operator!=(const base_uint160& a, const uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const base_uint256& a, const uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, const base_uint160& b)         { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint160& a, uint64 b)                           { return (base_uint160)a != b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, const base_uint256& b)         { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, const uint256& b)              { return (base_uint256)a != (base_uint256)b; }$/;"	f
operator !=	uint256.h	/^inline bool operator!=(const uint256& a, uint64 b)                           { return (base_uint256)a != b; }$/;"	f
operator %	bignum.h	/^inline const CBigNum operator%(const CBigNum& a, const CBigNum& b)$/;"	f
operator %=	bignum.h	/^    CBigNum& operator%=(const CBigNum& b)$/;"	f	class:CBigNum
operator &	bignum.h	/^    BN_CTX** operator&() { return &pctx; }$/;"	f	class:CAutoBN_CTX
operator &	serialize.h	/^    FILE** operator&()          { return &file; }$/;"	f	class:CAutoFile
operator &	uint256.h	/^inline const uint160 operator&(const base_uint160& a, const base_uint160& b) { return uint160(a) &= b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const base_uint160& a, const uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const uint160& a, const base_uint160& b) { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint160 operator&(const uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const base_uint256& a, const base_uint256& b) { return uint256(a) &= b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const base_uint256& a, const uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const uint256& a, const base_uint256& b) { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &	uint256.h	/^inline const uint256 operator&(const uint256& a, const uint256& b)      { return (base_uint256)a &  (base_uint256)b; }$/;"	f
operator &=	uint256.h	/^    base_uint& operator&=(const base_uint& b)$/;"	f	class:base_uint
operator *	bignum.h	/^    BN_CTX& operator*() { return *pctx; }$/;"	f	class:CAutoBN_CTX
operator *	bignum.h	/^inline const CBigNum operator*(const CBigNum& a, const CBigNum& b)$/;"	f
operator *	serialize.h	/^    FILE& operator*()           { return *file; }$/;"	f	class:CAutoFile
operator *=	bignum.h	/^    CBigNum& operator*=(const CBigNum& b)$/;"	f	class:CBigNum
operator +	bignum.h	/^inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)$/;"	f
operator +	serialize.h	/^    friend CDataStream operator+(const CDataStream& a, const CDataStream& b)$/;"	f	class:CDataStream
operator +	uint256.h	/^inline const uint160 operator+(const base_uint160& a, const base_uint160& b) { return uint160(a) += b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const base_uint160& a, const uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const uint160& a, const base_uint160& b) { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint160 operator+(const uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const base_uint256& a, const base_uint256& b) { return uint256(a) += b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const base_uint256& a, const uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const uint256& a, const base_uint256& b) { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator +	uint256.h	/^inline const uint256 operator+(const uint256& a, const uint256& b)      { return (base_uint256)a +  (base_uint256)b; }$/;"	f
operator ++	bignum.h	/^    CBigNum& operator++()$/;"	f	class:CBigNum
operator ++	bignum.h	/^    const CBigNum operator++(int)$/;"	f	class:CBigNum
operator ++	uint256.h	/^    base_uint& operator++()$/;"	f	class:base_uint
operator ++	uint256.h	/^    const base_uint operator++(int)$/;"	f	class:base_uint
operator +=	bignum.h	/^    CBigNum& operator+=(const CBigNum& b)$/;"	f	class:CBigNum
operator +=	serialize.h	/^    CDataStream& operator+=(const CDataStream& b)$/;"	f	class:CDataStream
operator +=	uint256.h	/^    base_uint& operator+=(const base_uint& b)$/;"	f	class:base_uint
operator +=	uint256.h	/^    base_uint& operator+=(uint64 b64)$/;"	f	class:base_uint
operator -	bignum.h	/^inline const CBigNum operator-(const CBigNum& a)$/;"	f
operator -	bignum.h	/^inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)$/;"	f
operator -	uint256.h	/^    const base_uint operator-() const$/;"	f	class:base_uint
operator -	uint256.h	/^inline const uint160 operator-(const base_uint160& a, const base_uint160& b) { return uint160(a) -= b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const base_uint160& a, const uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const uint160& a, const base_uint160& b) { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint160 operator-(const uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const base_uint256& a, const base_uint256& b) { return uint256(a) -= b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const base_uint256& a, const uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const uint256& a, const base_uint256& b) { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator -	uint256.h	/^inline const uint256 operator-(const uint256& a, const uint256& b)      { return (base_uint256)a -  (base_uint256)b; }$/;"	f
operator --	bignum.h	/^    CBigNum& operator--()$/;"	f	class:CBigNum
operator --	bignum.h	/^    const CBigNum operator--(int)$/;"	f	class:CBigNum
operator --	uint256.h	/^    base_uint& operator--()$/;"	f	class:base_uint
operator --	uint256.h	/^    const base_uint operator--(int)$/;"	f	class:base_uint
operator -=	bignum.h	/^    CBigNum& operator-=(const CBigNum& b)$/;"	f	class:CBigNum
operator -=	uint256.h	/^    base_uint& operator-=(const base_uint& b)$/;"	f	class:base_uint
operator -=	uint256.h	/^    base_uint& operator-=(uint64 b64)$/;"	f	class:base_uint
operator ->	serialize.h	/^    FILE* operator->()          { return file; }$/;"	f	class:CAutoFile
operator /	bignum.h	/^inline const CBigNum operator\/(const CBigNum& a, const CBigNum& b)$/;"	f
operator /=	bignum.h	/^    CBigNum& operator\/=(const CBigNum& b)$/;"	f	class:CBigNum
operator <	bignum.h	/^inline bool operator<(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) < 0); }$/;"	f
operator <	netbase.cpp	/^bool operator<(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator <	netbase.cpp	/^bool operator<(const CService& a, const CService& b)$/;"	f
operator <	uint256.h	/^    friend inline bool operator<(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <	uint256.h	/^inline bool operator<(const base_uint160& a, const uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const base_uint256& a, const uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint160& a, const base_uint160& b)          { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint256& a, const base_uint256& b)          { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <	uint256.h	/^inline bool operator<(const uint256& a, const uint256& b)               { return (base_uint256)a <  (base_uint256)b; }$/;"	f
operator <<	bignum.h	/^inline const CBigNum operator<<(const CBigNum& a, unsigned int shift)$/;"	f
operator <<	common.h	/^    CHashWriter& operator<<(const T& obj) {$/;"	f	class:CHashWriter
operator <<	serialize.h	/^    CAutoFile& operator<<(const T& obj)$/;"	f	class:CAutoFile
operator <<	serialize.h	/^    CDataStream& operator<<(const T& obj)$/;"	f	class:CDataStream
operator <<	uint256.h	/^inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }$/;"	f
operator <<	uint256.h	/^inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }$/;"	f
operator <<=	bignum.h	/^    CBigNum& operator<<=(unsigned int shift)$/;"	f	class:CBigNum
operator <<=	uint256.h	/^    base_uint& operator<<=(unsigned int shift)$/;"	f	class:base_uint
operator <=	bignum.h	/^inline bool operator<=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) <= 0); }$/;"	f
operator <=	uint256.h	/^    friend inline bool operator<=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator <=	uint256.h	/^inline bool operator<=(const base_uint160& a, const uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const base_uint256& a, const uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint160& a, const base_uint160& b)         { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint256& a, const base_uint256& b)         { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator <=	uint256.h	/^inline bool operator<=(const uint256& a, const uint256& b)              { return (base_uint256)a <= (base_uint256)b; }$/;"	f
operator =	bignum.h	/^    BN_CTX* operator=(BN_CTX* pnew) { return pctx = pnew; }$/;"	f	class:CAutoBN_CTX
operator =	bignum.h	/^    CBigNum& operator=(const CBigNum& b)$/;"	f	class:CBigNum
operator =	serialize.h	/^    FILE* operator=(FILE* pnew) { return file = pnew; }$/;"	f	class:CAutoFile
operator =	uint256.h	/^    base_uint& operator=(uint64 b)$/;"	f	class:base_uint
operator =	uint256.h	/^    uint160& operator=(const basetype& b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint160& operator=(const shkey_t& b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint160& operator=(uint64 b)$/;"	f	class:uint160
operator =	uint256.h	/^    uint256& operator=(const basetype& b)$/;"	f	class:uint256
operator =	uint256.h	/^    uint256& operator=(uint64 b)$/;"	f	class:uint256
operator ==	bignum.h	/^inline bool operator==(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) == 0); }$/;"	f
operator ==	netbase.cpp	/^bool operator==(const CNetAddr& a, const CNetAddr& b)$/;"	f
operator ==	netbase.cpp	/^bool operator==(const CService& a, const CService& b)$/;"	f
operator ==	uint256.h	/^    friend inline bool operator==(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator ==	uint256.h	/^    friend inline bool operator==(const base_uint& a, uint64 b)$/;"	f	class:base_uint
operator ==	uint256.h	/^inline bool operator==(const base_uint160& a, const uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const base_uint256& a, const uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, const base_uint160& b)         { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint160& a, uint64 b)                           { return (base_uint160)a == b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, const base_uint256& b)         { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, const uint256& b)              { return (base_uint256)a == (base_uint256)b; }$/;"	f
operator ==	uint256.h	/^inline bool operator==(const uint256& a, uint64 b)                           { return (base_uint256)a == b; }$/;"	f
operator >	bignum.h	/^inline bool operator>(const CBigNum& a, const CBigNum& b)  { return (BN_cmp(&a, &b) > 0); }$/;"	f
operator >	uint256.h	/^    friend inline bool operator>(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >	uint256.h	/^inline bool operator>(const base_uint160& a, const uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const base_uint256& a, const uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint160& a, const base_uint160& b)          { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint256& a, const base_uint256& b)          { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >	uint256.h	/^inline bool operator>(const uint256& a, const uint256& b)               { return (base_uint256)a >  (base_uint256)b; }$/;"	f
operator >=	bignum.h	/^inline bool operator>=(const CBigNum& a, const CBigNum& b) { return (BN_cmp(&a, &b) >= 0); }$/;"	f
operator >=	uint256.h	/^    friend inline bool operator>=(const base_uint& a, const base_uint& b)$/;"	f	class:base_uint
operator >=	uint256.h	/^inline bool operator>=(const base_uint160& a, const uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const base_uint256& a, const uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint160& a, const base_uint160& b)         { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint256& a, const base_uint256& b)         { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >=	uint256.h	/^inline bool operator>=(const uint256& a, const uint256& b)              { return (base_uint256)a >= (base_uint256)b; }$/;"	f
operator >>	bignum.h	/^inline const CBigNum operator>>(const CBigNum& a, unsigned int shift)$/;"	f
operator >>	serialize.h	/^    CAutoFile& operator>>(T& obj)$/;"	f	class:CAutoFile
operator >>	serialize.h	/^    CDataStream& operator>>(T& obj)$/;"	f	class:CDataStream
operator >>	uint256.h	/^inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint160 operator>>(const uint160& a, unsigned int shift)        { return uint160(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }$/;"	f
operator >>	uint256.h	/^inline const uint256 operator>>(const uint256& a, unsigned int shift)        { return uint256(a) >>= shift; }$/;"	f
operator >>=	bignum.h	/^    CBigNum& operator>>=(unsigned int shift)$/;"	f	class:CBigNum
operator >>=	uint256.h	/^    base_uint& operator>>=(unsigned int shift)$/;"	f	class:base_uint
operator BN_CTX*	bignum.h	/^    operator BN_CTX*() { return pctx; }$/;"	f	class:CAutoBN_CTX
operator FILE*	serialize.h	/^    operator FILE*()            { return file; }$/;"	f	class:CAutoFile
operator []	serialize.h	/^    const_reference operator[](size_type pos) const  { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator []	serialize.h	/^    reference operator[](size_type pos)              { return vch[pos + nReadPos]; }$/;"	f	class:CDataStream
operator ^	uint256.h	/^inline const uint160 operator^(const base_uint160& a, const base_uint160& b) { return uint160(a) ^= b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const base_uint160& a, const uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const uint160& a, const base_uint160& b) { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint160 operator^(const uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const base_uint256& a, const base_uint256& b) { return uint256(a) ^= b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const base_uint256& a, const uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const uint256& a, const base_uint256& b) { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^	uint256.h	/^inline const uint256 operator^(const uint256& a, const uint256& b)      { return (base_uint256)a ^  (base_uint256)b; }$/;"	f
operator ^=	uint256.h	/^    base_uint& operator^=(const base_uint& b)$/;"	f	class:base_uint
operator ^=	uint256.h	/^    base_uint& operator^=(uint64 b)$/;"	f	class:base_uint
operator bool	sync.h	/^		operator bool() {$/;"	f	class:CSemaphoreGrant
operator bool	sync.h	/^		operator bool()$/;"	f	class:CMutexLock
operator |	uint256.h	/^inline const uint160 operator|(const base_uint160& a, const base_uint160& b) { return uint160(a) |= b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const base_uint160& a, const uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const uint160& a, const base_uint160& b) { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint160 operator|(const uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const base_uint256& a, const base_uint256& b) { return uint256(a) |= b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const base_uint256& a, const uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const uint256& a, const base_uint256& b) { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |	uint256.h	/^inline const uint256 operator|(const uint256& a, const uint256& b)      { return (base_uint256)a |  (base_uint256)b; }$/;"	f
operator |=	uint256.h	/^    base_uint& operator|=(const base_uint& b)$/;"	f	class:base_uint
operator |=	uint256.h	/^    base_uint& operator|=(uint64 b)$/;"	f	class:base_uint
operator ~	uint256.h	/^    const base_uint operator~() const$/;"	f	class:base_uint
other	allocators.h	/^    { typedef secure_allocator<_Other> other; };$/;"	t	struct:secure_allocator::rebind
other	allocators.h	/^    { typedef zero_after_free_allocator<_Other> other; };$/;"	t	struct:zero_after_free_allocator::rebind
pathAddr	addrman.h	/^    boost::filesystem::path pathAddr;$/;"	m	class:CAddrDB
pbegin	serialize.h	/^    char* pbegin;$/;"	m	class:CFlatData
pchCommand	protocol.h	/^		char pchCommand[COMMAND_SIZE];$/;"	m	class:CMessageHeader
pchGarliCat	netbase.cpp	/^static const unsigned char pchGarliCat[] = {0xFD,0x60,0xDB,0x4D,0xDD,0xB5};$/;"	v	file:
pchIPv4	netbase.cpp	/^static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };$/;"	v	file:
pchMessageStart	protocol.h	/^		char pchMessageStart[MESSAGE_START_SIZE];$/;"	m	class:CMessageHeader
pchOnionCat	netbase.cpp	/^static const unsigned char pchOnionCat[] = {0xFD,0x87,0xD8,0x7E,0xEB,0x43};$/;"	v	file:
pctx	bignum.h	/^    BN_CTX* pctx;$/;"	m	class:CAutoBN_CTX
pend	serialize.h	/^    char* pend;$/;"	m	class:CFlatData
pid_t	common.h	/^typedef int pid_t; \/* define for windows compatiblity *\/$/;"	t
pn	uint256.h	/^    unsigned int pn[WIDTH];$/;"	m	class:base_uint
pointer	allocators.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:secure_allocator
pointer	allocators.h	/^    typedef typename base::pointer pointer;$/;"	t	struct:zero_after_free_allocator
pop_lock	sync.cpp	/^static void pop_lock()$/;"	f	file:
port	netbase.h	/^    unsigned short port; \/\/ host order$/;"	m	class:CService
post	sync.h	/^		void post() {$/;"	f	class:CSemaphore
potential_deadlock_detected	sync.cpp	/^static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)$/;"	f	file:
print	netbase.cpp	/^void CNetAddr::print() const$/;"	f	class:CNetAddr
print	netbase.cpp	/^void CService::print() const$/;"	f	class:CService
proxyInfo	netbase.cpp	/^static proxyType proxyInfo[NET_MAX];$/;"	v	file:
proxyType	netbase.cpp	/^typedef std::pair<CService, int> proxyType;$/;"	t	file:
push_lock	sync.cpp	/^static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)$/;"	f	file:
rdbuf	serialize.h	/^    CDataStream* rdbuf()         { return this; }$/;"	f	class:CDataStream
read	serialize.h	/^    CAutoFile& read(char* pch, size_t nSize)$/;"	f	class:CAutoFile
read	serialize.h	/^    CDataStream& read(char* pch, int nSize)$/;"	f	class:CDataStream
rebind	allocators.h	/^    template<typename _Other> struct rebind$/;"	s	struct:secure_allocator
rebind	allocators.h	/^    template<typename _Other> struct rebind$/;"	s	struct:zero_after_free_allocator
reference	allocators.h	/^    typedef typename base::reference reference;$/;"	t	struct:secure_allocator
reference	allocators.h	/^    typedef typename base::reference reference;$/;"	t	struct:zero_after_free_allocator
reference	serialize.h	/^    typedef vector_type::reference        reference;$/;"	t	class:CDataStream
release	serialize.h	/^    FILE* release()             { FILE* ret = file; file = NULL; return ret; }$/;"	f	class:CAutoFile
reserve	serialize.h	/^    void reserve(size_type n)                        { vch.reserve(n + nReadPos); }$/;"	f	class:CDataStream
resize	serialize.h	/^    void resize(size_type n, value_type c=0)         { vch.resize(n + nReadPos, c); }$/;"	f	class:CDataStream
reverse_iterator	serialize.h	/^    typedef vector_type::reverse_iterator reverse_iterator;$/;"	t	class:CDataStream
roundint	common.h	/^inline int roundint(double d)$/;"	f
roundint64	common.h	/^inline int64 roundint64(double d)$/;"	f
secure_allocator	allocators.h	/^    secure_allocator() throw() {}$/;"	f	struct:secure_allocator
secure_allocator	allocators.h	/^    secure_allocator(const secure_allocator& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	allocators.h	/^    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:secure_allocator
secure_allocator	allocators.h	/^struct secure_allocator : public std::allocator<T>$/;"	s
sem	sync.h	/^		CSemaphore *sem;$/;"	m	class:CSemaphoreGrant
ser_streamplaceholder	serialize.h	/^struct ser_streamplaceholder$/;"	s
setint64	bignum.h	/^    void setint64(int64 sn)$/;"	f	class:CBigNum
setstate	serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CAutoFile
setstate	serialize.h	/^    void setstate(short bits, const char* psz)$/;"	f	class:CDataStream
setuint256	bignum.h	/^    void setuint256(uint256 n)$/;"	f	class:CBigNum
setuint64	bignum.h	/^    void setuint64(uint64 n)$/;"	f	class:CBigNum
setulong	bignum.h	/^    void setulong(unsigned long n)$/;"	f	class:CBigNum
setvch	bignum.h	/^    void setvch(const std::vector<unsigned char>& vch)$/;"	f	class:CBigNum
size	addrman.h	/^    int size()$/;"	f	class:CAddrMan
size	common.h	/^    int size() const$/;"	f	class:CMedianFilter
size	serialize.h	/^    size_type size() const                           { return vch.size() - nReadPos; }$/;"	f	class:CDataStream
size	uint256.h	/^    unsigned int size()$/;"	f	class:base_uint
size_type	allocators.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:secure_allocator
size_type	allocators.h	/^    typedef typename base::size_type size_type;$/;"	t	struct:zero_after_free_allocator
size_type	serialize.h	/^    typedef vector_type::size_type        size_type;$/;"	t	class:CDataStream
skipspaces	common.h	/^void skipspaces(T& it)$/;"	f
sorted	common.h	/^    std::vector<T> sorted () const$/;"	f	class:CMedianFilter
source	addrman.h	/^    CNetAddr source;$/;"	m	class:CAddrInfo
sourceFile	sync.cpp	/^    std::string sourceFile;$/;"	m	struct:CLockLocation	file:
sourceLine	sync.cpp	/^    int sourceLine;$/;"	m	struct:CLockLocation	file:
state	serialize.h	/^    short state;$/;"	m	class:CAutoFile
state	serialize.h	/^    short state;$/;"	m	class:CDataStream
str	serialize.h	/^    std::string str() const$/;"	f	class:CDataStream
strlcat	strlcpy.h	/^inline size_t strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	strlcpy.h	/^inline size_t strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strprintf	common.h	125;"	d
try_wait	sync.h	/^		bool try_wait() {$/;"	f	class:CSemaphore
type	protocol.h	/^		int type;$/;"	m	class:CInv
uint160	uint256.h	/^    explicit uint160(const std::string& str)$/;"	f	class:uint160
uint160	uint256.h	/^    explicit uint160(const std::vector<unsigned char>& vch)$/;"	f	class:uint160
uint160	uint256.h	/^    uint160()$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(const basetype& b)$/;"	f	class:uint160
uint160	uint256.h	/^    uint160(uint64 b)$/;"	f	class:uint160
uint160	uint256.h	/^class uint160 : public base_uint160$/;"	c
uint256	uint256.h	/^    explicit uint256(const std::string& str)$/;"	f	class:uint256
uint256	uint256.h	/^    explicit uint256(const std::vector<unsigned char>& vch)$/;"	f	class:uint256
uint256	uint256.h	/^    uint256()$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(const basetype& b)$/;"	f	class:uint256
uint256	uint256.h	/^    uint256(uint64 b)$/;"	f	class:uint256
uint256	uint256.h	/^class uint256 : public base_uint256$/;"	c
uint64	uint256.h	/^typedef unsigned long long  uint64;$/;"	t
vRandom	addrman.h	/^    std::vector<int> vRandom;$/;"	m	class:CAddrMan
vSorted	common.h	/^    std::vector<T> vSorted;$/;"	m	class:CMedianFilter
vValues	common.h	/^    std::vector<T> vValues;$/;"	m	class:CMedianFilter
value	sync.h	/^		int value;$/;"	m	class:CSemaphore
value_type	allocators.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:secure_allocator
value_type	allocators.h	/^    typedef typename base::value_type value_type;$/;"	t	struct:zero_after_free_allocator
value_type	serialize.h	/^    typedef vector_type::value_type       value_type;$/;"	t	class:CDataStream
vch	serialize.h	/^    vector_type vch;$/;"	m	class:CDataStream
vector_type	serialize.h	/^    typedef std::vector<char, zero_after_free_allocator<char> > vector_type;$/;"	t	class:CDataStream
vvNew	addrman.h	/^    std::vector<std::set<int> > vvNew;$/;"	m	class:CAddrMan
vvTried	addrman.h	/^    std::vector<std::vector<int> > vvTried;$/;"	m	class:CAddrMan
wait	sync.h	/^		void wait() {$/;"	f	class:CSemaphore
write	common.h	/^    CHashWriter& write(const char *pch, size_t size) {$/;"	f	class:CHashWriter
write	serialize.h	/^    CAutoFile& write(const char* pch, size_t nSize)$/;"	f	class:CAutoFile
write	serialize.h	/^    CDataStream& write(const char* pch, int nSize)$/;"	f	class:CDataStream
zero_after_free_allocator	allocators.h	/^    zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	allocators.h	/^    zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	allocators.h	/^    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}$/;"	f	struct:zero_after_free_allocator
zero_after_free_allocator	allocators.h	/^struct zero_after_free_allocator : public std::allocator<T>$/;"	s
~CAutoBN_CTX	bignum.h	/^    ~CAutoBN_CTX()$/;"	f	class:CAutoBN_CTX
~CAutoFile	serialize.h	/^    ~CAutoFile()$/;"	f	class:CAutoFile
~CBigNum	bignum.h	/^    ~CBigNum()$/;"	f	class:CBigNum
~CMutexLock	sync.h	/^		~CMutexLock()$/;"	f	class:CMutexLock
~CSemaphoreGrant	sync.h	/^		~CSemaphoreGrant() {$/;"	f	class:CSemaphoreGrant
~secure_allocator	allocators.h	/^    ~secure_allocator() throw() {}$/;"	f	struct:secure_allocator
~zero_after_free_allocator	allocators.h	/^    ~zero_after_free_allocator() throw() {}$/;"	f	struct:zero_after_free_allocator
