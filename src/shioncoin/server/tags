!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCADDRF_DERIVE	account.h	39;"	d
ACCADDRF_DILITHIUM	account.h	43;"	d
ACCADDRF_STATIC	account.h	41;"	d
ACCADDRF_WITNESS	account.h	37;"	d
ACCADDR_CHANGE	wallet.h	64;"	d
ACCADDR_EXEC	wallet.h	66;"	d
ACCADDR_EXT	wallet.h	70;"	d
ACCADDR_HDKEY	wallet.h	68;"	d
ACCADDR_MINER	wallet.h	74;"	d
ACCADDR_NOTARY	wallet.h	72;"	d
ACCADDR_RECV	wallet.h	62;"	d
ADDR_BASE58	coinaddr.h	42;"	d
ADDR_BECH32	coinaddr.h	43;"	d
ADDR_UNKNOWN	coinaddr.h	41;"	d
ADD_SERIALIZE_METHODS	block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactions
ADD_SERIALIZE_METHODS	block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactionsRequest
ADD_SERIALIZE_METHODS	block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeaderAndShortTxIDs
ADD_SERIALIZE_METHODS	block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	struct:TransactionCompressor
ADD_SERIALIZE_METHODS	block_cmpct.h	/^	ADD_SERIALIZE_METHODS;$/;"	m	struct:PrefilledTransaction
ALGOBITS_NUM_BITS	algobits.h	53;"	d
ALGOBITS_TOP_BITS	algobits.h	49;"	d
ALGOBITS_TOP_MASK	algobits.h	51;"	d
ALGO_BLAKE2S	algobits.h	33;"	d
ALGO_GROESTL	algobits.h	35;"	d
ALGO_KECCAK	algobits.h	31;"	d
ALGO_QUBIT	algobits.h	34;"	d
ALGO_SCRYPT	algobits.h	29;"	d
ALGO_SHA256D	algobits.h	30;"	d
ALGO_SKEIN	algobits.h	36;"	d
ALGO_X11	algobits.h	32;"	d
AbortMessage	net.h	/^    void AbortMessage()$/;"	f	class:CNode
AbstractThresholdConditionChecker	versionbits.h	/^class AbstractThresholdConditionChecker {$/;"	c
AcceptOffer	block.cpp	/^COffer *CTransaction::AcceptOffer(COffer *offerIn)$/;"	f	class:CTransaction
AcceptWalletTransaction	wallet.cpp	/^bool CWalletTx::AcceptWalletTransaction()$/;"	f	class:CWalletTx
AddActiveTx	txmempool.cpp	/^bool CPool::AddActiveTx(CPoolTx& ptx)$/;"	f	class:CPool
AddAddressKnown	net.h	/^    void AddAddressKnown(const CAddress& addr)$/;"	f	class:CNode
AddCScript	keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddCell	matrix.h	/^		void AddCell(int row, int col, unsigned int val)$/;"	f	class:CTxMatrix
AddCheckpoint	checkpoints.cpp	/^bool CCheckpoints::AddCheckpoint(CBlockIndex *pindex)$/;"	f	class:CCheckpoints
AddCheckpoint	checkpoints.cpp	/^bool CCheckpoints::AddCheckpoint(int height, uint256 hash)$/;"	f	class:CCheckpoints
AddExtTx	txcreator.cpp	/^bool CTxCreator::AddExtTx(CWalletTx *tx, const CScript& scriptPubKey, int64 nTxFee, int64 nValue)$/;"	f	class:CTxCreator
AddInput	txcreator.cpp	/^bool CTxCreator::AddInput(CWalletTx *tx, unsigned int n, unsigned int seq)$/;"	f	class:CTxCreator
AddInput	txcreator.cpp	/^bool CTxCreator::AddInput(uint256 hashTx, unsigned int n, unsigned int seq)$/;"	f	class:CTxCreator
AddInput	txmempool.h	/^    void AddInput(CTransaction prevTx)$/;"	f	class:CPoolTx
AddInvalTx	txmempool.cpp	/^void CPool::AddInvalTx(CPoolTx& ptx)$/;"	f	class:CPool
AddInventoryKnown	net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddKey	keystore.cpp	/^bool CBasicKeyStore::AddKey(const DIKey& key)$/;"	f	class:CBasicKeyStore
AddKey	keystore.cpp	/^bool CBasicKeyStore::AddKey(const ECKey& key)$/;"	f	class:CBasicKeyStore
AddKey	wallet.cpp	/^bool CWallet::AddKey(const DIKey& key)$/;"	f	class:CWallet
AddKey	wallet.cpp	/^bool CWallet::AddKey(const ECKey& key)$/;"	f	class:CWallet
AddOutput	txcreator.cpp	/^bool CTxCreator::AddOutput(CScript scriptPubKey, int64 nValue, bool fInsert)$/;"	f	class:CTxCreator
AddOutput	txcreator.cpp	/^bool CTxCreator::AddOutput(const CPubKey& pubkey, int64 nValue, bool fInsert)$/;"	f	class:CTxCreator
AddOutput	txcreator.cpp	/^bool CTxCreator::AddOutput(const CTxDestination& address, int64 nValue, bool fInsert)$/;"	f	class:CTxCreator
AddOverflowTx	txmempool.cpp	/^bool CPool::AddOverflowTx(CPoolTx& ptx)$/;"	f	class:CPool
AddPendingTx	txmempool.cpp	/^bool CPool::AddPendingTx(CPoolTx& ptx)$/;"	f	class:CPool
AddRef	net.h	/^    CNode* AddRef(int64 nTimeout=0)$/;"	f	class:CNode
AddStaleTx	txmempool.cpp	/^bool CPool::AddStaleTx(CPoolTx& ptx)$/;"	f	class:CPool
AddSupportingTransactions	wallet.cpp	/^void CWalletTx::AddSupportingTransactions()$/;"	f	class:CWalletTx
AddTimeData	util.cpp	/^void AddTimeData(const CNetAddr& ip, int64 nTime)$/;"	f
AddToWallet	wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fFindBlock)$/;"	f	class:CWallet
AddTx	txmempool.cpp	/^bool CPool::AddTx(CTransaction& tx, CNode *pfrom, uint160 hColor)$/;"	f	class:CPool
AddTx	wallettx.cpp	/^bool CWallet::AddTx(const CTransaction& tx, const CBlock* pblock)$/;"	f	class:CWallet
AddTx	wallettx.cpp	/^bool CWallet::AddTx(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddTx	wallettx.cpp	/^bool CWallet::AddTx(const uint256& hTx, const CBlock *pblock)$/;"	f	class:CWallet
AddTxIndex	txidx.cpp	/^bool CTxDB::AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight)$/;"	f	class:CTxDB
AllowFree	wallet.h	/^		bool AllowFree(double dPriority)$/;"	f	class:CWallet
Append	matrix.cpp	/^void CTxMatrix::Append(int heightIn, uint256 hash)$/;"	f	class:CTxMatrix
AppendBlockFile	main.cpp	/^FILE* AppendBlockFile(unsigned int& nFileRet)$/;"	f
ApproximateBestSubset	wallet.cpp	/^static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsigned int> > >vValue, int64 nTotalLower, int64 nTargetValue,$/;"	f	file:
AreInputsSpent	txmempool.cpp	/^bool CPool::AreInputsSpent(CPoolTx& ptx)$/;"	f	class:CPool
AreInputsStandard	main.cpp	/^bool CTransaction::AreInputsStandard(int ifaceIndex, const MapPrevTx& mapInputs) const$/;"	f	class:CTransaction
AskFor	net.h	/^    void AskFor(CInv& inv)$/;"	f	class:CNode
AvailableAccountCoins	wallet.cpp	/^void CWallet::AvailableAccountCoins(string strAccount, vector<COutput>& vCoins, bool fOnlyConfirmed, uint160 hColor) const$/;"	f	class:CWallet
AvailableAddrCoins	wallet.cpp	/^void CWallet::AvailableAddrCoins(vector<COutput>& vCoins, const CCoinAddr& filterAddr, int64& nTotalValue, bool fOnlyConfirmed) const$/;"	f	class:CWallet
AvailableCoins	wallet.cpp	/^void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed)$/;"	f	class:CWallet
BASE58_DEFAULT_SCRIPT_ADDRESS	base58.h	36;"	d
BASE58_EXT_PUBLIC_KEY	coinaddr.h	/^			BASE58_EXT_PUBLIC_KEY,$/;"	e	enum:CCoinAddr::__anon3
BASE58_EXT_SECRET_KEY	coinaddr.h	/^			BASE58_EXT_SECRET_KEY,$/;"	e	enum:CCoinAddr::__anon3
BASE58_PUBKEY_ADDRESS	coinaddr.h	/^			BASE58_PUBKEY_ADDRESS,$/;"	e	enum:CCoinAddr::__anon3
BASE58_SCRIPT_ADDRESS	coinaddr.h	/^			BASE58_SCRIPT_ADDRESS,$/;"	e	enum:CCoinAddr::__anon3
BASE58_SCRIPT_ADDRESS2	coinaddr.h	/^			BASE58_SCRIPT_ADDRESS2,$/;"	e	enum:CCoinAddr::__anon3
BASE58_SECRET_KEY	coinaddr.h	/^			BASE58_SECRET_KEY,$/;"	e	enum:CCoinAddr::__anon3
BCOP_DOWNLOAD	chain.h	36;"	d
BCOP_EXPORT	chain.h	35;"	d
BCOP_IMPORT	chain.h	34;"	d
BCOP_MINER	chain.h	38;"	d
BCOP_NONE	chain.h	33;"	d
BCOP_VALIDATE	chain.h	37;"	d
BIP32Hash	eckey.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32_EXTKEY_SIZE	eckey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BIP32_HARDENED_KEY_LIMIT	wallet.h	/^const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;$/;"	v
BIP9DeploymentInfo	versionbits.h	/^struct BIP9DeploymentInfo {$/;"	s
BLOCK_ALGO_BLAKE2S	algobits.h	43;"	d
BLOCK_ALGO_GROESTL	algobits.h	45;"	d
BLOCK_ALGO_KECCAK	algobits.h	41;"	d
BLOCK_ALGO_QUBIT	algobits.h	44;"	d
BLOCK_ALGO_SCRYPT	algobits.h	39;"	d
BLOCK_ALGO_SHA256D	algobits.h	40;"	d
BLOCK_ALGO_SKEIN	algobits.h	46;"	d
BLOCK_ALGO_X11	algobits.h	42;"	d
BLOCK_FAILED_CHILD	block.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/!< descends from failed block$/;"	e	enum:BlockStatus
BLOCK_FAILED_MASK	block.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:BlockStatus
BLOCK_FAILED_VALID	block.h	/^    BLOCK_FAILED_VALID       =   32, \/\/!< stage after last reached validness failed$/;"	e	enum:BlockStatus
BLOCK_HAVE_DATA	block.h	/^    BLOCK_HAVE_DATA          =    8, \/\/!< full block available in blk*.dat$/;"	e	enum:BlockStatus
BLOCK_HAVE_MASK	block.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:BlockStatus
BLOCK_HAVE_UNDO	block.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/!< undo data available in rev*.dat$/;"	e	enum:BlockStatus
BLOCK_OPT_WITNESS	block.h	/^    BLOCK_OPT_WITNESS       =   128, \/\/!< block data in blk*.data was received with a witness-enforcing client$/;"	e	enum:BlockStatus
BLOCK_VALID_CHAIN	block.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:BlockStatus
BLOCK_VALID_HEADER	block.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:BlockStatus
BLOCK_VALID_MASK	block.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:BlockStatus
BLOCK_VALID_SCRIPTS	block.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:BlockStatus
BLOCK_VALID_TRANSACTIONS	block.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:BlockStatus
BLOCK_VALID_TREE	block.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:BlockStatus
BLOCK_VALID_UNKNOWN	block.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:BlockStatus
BLOOM_TEST	net.h	103;"	d
BLOOM_UPDATE_ALL	net.h	/^  BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	net.h	/^  BLOOM_UPDATE_MASK = 3 $/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	net.h	/^  BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	net.h	/^  BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BUILD_DATE	version.cpp	90;"	d	file:
BUILD_DATE	version.cpp	92;"	d	file:
BUILD_DESC	version.cpp	82;"	d	file:
BUILD_DESC	version.cpp	84;"	d	file:
BUILD_DESC_FROM_COMMIT	version.cpp	74;"	d	file:
BUILD_DESC_FROM_UNKNOWN	version.cpp	77;"	d	file:
BackupBlockChain	block.cpp	/^int BackupBlockChain(CIface *iface, unsigned int maxHeight)$/;"	f
Base58Prefix	wallet.cpp	/^const cbuff& CWallet::Base58Prefix(int type) const$/;"	f	class:CWallet
BeginMessage	net.h	/^    void BeginMessage(const char* pszCommand)$/;"	f	class:CNode
BeginTime	versionbits.cpp	/^      int64_t BeginTime(CIface * params) const { return params->vDeployments[id].nStartTime; }$/;"	f	class:__anon9::VersionBitsConditionChecker
BindWallet	wallet.h	/^			 void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
BlockAcceptSpringMatrix	matrix.cpp	/^bool BlockAcceptSpringMatrix(CIface *iface, CTransaction& tx, bool& fCheck)$/;"	f
BlockAcceptValidateMatrix	matrix.cpp	/^bool BlockAcceptValidateMatrix(CIface *iface, CTransaction& tx, CBlockIndex *pindex, bool& fCheck)$/;"	f
BlockGenerateSpringMatrix	matrix.cpp	/^bool BlockGenerateSpringMatrix(CIface *iface, CTransaction& tx, int64& nReward)$/;"	f
BlockGenerateValidateMatrix	matrix.cpp	/^bool BlockGenerateValidateMatrix(CIface *iface, CTransaction& tx, int64& nReward, uint64_t nBestHeight, uint64_t nCheckHeight)$/;"	f
BlockMerkleBranch	wit_merkle.cpp	/^std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)$/;"	f
BlockMerkleRoot	wit_merkle.cpp	/^uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BlockRetractSpringMatrix	matrix.cpp	/^void BlockRetractSpringMatrix(CIface *iface, CTransaction& tx, CBlockIndex *pindex)$/;"	f
BlockRetractValidateMatrix	matrix.cpp	/^void BlockRetractValidateMatrix(CIface *iface, const CTransaction& tx, CBlockIndex *pindex)$/;"	f
BlockStatus	block.h	/^enum BlockStatus {$/;"	g
BlockTransactions	block_cmpct.h	/^		BlockTransactions() {}$/;"	f	class:BlockTransactions
BlockTransactions	block_cmpct.h	/^		explicit BlockTransactions(const BlockTransactionsRequest& req) :$/;"	f	class:BlockTransactions
BlockTransactions	block_cmpct.h	/^class BlockTransactions $/;"	c
BlockTransactionsRequest	block_cmpct.h	/^class BlockTransactionsRequest $/;"	c
BlockTxCount	block_cmpct.h	/^		size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }$/;"	f	class:CBlockHeaderAndShortTxIDs
BlockVerifyValidateMatrix	matrix.cpp	/^bool BlockVerifyValidateMatrix(CIface *iface, CTransaction& tx, CBlockIndex *pindex)$/;"	f
BlockWitnessMerkleRoot	wit_merkle.cpp	/^uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BuildMerkleTree	block_merkle.cpp	/^uint256 CBlock::BuildMerkleTree() const$/;"	f	class:CBlock
BuildSkip	block.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
CAccount	wallet.h	/^		CAccount()$/;"	f	class:CAccount
CAccount	wallet.h	/^		CAccount(const CAccount& accountIn)$/;"	f	class:CAccount
CAccount	wallet.h	/^class CAccount$/;"	c
CAccountCache	account.h	/^		CAccountCache(CWallet *walletIn) { $/;"	f	class:CAccountCache
CAccountCache	account.h	/^		CAccountCache(CWallet *walletIn, CAccount accountIn, string strAccountIn = "")$/;"	f	class:CAccountCache
CAccountCache	account.h	/^		CAccountCache(CWallet *walletIn, CPubKey vchPubKeyIn, string strAccountIn = "")$/;"	f	class:CAccountCache
CAccountCache	account.h	/^class CAccountCache$/;"	c
CAccountingEntry	wallet.h	/^		CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	wallet.h	/^class CAccountingEntry$/;"	c
CAmount	coin.h	/^typedef int64 CAmount;$/;"	t
CAmount	txfeerate.h	/^typedef int64 CAmount;$/;"	t
CBase58Data	base58.h	/^		CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	base58.h	/^class CBase58Data$/;"	c
CBasicKeyStore	keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBlock	block.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	block.h	/^    CBlock(const CBlock& in_block)$/;"	f	class:CBlock
CBlock	block.h	/^    CBlock(const CBlockHeader &header)$/;"	f	class:CBlock
CBlock	block.h	/^class CBlock : public CBlockHeader$/;"	c
CBlockHeader	block.h	/^    CBlockHeader()$/;"	f	class:CBlockHeader
CBlockHeader	block.h	/^class CBlockHeader$/;"	c
CBlockHeaderAndShortTxIDs	block_cmpct.cpp	/^CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	block_cmpct.h	/^		CBlockHeaderAndShortTxIDs() {}$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	block_cmpct.h	/^class CBlockHeaderAndShortTxIDs $/;"	c
CBlockIndex	block.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	block.h	/^    CBlockIndex(CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	block.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	block.h	/^struct CBlockIndexWorkComparator$/;"	s
CBlockLocator	block.h	/^		CBlockLocator() { }$/;"	f	class:CBlockLocator
CBlockLocator	block.h	/^		explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}$/;"	f	class:CBlockLocator
CBlockLocator	block.h	/^class CBlockLocator$/;"	c
CBlockPolicyEstimator	txfeerate.cpp	/^CBlockPolicyEstimator::CBlockPolicyEstimator(int ifaceIndexIn, const CFeeRate& _minRelayFee) : nBestSeenHeight(0)$/;"	f	class:CBlockPolicyEstimator
CBlockPolicyEstimator	txfeerate.h	/^class CBlockPolicyEstimator$/;"	c
CBloomFilter	bloom.cpp	/^CBloomFilter::CBloomFilter(int ifaceIndexIn, unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	net.h	/^    CBloomFilter(int ifaceIndexIn)$/;"	f	class:CBloomFilter
CBloomFilter	net.h	/^class CBloomFilter$/;"	c
CCheckpoints	checkpoints.h	/^		CCheckpoints(int ifaceIndexIn)$/;"	f	class:CCheckpoints
CCheckpoints	checkpoints.h	/^		CCheckpoints(int ifaceIndexIn, MapCheckpoints mapIn)$/;"	f	class:CCheckpoints
CCheckpoints	checkpoints.h	/^class CCheckpoints$/;"	c
CCoinAddr	coinaddr.h	/^    CCoinAddr()$/;"	f	class:CCoinAddr
CCoinAddr	coinaddr.h	/^    CCoinAddr(int ifaceIndexIn)$/;"	f	class:CCoinAddr
CCoinAddr	coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const CScript& script)$/;"	f	class:CCoinAddr
CCoinAddr	coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const CTxDestination &dest)$/;"	f	class:CCoinAddr
CCoinAddr	coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const char* pszAddress)$/;"	f	class:CCoinAddr
CCoinAddr	coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const std::string& strAddress)$/;"	f	class:CCoinAddr
CCoinAddr	coinaddr.h	/^class CCoinAddr : public CBase58Data$/;"	c
CCoinAddrVisitor	coinaddr.h	/^    CCoinAddrVisitor(CCoinAddr *addrIn) : addr(addrIn) { }$/;"	f	class:CCoinAddrVisitor
CCoinAddrVisitor	coinaddr.h	/^class CCoinAddrVisitor : public boost::static_visitor<bool>$/;"	c
CCoinSecret	base58.h	/^		CCoinSecret()$/;"	f	class:CCoinSecret
CCoinSecret	base58.h	/^		CCoinSecret(int ifaceIndex, const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CCoinSecret
CCoinSecret	base58.h	/^class CCoinSecret : public CBase58Data$/;"	c
CCrypter	crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	crypter.h	/^class CCrypter$/;"	c
CDB	txidx.cpp	/^CDB::CDB(const char *pszFile, const char* pszMode) :$/;"	f	class:CDB
CDB	txidx.h	/^class CDB$/;"	c
CDBEnv	txidx.cpp	/^CDBEnv::CDBEnv() : dbenv(0)$/;"	f	class:CDBEnv
CDBEnv	txidx.h	/^class CDBEnv$/;"	c
CDiskBlockIndex	block.h	/^    CDiskBlockIndex()$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	block.h	/^    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex)$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	block.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	block.h	/^    CDiskTxPos()$/;"	f	class:CDiskTxPos
CDiskTxPos	block.h	/^    CDiskTxPos(unsigned int nFileIn, unsigned int nBlockPosIn, unsigned int nTxPosIn)$/;"	f	class:CDiskTxPos
CDiskTxPos	block.h	/^class CDiskTxPos$/;"	c
CFeeRate	txfeerate.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)$/;"	f	class:CFeeRate
CFeeRate	txfeerate.h	/^    CFeeRate()$/;"	f	class:CFeeRate
CFeeRate	txfeerate.h	/^    CFeeRate(const CFeeRate& other)$/;"	f	class:CFeeRate
CFeeRate	txfeerate.h	/^    explicit CFeeRate(const CAmount& _nCoinPerK) $/;"	f	class:CFeeRate
CFeeRate	txfeerate.h	/^class CFeeRate$/;"	c
CInPoint	block.h	/^    CInPoint() { SetNull(); }$/;"	f	class:CInPoint
CInPoint	block.h	/^    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }$/;"	f	class:CInPoint
CInPoint	block.h	/^class CInPoint$/;"	c
CInit	util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	util.cpp	/^class CInit$/;"	c	file:
CInv	protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int ifaceIndexIn, const std::string& strType, const uint256& hashIn)$/;"	f	class:CInv
CInv	protocol.cpp	/^CInv::CInv(int ifaceIndexIn, int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CKey	key.h	/^    CKey()$/;"	f	class:CKey
CKey	key.h	/^    CKey(const CKey& b)$/;"	f	class:CKey
CKey	key.h	/^class CKey : public CKeyMetadata$/;"	c
CKeyID	key.h	/^    CKeyID() : uint160(0) { }$/;"	f	class:CKeyID
CKeyID	key.h	/^    CKeyID(const uint160 &in) : uint160(in) { }$/;"	f	class:CKeyID
CKeyID	key.h	/^class CKeyID : public uint160$/;"	c
CKeyMetadata	key.h	/^		CKeyMetadata()$/;"	f	class:CKeyMetadata
CKeyMetadata	key.h	/^		explicit CKeyMetadata(int64_t nCreateTime_)$/;"	f	class:CKeyMetadata
CKeyMetadata	key.h	/^class CKeyMetadata$/;"	c
CKeyStore	keystore.h	/^class CKeyStore$/;"	c
CKeyStoreIsMineVisitor	script.cpp	/^    CKeyStoreIsMineVisitor(const CKeyStore *keystoreIn) : keystore(keystoreIn) { }$/;"	f	class:CKeyStoreIsMineVisitor
CKeyStoreIsMineVisitor	script.cpp	/^class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>$/;"	c	file:
CKeyingMaterial	crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLIENT_VERSION_SUFFIX	version.cpp	43;"	d	file:
CMasterKey	crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	crypter.h	/^class CMasterKey$/;"	c
CMerkleBlock	bloom.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)$/;"	f	class:CMerkleBlock
CMerkleBlock	bloom.h	/^class CMerkleBlock$/;"	c
CMerkleTx	main.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	main.h	/^    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)$/;"	f	class:CMerkleTx
CMerkleTx	main.h	/^class CMerkleTx : public CTransaction$/;"	c
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader()$/;"	f	class:CMessageHeader
CMessageHeader	protocol.cpp	/^CMessageHeader::CMessageHeader(int ifaceIndexIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CNoDestination	script.h	/^class CNoDestination {$/;"	c
CNode	net.h	/^    CNode(int ifaceIndexIn, unsigned int hSocketIn, CAddress addrIn, std::string addrNameIn = "", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)$/;"	f	class:CNode
CNode	net.h	/^class CNode$/;"	c
CNodeStats	net.h	/^class CNodeStats$/;"	c
COLORCoinAddr	coinaddr.h	/^    COLORCoinAddr() : CCoinAddr(COLOR_COIN_IFACE)$/;"	f	class:COLORCoinAddr
COLORCoinAddr	coinaddr.h	/^    COLORCoinAddr(const CTxDestination &dest) : CCoinAddr(COLOR_COIN_IFACE)$/;"	f	class:COLORCoinAddr
COLORCoinAddr	coinaddr.h	/^    COLORCoinAddr(const std::string& strAddress) : CCoinAddr(COLOR_COIN_IFACE)$/;"	f	class:COLORCoinAddr
COLORCoinAddr	coinaddr.h	/^class COLORCoinAddr : public CCoinAddr$/;"	c
COMPRESSED_PUBLIC_KEY_SIZE	eckey.cpp	/^static const unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;$/;"	v	file:
CONSENSUS_VERSIONBITS_H	versionbits.h	2;"	d
COutPoint	block.h	/^    COutPoint() { SetNull(); }$/;"	f	class:COutPoint
COutPoint	block.h	/^    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }$/;"	f	class:COutPoint
COutPoint	block.h	/^class COutPoint$/;"	c
COutput	wallet.h	/^		COutput(const CWalletTx *txIn, int iIn, int nDepthIn)$/;"	f	class:COutput
COutput	wallet.h	/^class COutput$/;"	c
CPartialMerkleTree	bloom.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	bloom.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	bloom.h	/^class CPartialMerkleTree$/;"	c
CPool	txmempool.h	/^    CPool(int ifaceIndexIn)$/;"	f	class:CPool
CPool	txmempool.h	/^class CPool : public CTxMemPool$/;"	c
CPoolTx	txmempool.h	/^    CPoolTx()$/;"	f	class:CPoolTx
CPoolTx	txmempool.h	/^    CPoolTx(const CPoolTx& ptxIn)$/;"	f	class:CPoolTx
CPoolTx	txmempool.h	/^    CPoolTx(const CTransaction& txIn)$/;"	f	class:CPoolTx
CPoolTx	txmempool.h	/^class CPoolTx$/;"	c
CPrivKey	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	key.h	/^		CPubKey()$/;"	f	class:CPubKey
CPubKey	key.h	/^		CPubKey(const std::vector<unsigned char> &vchPubKeyIn) : vchPubKey(vchPubKeyIn) { }$/;"	f	class:CPubKey
CPubKey	key.h	/^class CPubKey $/;"	c
CRequestTracker	net.h	/^    explicit CRequestTracker(void (*fnIn)(void*, CDataStream&)=NULL, void* param1In=NULL)$/;"	f	class:CRequestTracker
CRequestTracker	net.h	/^class CRequestTracker$/;"	c
CScript	script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const CBigNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const CScriptNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(const uint256& b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(int b)            { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(int64 b)          { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(long b)           { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(short b)          { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(signed char b)    { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(uint64 b)         { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned char b)  { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned int b)   { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned long b)  { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^    explicit CScript(unsigned short b) { operator<<(b); }$/;"	f	class:CScript
CScript	script.h	/^class CScript : public std::vector<unsigned char>$/;"	c
CScriptID	key.h	/^    CScriptID() : uint160(0) { }$/;"	f	class:CScriptID
CScriptID	key.h	/^    CScriptID(const uint160 &in) : uint160(in) { }$/;"	f	class:CScriptID
CScriptID	key.h	/^class CScriptID : public uint160$/;"	c
CScriptID	script.cpp	/^CScriptID::CScriptID(const CScript& in) : uint160(Hash160(cbuff(in.begin(), in.end()))) {}$/;"	f	class:CScriptID
CScriptNum	script.h	/^    explicit CScriptNum(const int64_t& n)$/;"	f	class:CScriptNum
CScriptNum	script.h	/^    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum
CScriptNum	script.h	/^class CScriptNum$/;"	c
CScriptVisitor	script.cpp	/^    CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:CScriptVisitor
CScriptVisitor	script.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	file:
CScriptWitness	block.h	/^    CScriptWitness() { }$/;"	f	struct:CScriptWitness
CScriptWitness	block.h	/^struct CScriptWitness$/;"	s
CSecret	key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;$/;"	t
CSignature	txsignature.h	/^		CSignature(int ifaceIndexIn, CTransaction *txIn, unsigned int nIn, int nHashTypeIn=SIGHASH_ALL)$/;"	f	class:CSignature
CSignature	txsignature.h	/^class CSignature$/;"	c
CTransaction	block.h	/^		CTransaction(const CAltTx& tx)$/;"	f	class:CTransaction
CTransaction	block.h	/^    CTransaction()$/;"	f	class:CTransaction
CTransaction	block.h	/^    CTransaction(const CTransaction& tx)$/;"	f	class:CTransaction
CTransaction	block.h	/^class CTransaction : public CTransactionCore$/;"	c
CTransactionCore	block.h	/^    CTransactionCore()$/;"	f	class:CTransactionCore
CTransactionCore	block.h	/^class CTransactionCore$/;"	c
CTxBatchCreator	txcreator.h	/^    CTxBatchCreator(CWallet *wallet, string strAccountIn, CScript scriptPubIn, int64 nValue) : CTxCreator(wallet, strAccountIn)$/;"	f	class:CTxBatchCreator
CTxBatchCreator	txcreator.h	/^class CTxBatchCreator : public CTxCreator$/;"	c
CTxCreator	txcreator.h	/^    CTxCreator(CWallet *wallet)$/;"	f	class:CTxCreator
CTxCreator	txcreator.h	/^    CTxCreator(CWallet *wallet, string strAccountIn) : CWalletTx(wallet)$/;"	f	class:CTxCreator
CTxCreator	txcreator.h	/^    CTxCreator(CWallet* wallet, const CTransaction& txIn) : CWalletTx(wallet, txIn)$/;"	f	class:CTxCreator
CTxCreator	txcreator.h	/^class CTxCreator : public CWalletTx$/;"	c
CTxDB	txidx.h	/^    CTxDB(const char *fname, int index, const char* pszMode="r+") : CDB(fname, pszMode) { ifaceIndex = index; }$/;"	f	class:CTxDB
CTxDB	txidx.h	/^class CTxDB : public CDB$/;"	c
CTxDestination	script.h	/^typedef boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV14ScriptHash, WitnessV14KeyHash, WitnessUnknown> CTxDestination;$/;"	t
CTxIn	block.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	block.h	/^    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=SEQUENCE_FINAL)$/;"	f	class:CTxIn
CTxIn	block.h	/^    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=SEQUENCE_FINAL)$/;"	f	class:CTxIn
CTxIn	block.h	/^class CTxIn$/;"	c
CTxInWitness	block.h	/^    CTxInWitness() { }$/;"	f	class:CTxInWitness
CTxInWitness	block.h	/^class CTxInWitness$/;"	c
CTxIndex	block.h	/^    CTxIndex()$/;"	f	class:CTxIndex
CTxIndex	block.h	/^    CTxIndex(const CDiskTxPos& posIn, unsigned int nOutputs)$/;"	f	class:CTxIndex
CTxIndex	block.h	/^class CTxIndex$/;"	c
CTxMatrix	matrix.h	/^		CTxMatrix()$/;"	f	class:CTxMatrix
CTxMatrix	matrix.h	/^		CTxMatrix(const CTxMatrix& matrix)$/;"	f	class:CTxMatrix
CTxMatrix	matrix.h	/^class CTxMatrix$/;"	c
CTxMemPool	txmempool.h	/^class CTxMemPool$/;"	c
CTxOut	block.h	/^		CTxOut()$/;"	f	class:CTxOut
CTxOut	block.h	/^		CTxOut(int64 nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	block.h	/^class CTxOut$/;"	c
CTxWitness	block.h	/^class CTxWitness$/;"	c
CValidateState	net.h	/^class CValidateState$/;"	c
CWallet	wallet.h	/^		CWallet(int index)$/;"	f	class:CWallet
CWallet	wallet.h	/^		CWallet(int index, std::string strWalletFileIn)$/;"	f	class:CWallet
CWallet	wallet.h	/^class CWallet : public CBasicKeyStore$/;"	c
CWalletDB	walletdb.h	/^    CWalletDB(std::string strFilename, const char* pszMode="r+") : CDB(strFilename.c_str(), pszMode)$/;"	f	class:CWalletDB
CWalletDB	walletdb.h	/^class CWalletDB : public CDB$/;"	c
CWalletKey	wallet.h	/^		CWalletKey(int64 nExpires=0)$/;"	f	class:CWalletKey
CWalletKey	wallet.h	/^class CWalletKey$/;"	c
CWalletTx	wallet.h	/^		CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^		CWalletTx(CWallet *pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^		CWalletTx(CWallet *pwalletIn, const CTransaction& txIn, mapval_t mapValue) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^		CWalletTx(CWallet* pwalletIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^		CWalletTx(CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CalcHash	bloom.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcTreeWidth	bloom.h	/^    unsigned int CalcTreeWidth(int height) {$/;"	f	class:CPartialMerkleTree
CalculateDependencyMetric	txmempool.cpp	/^void CPool::CalculateDependencyMetric(CPoolTx& ptx)$/;"	f	class:CPool
CalculateFee	txcreator.cpp	/^int64 CTxCreator::CalculateFee()$/;"	f	class:CTxCreator
CalculateFee	txmempool.cpp	/^void CPool::CalculateFee(CPoolTx& ptx)$/;"	f	class:CPool
CalculateFee	wallet.cpp	/^int64 CWallet::CalculateFee(CWalletTx& tx, int64 nMinFee, int confTarget)$/;"	f	class:CWallet
CalculateLimits	txmempool.cpp	/^void CPool::CalculateLimits(CPoolTx& ptx)$/;"	f	class:CPool
CalculateModifiedSize	txmempool.cpp	/^void CPoolTx::CalculateModifiedSize()$/;"	f	class:CPoolTx
CalculateSequenceLocks	block.cpp	/^std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
CanSupportFeature	wallet.h	/^		bool CanSupportFeature(enum WalletFeature wf) { return true; }$/;"	f	class:CWallet
CastToBigNum	script.cpp	/^CBigNum CastToBigNum(const valtype& vch)$/;"	f
CastToBool	script.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
ChainCode	key.h	/^typedef uint256 ChainCode;$/;"	t
ChainOp	chain.h	/^typedef struct ChainOp$/;"	s
ChainOp	chain.h	/^} ChainOp;$/;"	t	typeref:struct:ChainOp
CheckBlock	checkpoints.cpp	/^bool CCheckpoints::CheckBlock(int nHeight, const uint256& hash)$/;"	f	class:CCheckpoints
CheckBlock	validation.cpp	/^bool CheckBlock(CBlock *block)$/;"	f
CheckBlockHeader	validation.cpp	/^bool CheckBlockHeader(CBlockHeader *pblock)$/;"	f
CheckFinal	txmempool.cpp	/^bool CPoolTx::CheckFinal(CIface *iface) const$/;"	f	class:CPoolTx
CheckFinalTx	block.cpp	/^bool CheckFinalTx(CIface *iface, const CTransaction& tx, CBlockIndex *pindexPrev, int flags)$/;"	f
CheckIndex	block.h	/^    bool CheckIndex() const$/;"	f	class:CBlockIndex
CheckSequenceLocks	block.cpp	/^bool CheckSequenceLocks(CIface *iface, const CTransaction &tx, int flags)$/;"	f
CheckSig	txsignature.cpp	/^bool CSignature::CheckSig(cbuff vchSig, cbuff vchPubKey, CScript scriptCode, int sigver)$/;"	f	class:CSignature
CheckTransaction	block.cpp	/^bool CTransaction::CheckTransaction(int ifaceIndex)$/;"	f	class:CTransaction
CheckTransactionInputs	block.cpp	/^bool CBlock::CheckTransactionInputs(int ifaceIndex)$/;"	f	class:CBlock
CheckTransactionInputs	block.cpp	/^bool CTransaction::CheckTransactionInputs(int ifaceIndex)$/;"	f	class:CTransaction
CheckWork	main.cpp	/^bool CheckWork(CBlock* pblock, CWallet& wallet)$/;"	f
CheckpointLSN	txidx.cpp	/^void CDBEnv::CheckpointLSN(std::string strFile)$/;"	f	class:CDBEnv
CleanKey	crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Clear	versionbits.cpp	/^void VersionBitsCache::Clear()$/;"	f	class:VersionBitsCache
ClearBloomFilter	net.h	/^    void ClearBloomFilter()$/;"	f	class:CNode
ClearCurrent	txfeerate.cpp	/^void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)$/;"	f	class:TxConfirmStats
ClearInputs	txmempool.h	/^    void ClearInputs()$/;"	f	class:CPoolTx
ClientConnectInputs	block.cpp	/^bool CTransaction::ClientConnectInputs(int ifaceIndex)$/;"	f	class:CTransaction
Close	txidx.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	txidx.cpp	/^void CDBEnv::Close()$/;"	f	class:CDBEnv
CloseBlockChain	block.cpp	/^void CloseBlockChain(CIface *iface)$/;"	f
CloseBlockChains	block.cpp	/^void CloseBlockChains(void)$/;"	f
CloseDb	txidx.cpp	/^void CDBEnv::CloseDb(const string& strFile)$/;"	f	class:CDBEnv
CombineMultisig	script.cpp	/^static CScript CombineMultisig(int ifaceIndex, CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn, const vector<valtype>& vSolutions, vector<valtype>& sigs1, vector<valtype>& sigs2)$/;"	f	file:
Commit	txmempool.cpp	/^bool CPool::Commit(CBlock& block)$/;"	f	class:CPool
CompareCells	matrix.h	/^		bool CompareCells(const CTxMatrix& b) const$/;"	f	class:CTxMatrix
CompareTo	base58.h	/^		int CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareValueOnly	wallet.cpp	/^struct CompareValueOnly$/;"	s	file:
ComputeMerkleBranch	wit_merkle.cpp	/^std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {$/;"	f
ComputeMerkleRoot	wit_merkle.cpp	/^uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated) {$/;"	f
ComputeMerkleRootFromBranch	wit_merkle.cpp	/^uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {$/;"	f
Condition	versionbits.cpp	/^      bool Condition(const CBlockIndex* pindex, CIface * params) const$/;"	f	class:__anon9::VersionBitsConditionChecker
ConnectInputs	coin.cpp	/^bool CTransaction::ConnectInputs(int ifaceIndex, const CBlockIndex* pindexBlock, tx_map& mapOutput, map<uint256, CTransaction> mapTx, int& nSigOps, int64& nFees, bool fVerifySig, bool fVerifyInputs, bool fRequireInputs)$/;"	f	class:CTransaction
ContainsTx	txidx.cpp	/^bool CTxDB::ContainsTx(uint256 hash)$/;"	f	class:CTxDB
ContextualCheckBlock	validation.cpp	/^bool ContextualCheckBlock(CBlock *pblock, CBlockIndex *pindexPrev)$/;"	f
ContextualCheckBlockHeader	validation.cpp	/^bool ContextualCheckBlockHeader(CIface *iface, const CBlockHeader& block, CBlockIndex *pindexPrev)$/;"	f
ConvertBits	coinaddr.cpp	/^bool ConvertBits(O& out, I it, I end) $/;"	f
CountWitnessSigOps	block.cpp	/^size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)$/;"	f
CreateAlias	block.cpp	/^CAlias *CTransaction::CreateAlias(std::string name, int type)$/;"	f	class:CTransaction
CreateAltChain	block.cpp	/^CAltChain *CTransaction::CreateAltChain()$/;"	f	class:CTransaction
CreateAsset	block.cpp	/^CAsset *CTransaction::CreateAsset(string strAssetName, string strAssetHash)$/;"	f	class:CTransaction
CreateBatchTx	txcreator.cpp	/^bool CTxBatchCreator::CreateBatchTx()$/;"	f	class:CTxBatchCreator
CreateBlockIndex	validation.cpp	/^CBlockIndex *CreateBlockIndex(CIface *iface, CBlockHeader& block)$/;"	f
CreateBlockTemplate	block.cpp	/^CBlock *CreateBlockTemplate(CIface *iface)$/;"	f
CreateCert	block.cpp	/^CCert *CTransaction::CreateCert(int ifaceIndex, string strTitle, CCoinAddr& addr, string hexSeed, int64 nLicenseFee)$/;"	f	class:CTransaction
CreateContext	block.cpp	/^CContext *CTransaction::CreateContext()$/;"	f	class:CTransaction
CreateExec	block.cpp	/^CExec *CTransaction::CreateExec()$/;"	f	class:CTransaction
CreateIdent	block.cpp	/^CIdent *CTransaction::CreateIdent(CIdent *ident)$/;"	f	class:CTransaction
CreateIdent	block.cpp	/^CIdent *CTransaction::CreateIdent(int ifaceIndex, CCoinAddr& addr)$/;"	f	class:CTransaction
CreateLicense	block.cpp	/^CCert *CTransaction::CreateLicense(CCert *cert)$/;"	f	class:CTransaction
CreateMoneyTx	wallet.cpp	/^bool CreateMoneyTx(CIface *iface, CWalletTx& wtxNew, vector<COutput>& vecRecv, vector<CTxOut>& vecSend, CScript scriptPubKey)$/;"	f
CreateNewAddr	account.cpp	/^bool CAccountCache::CreateNewAddr(CTxDestination& addrRet, int type, int flags)$/;"	f	class:CAccountCache
CreateNewPubKey	account.cpp	/^bool CAccountCache::CreateNewPubKey(CPubKey& addrRet, int flags)$/;"	f	class:CAccountCache
CreateOffer	block.cpp	/^COffer *CTransaction::CreateOffer()$/;"	f	class:CTransaction
CreatePidFile	util.cpp	/^void CreatePidFile(const boost::filesystem::path &path, pid_t pid)$/;"	f
CreateSignature	txsignature.cpp	/^bool CSignature::CreateSignature(cbuff& vchSig, const CKeyID& address, const CScript& scriptCode, int sigversion)$/;"	f	class:CSignature
CreateTransactionWithInputTx	wallet.cpp	/^bool CreateTransactionWithInputTx(CIface *iface, string strAccount, const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxIn, int nTxOut, CWalletTx& wtxNew, int64 nTxFee)$/;"	f
CreateValidateNotaryTx	matrix.cpp	/^bool CreateValidateNotaryTx(CIface *iface, const CTransaction& txPrev, int nPrevOut, CTransaction& tx, vector<CPubKey> kSend)$/;"	f
CryptedKeyMap	keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
DBErrors	walletdb.h	/^enum DBErrors$/;"	g
DB_CORRUPT	walletdb.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_LOAD_FAIL	walletdb.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	walletdb.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_NEED_REWRITE	walletdb.h	/^    DB_NEED_REWRITE$/;"	e	enum:DBErrors
DB_TOO_NEW	walletdb.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DEFAULT_DECAY	txfeerate.h	/^static const double DEFAULT_DECAY = .998;$/;"	v
DEFAULT_PARAM_LIFESPAN	block.cpp	49;"	d	file:
DIExtKey	dikey.h	/^struct DIExtKey$/;"	s
DIExtPubKey	dikey.h	/^struct DIExtPubKey $/;"	s
DIKey	dikey.h	/^    DIKey()$/;"	f	class:DIKey
DIKey	dikey.h	/^    DIKey(CSecret secret)$/;"	f	class:DIKey
DIKey	dikey.h	/^    DIKey(const DIKey& b)$/;"	f	class:DIKey
DIKey	dikey.h	/^class DIKey : public CKey$/;"	c
DIKeyMap	keystore.h	/^typedef std::map<CKeyID, DIKey> DIKeyMap;$/;"	t
DILITHIUM_PRIVATE_KEY_SIZE	dikey.h	/^		static const unsigned int DILITHIUM_PRIVATE_KEY_SIZE = 3504;$/;"	m	class:DIKey
DILITHIUM_PUBLIC_KEY_SIZE	dikey.h	/^		static const unsigned int DILITHIUM_PUBLIC_KEY_SIZE = 1472; $/;"	m	class:DIKey
DILITHIUM_SECRET_SIZE	dikey.h	/^		static const unsigned int DILITHIUM_SECRET_SIZE = 96; $/;"	m	class:DIKey
DILITHIUM_SIGNATURE_SIZE	dikey.h	/^		static const unsigned int DILITHIUM_SIGNATURE_SIZE = 2701;$/;"	m	class:DIKey
DILITHIUM_VERSION	dikey.h	52;"	d
Debug	util.cpp	/^int Debug(const char* pszFormat, ...)$/;"	f
Decode	eckey.cpp	/^void ECExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE])$/;"	f	class:ECExtKey
Decode	eckey.cpp	/^void ECExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE])$/;"	f	class:ECExtPubKey
DecodeBase32	util.cpp	/^string DecodeBase32(const string& str)$/;"	f
DecodeBase32	util.cpp	/^vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58	base58.h	/^inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.h	/^inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	base58.h	/^inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	util.cpp	/^string DecodeBase64(const string& str)$/;"	f
DecodeBase64	util.cpp	/^vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeMatrixHash	wallet.cpp	/^bool DecodeMatrixHash(const CScript& script, int& mode, uint160& hash)$/;"	f
DecodeMnemonic	mnemonic.cpp	/^const string DecodeMnemonic(const string_list& words)$/;"	f
DecodeMnemonicSecret	mnemonic.cpp	/^bool DecodeMnemonicSecret(int ifaceIndex, const string phrase, CCoinSecret& addr)$/;"	f
DecodeOP_N	script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
Decrypt	crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)$/;"	f	class:CCrypter
DecryptSecret	crypter.cpp	/^bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)$/;"	f
DelAddressBookName	wallet.cpp	/^bool CWallet::DelAddressBookName(const CTxDestination& address)$/;"	f	class:CWallet
Derive	dikey.cpp	/^bool DIExtKey::Derive(DIExtKey &out, unsigned int _nChild) const $/;"	f	class:DIExtKey
Derive	dikey.cpp	/^bool DIExtPubKey::Derive(DIExtPubKey& outPubKey, unsigned int nChild) const$/;"	f	class:DIExtPubKey
Derive	dikey.cpp	/^bool DIKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const $/;"	f	class:DIKey
Derive	eckey.cpp	/^bool ECExtKey::Derive(ECExtKey &out, unsigned int _nChild) const $/;"	f	class:ECExtKey
Derive	eckey.cpp	/^bool ECExtPubKey::Derive(ECExtPubKey& outPubKey, unsigned int nChild) const$/;"	f	class:ECExtPubKey
Derive	eckey.cpp	/^bool ECKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const $/;"	f	class:ECKey
DeriveCert	block.cpp	/^CCert *CTransaction::DeriveCert(int ifaceIndex, string strTitle, CCoinAddr& addr, CCert *chain, string hexSeed, int64 nLicenseFee)$/;"	f	class:CTransaction
DeriveNewDIKey	wallet.cpp	/^bool CWallet::DeriveNewDIKey(CAccount *hdChain, DIKey& secret, bool internal)$/;"	f	class:CWallet
DeriveNewECKey	wallet.cpp	/^bool CWallet::DeriveNewECKey(CAccount *hdChain, ECKey& secret, bool internal)$/;"	f	class:CWallet
DisconnectInputs	coin.cpp	/^bool CTransaction::DisconnectInputs(int ifaceIndex)$/;"	f	class:CTransaction
ECExtKey	eckey.h	/^struct ECExtKey$/;"	s
ECExtPubKey	eckey.h	/^struct ECExtPubKey $/;"	s
ECKey	eckey.h	/^    ECKey()$/;"	f	class:ECKey
ECKey	eckey.h	/^    ECKey(CSecret secret, bool fCompressed = true)$/;"	f	class:ECKey
ECKey	eckey.h	/^    ECKey(const ECKey& b)$/;"	f	class:ECKey
ECKey	eckey.h	/^class ECKey : public CKey$/;"	c
ECKeyMap	keystore.h	/^typedef std::map<CKeyID, ECKey> ECKeyMap;$/;"	t
EMC2CoinAddr	coinaddr.h	/^    EMC2CoinAddr() : CCoinAddr(EMC2_COIN_IFACE)$/;"	f	class:EMC2CoinAddr
EMC2CoinAddr	coinaddr.h	/^    EMC2CoinAddr(const CTxDestination &dest) : CCoinAddr(EMC2_COIN_IFACE)$/;"	f	class:EMC2CoinAddr
EMC2CoinAddr	coinaddr.h	/^    EMC2CoinAddr(const std::string& strAddress) : CCoinAddr(EMC2_COIN_IFACE)$/;"	f	class:EMC2CoinAddr
EMC2CoinAddr	coinaddr.h	/^class EMC2CoinAddr : public CCoinAddr$/;"	c
Encode	eckey.cpp	/^void ECExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const $/;"	f	class:ECExtKey
Encode	eckey.cpp	/^void ECExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const $/;"	f	class:ECExtPubKey
EncodeBase32	util.cpp	/^string EncodeBase32(const string& str)$/;"	f
EncodeBase32	util.cpp	/^string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58	base58.h	/^inline std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58Check	base58.h	/^inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	util.cpp	/^string EncodeBase64(const string& str)$/;"	f
EncodeBase64	util.cpp	/^string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeMnemonic	mnemonic.cpp	/^string_list EncodeMnemonic(string& seed)$/;"	f
EncodeMnemonicSecret	mnemonic.cpp	/^const string EncodeMnemonicSecret(CCoinSecret& secret)$/;"	f
EncodeOP_N	script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
Encrypt	crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)$/;"	f	class:CCrypter
EncryptSecret	crypter.cpp	/^bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f
EndMessage	net.h	/^    void EndMessage()$/;"	f	class:CNode
EndMessageAbortIfEmpty	net.h	/^    void EndMessageAbortIfEmpty()$/;"	f	class:CNode
EndTime	versionbits.cpp	/^      int64_t EndTime(CIface * params) const { return params->vDeployments[id].nTimeout; }$/;"	f	class:__anon9::VersionBitsConditionChecker
EnvShutdown	txidx.cpp	/^void CDBEnv::EnvShutdown()$/;"	f	class:CDBEnv
Erase	txidx.h	/^      bool Erase(const K& key)$/;"	f	class:CDB
EraseArchTx	wallettx.cpp	/^bool CWallet::EraseArchTx(uint256 hash) const$/;"	f	class:CWallet
EraseCoins	coin.cpp	/^bool CTransaction::EraseCoins(int ifaceIndex)$/;"	f	class:CTransaction
EraseFromWallet	wallet.cpp	/^bool CWallet::EraseFromWallet(uint256 hash)$/;"	f	class:CWallet
EraseName	walletdb.cpp	/^bool CWalletDB::EraseName(const string& strAddress)$/;"	f	class:CWalletDB
EraseSetting	walletdb.h	/^    bool EraseSetting(const std::string& strKey)$/;"	f	class:CWalletDB
EraseTx	block.cpp	/^bool CTransaction::EraseTx(int ifaceIndex)$/;"	f	class:CTransaction
EraseTx	walletdb.h	/^    bool EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseTxCoins	coin.cpp	/^bool EraseTxCoins(CIface *iface, uint256 hash)$/;"	f
EraseTxIndex	txidx.cpp	/^bool CTxDB::EraseTxIndex(const CTransaction& tx)$/;"	f	class:CTxDB
EraseWalletTx	wallettx.cpp	/^void CWallet::EraseWalletTx(const uint256& hash) const$/;"	f	class:CWallet
EstimateMedianVal	txfeerate.cpp	/^double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,$/;"	f	class:TxConfirmStats
EvalAltProofScript	script.cpp	/^bool EvalAltProofScript(uint160 hCoin, uint256 hTx)$/;"	f
EvalScript	script.cpp	/^bool EvalScript(CSignature& sig, cstack_t& stack, const CScript& script, unsigned int sigver, int flags)$/;"	f
EvaluateSequenceLocks	block.cpp	/^bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)$/;"	f
Exists	txidx.h	/^      bool Exists(const K& key)$/;"	f	class:CDB
ExitTimeout	init.cpp	/^void ExitTimeout(void* parg)$/;"	f
ExtractDestination	coinaddr.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinationKey	wallet.cpp	/^bool ExtractDestinationKey(CWallet *wallet, const CTxDestination& dest, CKeyID& keyid)$/;"	f
ExtractDestinations	coinaddr.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
ExtractMatches	bloom.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch)$/;"	f	class:CPartialMerkleTree
ExtractValidateCoinbaseDestination	matrix.cpp	/^static bool ExtractValidateCoinbaseDestination(CWallet *wallet, const CTransaction& tx, CPubKey& pubkey)$/;"	f	file:
FEATURE_BASE	wallet.h	/^	FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	wallet.h	/^	FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_LATEST	wallet.h	/^	FEATURE_LATEST = 60000$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	wallet.h	/^	FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FEE_SPACING	txfeerate.h	/^static const double FEE_SPACING = 1.1;$/;"	v
FeeFilterRounder	txfeerate.cpp	/^FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)$/;"	f	class:FeeFilterRounder
FeeFilterRounder	txfeerate.h	/^class FeeFilterRounder$/;"	c
FetchInputs	txmempool.h	/^    bool FetchInputs(uint256 hash, tx_cache& cacheRet)$/;"	f	class:CPool
FileCommit	util.cpp	/^void FileCommit(FILE *fileout)$/;"	f
FillBlock	block_cmpct.cpp	/^ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {$/;"	f	class:PartiallyDownloadedBlock
FillInputs	txmempool.cpp	/^bool CPool::FillInputs(CPoolTx& ptx)$/;"	f	class:CPool
FillInputs	wallet.cpp	/^bool CWallet::FillInputs(const CTransaction& tx, tx_cache& inputs, bool fAllowSpent)$/;"	f	class:CWallet
FillShortTxIDSelector	block_cmpct.cpp	/^void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {$/;"	f	class:CBlockHeaderAndShortTxIDs
Find	script.h	/^    int Find(opcodetype op) const$/;"	f	class:CScript
FindAndDelete	script.h	/^    int FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindNextBlocksToDownload	chain.cpp	/^static bool FindNextBlocksToDownload(CIface *iface, CNode *pfrom, unsigned int count, vector<CBlockIndex*>& vBlocks)$/;"	f	file:
Flush	txidx.cpp	/^void CDBEnv::Flush(bool fShutdown)$/;"	f	class:CDBEnv
FormatException	util.cpp	/^static std::string FormatException(std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	util.cpp	/^string FormatFullVersion()$/;"	f
FormatHashBlocks	main.cpp	/^int FormatHashBlocks(void* pbuffer, unsigned int len)$/;"	f
FormatHashBuffers	main.cpp	/^void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)$/;"	f
FormatMoney	coin.cpp	/^string FormatMoney(CAmount n)$/;"	f
FormatSubVersion	util.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatVersion	util.cpp	/^string FormatVersion(int nVersion)$/;"	f
FreeBlockTable	block.cpp	/^void FreeBlockTable(CIface *iface)$/;"	f
GIT_ARCHIVE	version.cpp	66;"	d	file:
GIT_COMMIT_DATE	version.cpp	69;"	d	file:
GIT_COMMIT_ID	version.cpp	68;"	d	file:
GL_BESTCHAIN	global.cpp	34;"	d	file:
GL_VERSION	global.cpp	33;"	d	file:
GMF_BLOCK	block.h	/^    GMF_BLOCK,$/;"	e	enum:GetMinFee_mode
GMF_RELAY	block.h	/^    GMF_RELAY,$/;"	e	enum:GetMinFee_mode
GMF_SEND	block.h	/^    GMF_SEND,$/;"	e	enum:GetMinFee_mode
GNULIB_NAMESPACE	main.h	29;"	d
Generate	txcreator.cpp	/^bool CTxBatchCreator::Generate()$/;"	f	class:CTxBatchCreator
Generate	txcreator.cpp	/^bool CTxCreator::Generate()$/;"	f	class:CTxCreator
GenerateExec	block.cpp	/^CExecCall *CTransaction::GenerateExec(const CExec& execIn)$/;"	f	class:CTransaction
GenerateNewDIKey	wallet.cpp	/^bool CWallet::GenerateNewDIKey(CPubKey& pubkeyRet, int nFlag)$/;"	f	class:CWallet
GenerateNewECKey	wallet.cpp	/^bool CWallet::GenerateNewECKey(CPubKey& pubkeyRet, bool fCompressed, int nFlag)$/;"	f	class:CWallet
GenerateNewECKey	wallet.h	/^		CPubKey GenerateNewECKey(bool fCompressed = true, int nFlag = 0)$/;"	f	class:CWallet
GenerateOffer	block.cpp	/^COffer *CTransaction::GenerateOffer(COffer *offerIn)$/;"	f	class:CTransaction
GenerateSpringMatrix	matrix.cpp	/^CTxMatrix *CTransaction::GenerateSpringMatrix(int ifaceIndex, CIdent& ident)$/;"	f	class:CTransaction
GenerateValidateMatrix	block.cpp	/^CTxMatrix *CTransaction::GenerateValidateMatrix(int ifaceIndex, CBlockIndex *pindex)$/;"	f	class:CTransaction
GenerateValidateScript	matrix.cpp	/^CScriptID GenerateValidateScript(CWallet *wallet, bool& fConsensus, CScript& script, vector<CPubKey> kSend)$/;"	f
Get	coinaddr.cpp	/^CTxDestination CCoinAddr::Get() const $/;"	f	class:CCoinAddr
Get	shlib.h	/^    shpeer_t *Get()$/;"	f	class:SHPeer
GetAccount	wallet.cpp	/^CAccountCache *CWallet::GetAccount(string strAccount)$/;"	f	class:CWallet
GetAccountAddress	wallet.cpp	/^CCoinAddr GetAccountAddress(CWallet *wallet, string strAccount)$/;"	f
GetAccountBalance	wallet.cpp	/^int64 GetAccountBalance(int ifaceIndex, const string& strAccount, int nMinDepth)$/;"	f
GetAccountCreditDebit	walletdb.cpp	/^int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)$/;"	f	class:CWalletDB
GetActiveColorTx	txmempool.cpp	/^vector<CTransaction> CPool::GetActiveColorTx(const uint160& hColor)$/;"	f	class:CPool
GetActiveHash	txmempool.cpp	/^vector<uint256> CPool::GetActiveHash()$/;"	f	class:CPool
GetActiveTotal	txmempool.cpp	/^int CPool::GetActiveTotal()$/;"	f	class:CPool
GetActiveTx	txmempool.cpp	/^vector<CTransaction> CPool::GetActiveTx()$/;"	f	class:CPool
GetActiveWeight	txmempool.h	/^    int64 GetActiveWeight()$/;"	f	class:CPool
GetAddr	account.cpp	/^CCoinAddr CAccountCache::GetAddr(int type)$/;"	f	class:CAccountCache
GetAddrDestination	account.cpp	/^void GetAddrDestination(int ifaceIndex, const CKeyID& keyid, vector<CTxDestination>& vDest, int nFlag)$/;"	f
GetAddrDestination	account.h	/^		void GetAddrDestination(const CKeyID& keyid, vector<CTxDestination>& vDest, int nFlag = 0)$/;"	f	class:CAccountCache
GetAdjustedTime	util.cpp	/^int64 GetAdjustedTime()$/;"	f
GetAlgoBits	algobits.cpp	/^int32_t GetAlgoBits(int alg)$/;"	f
GetAlgoName	algobits.cpp	/^const char *GetAlgoName(int alg)$/;"	f
GetAlgoNameStr	algobits.cpp	/^string GetAlgoNameStr(int alg)$/;"	f
GetAlgoWorkFactor	algobits.cpp	/^uint32_t GetAlgoWorkFactor(int alg)$/;"	f
GetAlias	block.h	/^    CAlias *GetAlias()$/;"	f	class:CTransaction
GetAltBlockHeader	block.h	/^		CAltBlock GetAltBlockHeader() const$/;"	f	class:CBlock
GetAltChain	block.h	/^		CAltChain *GetAltChain() const$/;"	f	class:CTransaction
GetAmounts	wallet.cpp	/^void CWalletTx::GetAmounts(int ifaceIndex, int64& nGeneratedImmature, int64& nGeneratedMature) const$/;"	f	class:CWalletTx
GetAmounts	wallet.cpp	/^void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived, list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const$/;"	f	class:CWalletTx
GetAncestor	block.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	block.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetArchBlockByHash	block.cpp	/^CBlock *GetArchBlockByHash(CIface *iface, const uint256 hash)$/;"	f
GetArg	util.cpp	/^int64 GetArg(const std::string& strArg, int64 nDefault)$/;"	f
GetArg	util.cpp	/^std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetAsset	block.h	/^		CAsset *GetAsset()$/;"	f	class:CTransaction
GetAvailableCredit	wallet.h	/^			 int64 GetAvailableCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetBalance	wallet.cpp	/^int64 CWallet::GetBalance() const$/;"	f	class:CWallet
GetBestBlockChain	block.cpp	/^uint256 GetBestBlockChain(CIface *iface)$/;"	f
GetBestBlockIndex	block.cpp	/^CBlockIndex *GetBestBlockIndex(CIface *iface)$/;"	f
GetBestBlockIndex	block.cpp	/^CBlockIndex *GetBestBlockIndex(int ifaceIndex)$/;"	f
GetBestHeight	block.cpp	/^int GetBestHeight(CIface *iface)$/;"	f
GetBestHeight	block.cpp	/^int GetBestHeight(int ifaceIndex)$/;"	f
GetBlankBlock	block.cpp	/^CBlock *GetBlankBlock(CIface *iface)$/;"	f
GetBlockBitsDifficulty	algobits.cpp	/^double GetBlockBitsDifficulty(unsigned int nBits, unsigned int nVersion)$/;"	f
GetBlockByHash	block.cpp	/^CBlock *GetBlockByHash(CIface *iface, const uint256 hash)$/;"	f
GetBlockByHeight	block.cpp	/^CBlock *GetBlockByHeight(CIface *iface, int nHeight)$/;"	f
GetBlockByTx	block.cpp	/^CBlock *GetBlockByTx(CIface *iface, const uint256 hash)$/;"	f
GetBlockHash	block.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	block.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlock
GetBlockHeader	block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockIndexByHash	block.cpp	/^CBlockIndex *GetBlockIndexByHash(int ifaceIndex, const uint256 hash)$/;"	f
GetBlockIndexByHeight	block.cpp	/^CBlockIndex *GetBlockIndexByHeight(int ifaceIndex, unsigned int nHeight)$/;"	f
GetBlockIndexByTx	block.cpp	/^CBlockIndex *GetBlockIndexByTx(CIface *iface, const uint256 hash)$/;"	f
GetBlockScriptFlags	block.cpp	/^unsigned int GetBlockScriptFlags(CIface *iface, const CBlockIndex* pindex)$/;"	f
GetBlockTable	block.cpp	/^blkidx_t *GetBlockTable(int ifaceIndex)$/;"	f
GetBlockTime	block.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockHeader
GetBlockTime	block.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockWork	block.cpp	/^CBigNum CBlockIndex::GetBlockWork(bool fUseAlgo) const$/;"	f	class:CBlockIndex
GetBlocksToMaturity	wallet.cpp	/^int CMerkleTx::GetBlocksToMaturity(int ifaceIndex) const$/;"	f	class:CMerkleTx
GetBloomFilter	net.h	/^    CBloomFilter *GetBloomFilter()$/;"	f	class:CNode
GetBoolArg	util.cpp	/^bool GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f
GetCScript	keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCell	matrix.h	/^		unsigned int GetCell(int row, int col)$/;"	f	class:CTxMatrix
GetCertHash	account.cpp	/^uint160 CAccountCache::GetCertHash() const$/;"	f	class:CAccountCache
GetCertificate	block.h	/^    CCert *GetCertificate()$/;"	f	class:CTransaction
GetChain	hdkey.cpp	/^cbuff HDPrivKey::GetChain() const$/;"	f	class:HDPrivKey
GetChain	hdkey.h	/^    cbuff GetChain() const$/;"	f	class:HDMasterPrivKey
GetChainHex	hdkey.cpp	/^string HDPrivKey::GetChainHex()$/;"	f	class:HDPrivKey
GetChange	wallet.h	/^			 int64 GetChange() const$/;"	f	class:CWalletTx
GetChange	wallet.h	/^		int64 GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	wallet.h	/^		int64 GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetChangeAddr	txcreator.cpp	/^CCoinAddr CTxCreator::GetChangeAddr()$/;"	f	class:CTxCreator
GetChangeAddr	wallet.cpp	/^CCoinAddr CWallet::GetChangeAddr(string strAccount)$/;"	f	class:CWallet
GetClientName	version.cpp	/^std::string GetClientName(CIface *iface)$/;"	f
GetCoinAddr	wallet.cpp	/^bool GetCoinAddr(CWallet *wallet, CCoinAddr& addrAccount, string& strAccount)$/;"	f
GetCoinAddr	wallet.cpp	/^bool GetCoinAddr(CWallet *wallet, string strAddress, CCoinAddr& addrAccount)$/;"	f
GetCoinAddrAlias	wallet.cpp	/^bool GetCoinAddrAlias(CWallet *wallet, string strAlias, CCoinAddr& addrAccount)$/;"	f
GetCoinByHash	coin.cpp	/^CIface *GetCoinByHash(uint160 hash)$/;"	f
GetCoinHash	coin.cpp	/^uint160 GetCoinHash(string name)$/;"	f
GetCoinbaseFlags	block.cpp	/^CScript GetCoinbaseFlags(int ifaceIndex)$/;"	f
GetColor	txmempool.h	/^		uint160 GetColor()$/;"	f	class:CPoolTx
GetColor	wallet.h	/^			 uint160 GetColor() const$/;"	f	class:CWalletTx
GetCommand	protocol.cpp	/^std::string CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetCommitBranches	block.cpp	/^static bool GetCommitBranches(CBlockIndex *pbest, CBlockIndex *tip, CBlockIndex *pindexNew, vector<CBlockIndex*>& vConnect, vector<CBlockIndex*>& vDisconnect)$/;"	f	file:
GetConfigFile	util.cpp	/^boost::filesystem::path GetConfigFile()$/;"	f
GetContext	block.h	/^    CContext *GetContext()$/;"	f	class:CTransaction
GetCredit	wallet.h	/^			 int64 GetCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetCredit	wallet.h	/^		int64 GetCredit(const CTransaction& tx)$/;"	f	class:CWallet
GetCredit	wallet.h	/^		int64 GetCredit(const CTxOut& txout)$/;"	f	class:CWallet
GetCursor	txidx.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDIKey	keystore.cpp	/^bool CBasicKeyStore::GetDIKey(const CKeyID &address, DIKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetDataDir	util.cpp	/^const boost::filesystem::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDebit	wallet.cpp	/^int64 CWallet::GetDebit(const CTxIn &txin)$/;"	f	class:CWallet
GetDebit	wallet.h	/^			 int64 GetDebit() const$/;"	f	class:CWalletTx
GetDebit	wallet.h	/^		int64 GetDebit(const CTransaction& tx)$/;"	f	class:CWallet
GetDefaultAddr	account.cpp	/^CCoinAddr CAccountCache::GetDefaultAddr()$/;"	f	class:CAccountCache
GetDefaultDataDir	util.cpp	/^boost::filesystem::path GetDefaultDataDir()$/;"	f
GetDepthInMainChain	block.cpp	/^int CTransaction::GetDepthInMainChain(int ifaceIndex, CBlockIndex* &pindexRet) const$/;"	f	class:CTransaction
GetDepthInMainChain	block.h	/^    int GetDepthInMainChain(int ifaceIndex) const { CBlockIndex *pindexRet; return GetDepthInMainChain(ifaceIndex, pindexRet); }$/;"	f	class:CTransaction
GetDepthInMainChain	main.h	/^    int GetDepthInMainChain(int ifaceIndex) const {$/;"	f	class:CMerkleTx
GetDepthInMainChain	wallet.cpp	/^int CMerkleTx::GetDepthInMainChain(int ifaceIndex, CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDetach	txidx.h	/^    bool GetDetach() { return fDetachDB; }$/;"	f	class:CDBEnv
GetDifficulty	chain.cpp	/^double GetDifficulty(unsigned int nBits, unsigned int nVersion)$/;"	f
GetECKey	keystore.cpp	/^bool CBasicKeyStore::GetECKey(const CKeyID &address, ECKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetError	txcreator.h	/^    string GetError()$/;"	f	class:CTxCreator
GetExec	block.h	/^		CExec *GetExec() const$/;"	f	class:CTransaction
GetExecAddr	wallet.cpp	/^CCoinAddr CWallet::GetExecAddr(string strAccount)$/;"	f	class:CWallet
GetExecCall	block.h	/^		CExecCall *GetExecCall() const$/;"	f	class:CTransaction
GetExecCheckpoint	block.h	/^		CExecCheckpoint *GetExecCheckpoint() const$/;"	f	class:CTransaction
GetExtAddr	wallet.cpp	/^CCoinAddr CWallet::GetExtAddr(string strAccount)$/;"	f	class:CWallet
GetFee	txfeerate.cpp	/^CAmount CFeeRate::GetFee(size_t nBytes_) const$/;"	f	class:CFeeRate
GetFee	txmempool.cpp	/^bool CPool::GetFee(uint256 hash, int64& nFee)$/;"	f	class:CPool
GetFee	txmempool.h	/^    int64 GetFee()$/;"	f	class:CPoolTx
GetFeeEstimator	txfeerate.cpp	/^CBlockPolicyEstimator *GetFeeEstimator(CIface *iface)$/;"	f
GetFeeEstimator	txfeerate.cpp	/^CBlockPolicyEstimator *GetFeeEstimator(int ifaceIndex)$/;"	f
GetFeePerK	txfeerate.h	/^    CAmount GetFeePerK() const { return GetFee(1000); }$/;"	f	class:CFeeRate
GetFeePriority	txmempool.h	/^    double GetFeePriority()$/;"	f	class:CPoolTx
GetFilesize	util.cpp	/^int GetFilesize(FILE* file)$/;"	f
GetFlagString	key.h	/^		const string GetFlagString() const$/;"	f	class:CKeyMetadata
GetFlags	block.h	/^		unsigned int GetFlags() const$/;"	f	class:CTransactionCore
GetFlags	net.h	/^    int GetFlags()$/;"	f	class:CBloomFilter
GetGenesisBlockHash	block.cpp	/^uint256 GetGenesisBlockHash(int ifaceIndex)$/;"	f
GetGenesisBlockIndex	block.cpp	/^CBlockIndex *GetGenesisBlockIndex(CIface *iface)$/;"	f
GetHash	block.h	/^		uint256 GetHash() const$/;"	f	class:CTxOut
GetHash	block.h	/^    uint256 GetHash() const$/;"	f	class:CBlockHeader
GetHash	block.h	/^    uint256 GetHash() const$/;"	f	class:CTransaction
GetHash	key.h	/^		uint256 GetHash() const {$/;"	f	class:CPubKey
GetHash	matrix.h	/^		const uint160 GetHash()$/;"	f	class:CTxMatrix
GetHash	txmempool.h	/^    const uint256& GetHash() const$/;"	f	class:CPoolTx
GetHeight	matrix.h	/^		unsigned int GetHeight()$/;"	f	class:CTxMatrix
GetHeight	txmempool.h	/^    unsigned int GetHeight()$/;"	f	class:CPoolTx
GetHex	hdkey.cpp	/^string HDPrivKey::GetHex()$/;"	f	class:HDPrivKey
GetID	key.h	/^			CKeyID GetID() const {$/;"	f	class:CPubKey
GetID	script.h	/^    CScriptID GetID() const$/;"	f	class:CScript
GetIface	txmempool.h	/^    CIface *GetIface()$/;"	f	class:CPool
GetIface	txsignature.h	/^		CIface *GetIface()$/;"	f	class:CSignature
GetImmatureBalance	wallet.cpp	/^int64 CWallet::GetImmatureBalance()$/;"	f	class:CWallet
GetInitialBlockValue	block.cpp	/^int64 GetInitialBlockValue(int nHeight, int64 nFees)$/;"	f
GetInputs	txmempool.h	/^    tx_cache& GetInputs()$/;"	f	class:CPoolTx
GetKey	keystore.cpp	/^CKey *CBasicKeyStore::GetKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
GetKey	shlib.h	/^    shkey_t *GetKey()$/;"	f	class:SHPeer
GetKeyID	coinaddr.cpp	/^bool CCoinAddr::GetKeyID(CKeyID &keyID) const$/;"	f	class:CCoinAddr
GetKeyMetadata	keystore.cpp	/^CKeyMetadata *CBasicKeyStore::GetKeyMetadata(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
GetKeys	keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CBasicKeyStore
GetLastBlockIndexForAlgo	block.cpp	/^const CBlockIndex* GetLastBlockIndexForAlgo(const CBlockIndex* pindex, int algo)$/;"	f
GetLastCheckpoint	checkpoints.cpp	/^CBlockIndex* CCheckpoints::GetLastCheckpoint()$/;"	f	class:CCheckpoints
GetLegacySigOpCount	main.cpp	/^CTransaction::GetLegacySigOpCount() const$/;"	f	class:CTransaction
GetLocator	wallet.cpp	/^CBlockLocator CWallet::GetLocator(CBlockIndex *pindex)$/;"	f	class:CWallet
GetLocatorIndex	wallet.cpp	/^CBlockIndex *CWallet::GetLocatorIndex(const CBlockLocator& loc)$/;"	f	class:CWallet
GetMasterPubKey	hdkey.cpp	/^HDPubKey HDPrivKey::GetMasterPubKey() const$/;"	f	class:HDPrivKey
GetMatrix	block.h	/^    CTxMatrix *GetMatrix()$/;"	f	class:CTransaction
GetMatrixOrigin	matrix.cpp	/^shgeo_t *GetMatrixOrigin(CTransaction& tx)$/;"	f
GetMaxConfirms	txfeerate.h	/^    unsigned int GetMaxConfirms() { return confAvg.size(); }$/;"	f	class:TxConfirmStats
GetMaxQueueMem	txmempool.h	/^    size_t GetMaxQueueMem()$/;"	f	class:CPool
GetMaxSigOpCost	txmempool.cpp	/^int64_t CPool::GetMaxSigOpCost()$/;"	f	class:CPool
GetMaxWeight	txmempool.cpp	/^int64_t CPool::GetMaxWeight()$/;"	f	class:CPool
GetMedianTime	block.h	/^    int64 GetMedianTime() const$/;"	f	class:CBlockIndex
GetMedianTimePast	block.h	/^    int64 GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMergedAddr	account.cpp	/^bool CAccountCache::GetMergedAddr(cbuff tag, CCoinAddr& addr)$/;"	f	class:CAccountCache
GetMergedAddr	account.h	/^		bool GetMergedAddr(const char *tag, CCoinAddr& addr)$/;"	f	class:CAccountCache
GetMergedAddress	wallet.cpp	/^bool CWallet::GetMergedAddress(string strAccount, const char *tag, CCoinAddr& addrRet)$/;"	f	class:CWallet
GetMergedPubKey	account.cpp	/^bool CAccountCache::GetMergedPubKey(cbuff tag, CPubKey& pubkey)$/;"	f	class:CAccountCache
GetMergedPubKey	account.h	/^		bool GetMergedPubKey(const char *tag, CPubKey& pubkey)$/;"	f	class:CAccountCache
GetMergedPubKey	wallet.cpp	/^bool CWallet::GetMergedPubKey(string strAccount, const char *tag, CPubKey& pubkey)$/;"	f	class:CWallet
GetMethod	key.h	/^		int GetMethod() const$/;"	f	class:CKey
GetMethod	key.h	/^		int GetMethod() const$/;"	f	class:CPubKey
GetMinFee	txfeerate.cpp	/^CFeeRate CBlockPolicyEstimator::GetMinFee(size_t sizelimit)$/;"	f	class:CBlockPolicyEstimator
GetMinFee_mode	block.h	/^enum GetMinFee_mode$/;"	g
GetMode	net.h	/^    int GetMode()$/;"	f	class:CBloomFilter
GetModifiedSize	txmempool.h	/^    int64 GetModifiedSize()$/;"	f	class:CPoolTx
GetMsgMap	netmsg.cpp	/^netmsg_map *GetMsgMap(int ifaceIndex)$/;"	f
GetNotaryAddr	wallet.cpp	/^CCoinAddr CWallet::GetNotaryAddr(string strAccount)$/;"	f	class:CWallet
GetNotorizedBlockHash	checkpoints.h	/^		const uint256 GetNotorizedBlockHash()$/;"	f	class:CCheckpoints
GetNotorizedBlockHeight	checkpoints.h	/^		const unsigned int GetNotorizedBlockHeight()$/;"	f	class:CCheckpoints
GetOffer	block.h	/^    COffer *GetOffer() const$/;"	f	class:CTransaction
GetOp	script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOutput	txmempool.cpp	/^bool CPoolTx::GetOutput(const CTxIn& input, CTxOut& retOut)$/;"	f	class:CPoolTx
GetOutputFor	main.cpp	/^bool CTransaction::GetOutputFor(const CTxIn& input, tx_cache& inputs, CTxOut& retOut)$/;"	f	class:CTransaction
GetOutputFor	main.cpp	/^const CTxOut& CTransaction::GetOutputFor(const CTxIn& input, const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetOutputsHash	script.cpp	/^uint256 GetOutputsHash(const CTransaction& txTo) {$/;"	f
GetOutputsHash	txsignature.cpp	/^static uint256 GetOutputsHash(const CTransaction& txTo) {$/;"	f	file:
GetOverflowTx	txmempool.cpp	/^vector<CTransaction> CPool::GetOverflowTx()$/;"	f	class:CPool
GetOverflowTxSize	txmempool.h	/^    int64 GetOverflowTxSize()$/;"	f	class:CPool
GetP2SHSigOpCount	main.cpp	/^unsigned int CTransaction::GetP2SHSigOpCount(const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetParam	block.h	/^		CParam *GetParam() const$/;"	f	class:CTransaction
GetPidFile	util.cpp	/^boost::filesystem::path GetPidFile()$/;"	f
GetPoWHash	block.cpp	/^uint256 CBlockHeader::GetPoWHash() const$/;"	f	class:CBlockHeader
GetPoolTx	txmempool.h	/^    CPoolTx *GetPoolTx(uint256 hash)$/;"	f	class:CPool
GetPrevoutHash	script.cpp	/^uint256 GetPrevoutHash(const CTransaction& txTo) {$/;"	f
GetPrevoutHash	txsignature.cpp	/^static uint256 GetPrevoutHash(const CTransaction& txTo) {$/;"	f	file:
GetPrimaryAddr	account.cpp	/^bool CAccountCache::GetPrimaryAddr(int type, CTxDestination& addrRet)$/;"	f	class:CAccountCache
GetPrimaryAddr	wallet.cpp	/^CCoinAddr CWallet::GetPrimaryAddr(string strAccount)$/;"	f	class:CWallet
GetPrimaryPubKey	account.cpp	/^bool CAccountCache::GetPrimaryPubKey(int type, CPubKey& pubkeyRet)$/;"	f	class:CAccountCache
GetPrimaryPubKey	wallet.cpp	/^CPubKey CWallet::GetPrimaryPubKey(string strAccount)$/;"	f	class:CWallet
GetPriority	txcreator.cpp	/^double CTxCreator::GetPriority(int64 nBytes)$/;"	f	class:CTxCreator
GetPriority	txmempool.cpp	/^double CPoolTx::GetPriority(unsigned int currentHeight) const$/;"	f	class:CPoolTx
GetPriority	wallet.cpp	/^double CWallet::GetPriority(const CTransaction& tx, tx_cache& inputs)$/;"	f	class:CWallet
GetPrivKey	dikey.cpp	/^CPrivKey DIKey::GetPrivKey() const$/;"	f	class:DIKey
GetPrivKey	eckey.cpp	/^CPrivKey ECKey::GetPrivKey() const$/;"	f	class:ECKey
GetPubKey	dikey.cpp	/^CPubKey DIKey::GetPubKey() const$/;"	f	class:DIKey
GetPubKey	eckey.cpp	/^CPubKey ECKey::GetPubKey() const$/;"	f	class:ECKey
GetPubKey	hdkey.cpp	/^CPubKey HDPrivKey::GetPubKey() const$/;"	f	class:HDPrivKey
GetPubKey	keystore.cpp	/^bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CKeyStore
GetPubKeyMode	account.cpp	/^int GetPubKeyMode(const char *tag)$/;"	f
GetPubKeyTag	account.cpp	/^static const char *GetPubKeyTag(int type)$/;"	f	file:
GetPubKeyVersion	coinaddr.cpp	/^int CCoinAddr::GetPubKeyVersion() const $/;"	f	class:CCoinAddr
GetRand	util.cpp	/^uint64 GetRand(uint64 nMax)$/;"	f
GetRandHash	util.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	util.cpp	/^int GetRandInt(int nMax)$/;"	f
GetRecvAddr	wallet.cpp	/^CCoinAddr CWallet::GetRecvAddr(string strAccount)$/;"	f	class:CWallet
GetRefCount	net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetReferenceHash	matrix.h	/^		uint160 GetReferenceHash()$/;"	f	class:CTxMatrix
GetRequestCount	wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetScript	coinaddr.cpp	/^CScript CCoinAddr::GetScript()$/;"	f	class:CCoinAddr
GetScriptForDestination	script.cpp	/^CScript GetScriptForDestination(const CTxDestination& dest)$/;"	f
GetScriptForWitness	coinaddr.cpp	/^CScript GetScriptForWitness(const CScript& redeemscript, int nVer)$/;"	f
GetScriptID	coinaddr.cpp	/^bool CCoinAddr::GetScriptID(CScriptID& scriptID) const $/;"	f	class:CCoinAddr
GetScriptVersion	coinaddr.cpp	/^int CCoinAddr::GetScriptVersion() const$/;"	f	class:CCoinAddr
GetSecret	base58.h	/^		CSecret GetSecret(bool &fCompressedOut)$/;"	f	class:CCoinSecret
GetSecret	key.h	/^    CSecret GetSecret(bool &fCompressed) const$/;"	f	class:CKey
GetSecret	keystore.h	/^    virtual bool GetSecret(const CKeyID &address, CSecret& vchSecret, bool &fCompressed) const$/;"	f	class:CKeyStore
GetSequenceHash	script.cpp	/^uint256 GetSequenceHash(const CTransaction& txTo) {$/;"	f
GetSequenceHash	txsignature.cpp	/^static uint256 GetSequenceHash(const CTransaction& txTo) {$/;"	f	file:
GetSerializedSize	txcreator.cpp	/^size_t CTxCreator::GetSerializedSize()$/;"	f	class:CTxCreator
GetShortID	block_cmpct.cpp	/^uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {$/;"	f	class:CBlockHeaderAndShortTxIDs
GetSigOpCost	block.cpp	/^int64_t CTransaction::GetSigOpCost(MapPrevTx& mapInputs, int flags)$/;"	f	class:CTransaction
GetSigOpCost	block.cpp	/^int64_t CTransaction::GetSigOpCost(tx_cache& mapInputs, int flags)$/;"	f	class:CTransaction
GetSigOpCount	script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSize	matrix.h	/^		unsigned int GetSize()$/;"	f	class:CTxMatrix
GetSkipHeight	block.cpp	/^static int GetSkipHeight(int height) $/;"	f	file:
GetSpecialFolderPath	util.cpp	/^boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetStaleTxSize	txmempool.h	/^    int64 GetStaleTxSize()$/;"	f	class:CPool
GetStamp	txmempool.h	/^    time_t GetStamp()$/;"	f	class:CPoolTx
GetStateFor	versionbits.cpp	/^ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex *pindexPrev, CIface *params, DeploymentPos pos) const$/;"	f	class:AbstractThresholdConditionChecker
GetTime	util.cpp	/^int64 GetTime()$/;"	f
GetTotalBlocksEstimate	checkpoints.cpp	/^int CCheckpoints::GetTotalBlocksEstimate()$/;"	f	class:CCheckpoints
GetTransaction	block.cpp	/^bool GetTransaction(CIface *iface, const uint256 &hash, CTransaction &tx, uint256 *hashBlock)$/;"	f
GetTransaction	wallet.cpp	/^bool CWallet::GetTransaction(const uint256 &hashTx, CWalletTx& wtx)$/;"	f	class:CWallet
GetTx	block.cpp	/^const CTransaction *CBlock::GetTx(uint256 hash)$/;"	f	class:CBlock
GetTx	txmempool.cpp	/^bool CPool::GetTx(uint256 hash, CTransaction& retTx, int flags)$/;"	f	class:CPool
GetTx	txmempool.h	/^    CTransaction& GetTx()$/;"	f	class:CPoolTx
GetTx	wallettx.cpp	/^CWalletTx& CWallet::GetTx(const uint256& hTx)$/;"	f	class:CWallet
GetTxFee	wallet.cpp	/^int64 GetTxFee(int ifaceIndex, CTransaction tx)$/;"	f
GetTxList	txcreator.h	/^    vector<CWalletTx>& GetTxList()$/;"	f	class:CTxBatchCreator
GetTxMemPool	txmempool.cpp	/^CTxMemPool *GetTxMemPool(CIface *iface)$/;"	f
GetTxSize	txmempool.h	/^    int64 GetTxSize()$/;"	f	class:CPoolTx
GetTxTime	wallet.cpp	/^int64 CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxnOutputType	script.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	matrix.h	/^		unsigned int GetType()$/;"	f	class:CTxMatrix
GetUnconfirmedBalance	wallet.cpp	/^int64 CWallet::GetUnconfirmedBalance() const$/;"	f	class:CWallet
GetValidIndexSet	block.cpp	/^ValidIndexSet *GetValidIndexSet(int ifaceIndex)$/;"	f
GetValidateNotaries	matrix.cpp	/^bool GetValidateNotaries(CWallet *wallet, vector<CPubKey>& kSend, uint256 hMatrixTx = 0)$/;"	f
GetValueIn	main.cpp	/^int64 CTransaction::GetValueIn(const MapPrevTx& inputs)$/;"	f	class:CTransaction
GetValueIn	main.cpp	/^int64 CTransaction::GetValueIn(tx_cache& inputs)$/;"	f	class:CTransaction
GetValueOut	block.h	/^    int64 GetValueOut() const$/;"	f	class:CTransaction
GetVersion	base58.h	/^		const cbuff& GetVersion() const$/;"	f	class:CBase58Data
GetVersion	block.h	/^		int GetVersion() const$/;"	f	class:CTransactionCore
GetVersionAlgo	algobits.cpp	/^int GetVersionAlgo(unsigned int nVersion)$/;"	f
GetVersionBitsCache	versionbits.cpp	/^VersionBitsCache *GetVersionBitsCache(CIface *iface)$/;"	f
GetVirtualTransactionSize	wallet.h	/^		unsigned int GetVirtualTransactionSize(const CTransaction& tx)$/;"	f	class:CWallet
GetVirtualTransactionSize	wallet.h	/^		unsigned int GetVirtualTransactionSize(int64 nWeight)$/;"	f	class:CWallet
GetWallet	wallet.cpp	/^CWallet *GetWallet(CIface *iface)$/;"	f
GetWallet	wallet.cpp	/^CWallet *GetWallet(int iface_idx)$/;"	f
GetWalletFile	wallet.cpp	/^bool GetWalletFile(CWallet* pwallet, string &strWalletFileOut)$/;"	f
GetWarnings	main.cpp	/^string GetWarnings(int ifaceIndex, string strFor)$/;"	f
GetWeight	txmempool.h	/^    int64 GetWeight()$/;"	f	class:CPoolTx
GetWitness	coinaddr.cpp	/^CTxDestination CCoinAddr::GetWitness(int output_type) const $/;"	f	class:CCoinAddr
GetWitnessCommitmentIndex	block.cpp	/^int GetWitnessCommitmentIndex(const CBlock& block)$/;"	f
GetWitnessHash	block.h	/^    uint256 GetWitnessHash() const$/;"	f	class:CTransaction
HDMasterPrivKey	hdkey.h	/^    HDMasterPrivKey() : HDPrivKey()$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	hdkey.h	/^    HDMasterPrivKey(CSecret secretIn, cbuff vchChainIn)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	hdkey.h	/^    HDMasterPrivKey(ECKey seed_key)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	hdkey.h	/^    HDMasterPrivKey(HDMasterPrivKey& b)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	hdkey.h	/^    HDMasterPrivKey(cbuff seedIn)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	hdkey.h	/^    HDMasterPrivKey(cbuff vchKeyIn, cbuff vchChainIn)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	hdkey.h	/^class HDMasterPrivKey : public HDPrivKey$/;"	c
HDPrivKey	hdkey.h	/^    HDPrivKey()$/;"	f	class:HDPrivKey
HDPrivKey	hdkey.h	/^    HDPrivKey(CSecret secret, bool fCompressed)$/;"	f	class:HDPrivKey
HDPrivKey	hdkey.h	/^    HDPrivKey(const HDPrivKey& b)$/;"	f	class:HDPrivKey
HDPrivKey	hdkey.h	/^    HDPrivKey(const HDPrivKey& parent, cbuff vchKeyIn, cbuff vchChainIn, int indexIn)$/;"	f	class:HDPrivKey
HDPrivKey	hdkey.h	/^class HDPrivKey : public ECKey$/;"	c
HDPubKey	hdkey.h	/^    HDPubKey()$/;"	f	class:HDPubKey
HDPubKey	hdkey.h	/^    HDPubKey(cbuff vchPubKeyIn)$/;"	f	class:HDPubKey
HDPubKey	hdkey.h	/^    HDPubKey(cbuff vchPubKeyIn, cbuff vchChainIn)$/;"	f	class:HDPubKey
HDPubKey	hdkey.h	/^    HDPubKey(cbuff vchPubKeyIn, cbuff vchChainIn, int depthIn, int indexIn)$/;"	f	class:HDPubKey
HDPubKey	hdkey.h	/^    HDPubKey(const HDPubKey& b)$/;"	f	class:HDPubKey
HDPubKey	hdkey.h	/^class HDPubKey : public CPubKey$/;"	c
HandleSIGHUP	init.cpp	/^void HandleSIGHUP(int)$/;"	f
HandleSIGTERM	init.cpp	/^void HandleSIGTERM(int)$/;"	f
HasAlgoConsensus	chain.cpp	/^bool HasAlgoConsensus(CIface *iface, CBlockIndex *pindexLast)$/;"	f
HasArchTx	wallettx.cpp	/^bool CWallet::HasArchTx(uint256 hash) const$/;"	f	class:CWallet
HasBlockHash	block.cpp	/^bool HasBlockHash(CIface *iface, uint256 hash)$/;"	f
HasTx	wallettx.cpp	/^bool CWallet::HasTx(const uint256 hTx) const$/;"	f	class:CWallet
HasTxCoins	coin.cpp	/^bool HasTxCoins(CIface *iface, uint256 hash)$/;"	f
Hash	bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
HashList	block.h	/^typedef std::vector<uint256> HashList;$/;"	t
HaveCScript	keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveInput	txcreator.cpp	/^bool CTxCreator::HaveInput(CWalletTx *tx, unsigned int n)$/;"	f	class:CTxCreator
HaveInput	txcreator.cpp	/^bool CTxCreator::HaveInput(const CPubKey& pubKey)$/;"	f	class:CTxCreator
HaveInput	txcreator.cpp	/^bool CTxCreator::HaveInput(const CTxDestination& input)$/;"	f	class:CTxCreator
HaveKey	keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKeys	script.cpp	/^unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f
HaveOutput	txcreator.cpp	/^bool CTxCreator::HaveOutput(const CPubKey& pubKey)$/;"	f	class:CTxCreator
HaveOutput	txcreator.cpp	/^bool CTxCreator::HaveOutput(const CTxDestination& input)$/;"	f	class:CTxCreator
HaveTx	txmempool.h	/^    bool HaveTx(uint256 hash)$/;"	f	class:CPool
INF_FEERATE	txfeerate.h	240;"	d
INF_PRIORITY	txfeerate.h	243;"	d
INIT_SECP256K1	eckey.cpp	/^void INIT_SECP256K1(void)$/;"	f
IS_ACCOUNT	account.cpp	58;"	d	file:
IndexOfExtOutput	wallet.cpp	/^int IndexOfExtOutput(const CTransaction& tx)$/;"	f
Init	block.cpp	/^void CTransaction::Init(const CTransaction& tx)$/;"	f	class:CTransaction
Init	hdkey.h	/^    void Init(const HDMasterPrivKey& b)$/;"	f	class:HDMasterPrivKey
Init	hdkey.h	/^    void Init(const HDPrivKey& b)$/;"	f	class:HDPrivKey
Init	hdkey.h	/^    void Init(const HDPubKey& b)$/;"	f	class:HDPubKey
Init	key.h	/^		void Init(const CKey& b)$/;"	f	class:CKey
Init	key.h	/^		void Init(const CKeyMetadata& b)$/;"	f	class:CKeyMetadata
Init	main.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	matrix.h	/^		void Init(const CTxMatrix& b)$/;"	f	class:CTxMatrix
Init	txcreator.h	/^    void Init(CWallet *wallet)$/;"	f	class:CTxCreator
Init	txmempool.h	/^    void Init(const CPoolTx& b)$/;"	f	class:CPoolTx
Init	txmempool.h	/^    void Init(const CTransaction& txIn)$/;"	f	class:CPoolTx
Init	wallet.h	/^		void Init(CWallet *pwalletIn)$/;"	f	class:CWalletTx
Init	wallet.h	/^		void Init(const CAccount& b)$/;"	f	class:CAccount
InitCells	matrix.h	/^		void InitCells(const CTxMatrix& b)$/;"	f	class:CTxMatrix
InitChainExport	chain.cpp	/^int InitChainExport(int ifaceIndex, const char *path, int min, int max)$/;"	f
InitChainImport	chain.cpp	/^int InitChainImport(int ifaceIndex, const char *path, int offset)$/;"	f
InitCoinHash	coin.cpp	/^static void InitCoinHash()$/;"	f	file:
InitData	block_cmpct.cpp	/^ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {$/;"	f	class:PartiallyDownloadedBlock
InitError	init.cpp	/^bool static InitError(const std::string &str)$/;"	f	file:
InitServiceBlockEvent	chain.cpp	/^int InitServiceBlockEvent(int ifaceIndex, uint64_t nHeight)$/;"	f
InitServiceMinerEvent	chain.cpp	/^int InitServiceMinerEvent(int ifaceIndex, uint64_t nIncr)$/;"	f
InitServiceValidateEvent	chain.cpp	/^void InitServiceValidateEvent(CWallet *wallet, uint64_t nHeight)$/;"	f
InitServiceWalletEvent	chain.cpp	/^void InitServiceWalletEvent(CWallet *wallet, uint64_t nHeight)$/;"	f
InitSpent	wallet.cpp	/^void CWallet::InitSpent(CWalletTx& wtx)$/;"	f	class:CWallet
InitWarning	init.cpp	/^bool static InitWarning(const std::string &str)$/;"	f	file:
Initialize	txfeerate.cpp	/^void TxConfirmStats::Initialize(std::vector<double>& defaultBuckets, unsigned int maxConfirms, double _decay, std::string _dataTypeString)$/;"	f	class:TxConfirmStats
InsertBlockIndex	txidx.cpp	/^CBlockIndex *InsertBlockIndex(blkidx_t *blockIndex, uint256 hash)$/;"	f
InsertValidateNotary	matrix.cpp	/^void InsertValidateNotary(CWallet *wallet, const CTransaction& tx)$/;"	f
InterpretNegativeSetting	util.cpp	/^static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)$/;"	f	file:
Invalidate	key.h	/^		void Invalidate()$/;"	f	class:CPubKey
Inventory	wallet.h	/^		void Inventory(const uint256 &hash)$/;"	f	class:CWallet
InvertLowestOne	block.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
IsAccountValid	wallet.cpp	/^bool IsAccountValid(CIface *iface, std::string strAccount)$/;"	f
IsAddrUsed	account.cpp	/^bool CAccountCache::IsAddrUsed(const CCoinAddr& addr)$/;"	f	class:CAccountCache
IsAddrUsed	account.cpp	/^bool CAccountCache::IsAddrUsed(const CPubKey& vchPubKey)$/;"	f	class:CAccountCache
IsAlgoBitsMask	algobits.cpp	/^bool IsAlgoBitsMask(unsigned int nVersion)$/;"	f
IsChange	wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	block.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCompressed	key.h	/^		bool IsCompressed() const$/;"	f	class:CPubKey
IsCompressed	key.h	/^    bool IsCompressed() const$/;"	f	class:CKey
IsConfirmed	wallet.cpp	/^bool CWalletTx::IsConfirmed() const$/;"	f	class:CWalletTx
IsDependent	txmempool.cpp	/^bool CPoolTx::IsDependent(const CPoolTx& ptx) const$/;"	f	class:CPoolTx
IsDilithium	key.h	/^		bool IsDilithium() const$/;"	f	class:CKey
IsDilithium	key.h	/^		bool IsDilithium() const$/;"	f	class:CPubKey
IsEmpty	block.h	/^    bool IsEmpty() const { return vtxinwit.empty(); }$/;"	f	class:CTxWitness
IsExpired	txmempool.h	/^    bool IsExpired(time_t span)$/;"	f	class:CPoolTx
IsFinal	block.cpp	/^bool CTransaction::IsFinal(int ifaceIndex, int nBlockHeight, int64 nBlockTime) const$/;"	f	class:CTransaction
IsFinal	block.h	/^    bool IsFinal() const$/;"	f	class:CTxIn
IsFlag	txmempool.h	/^    bool IsFlag(int flag)$/;"	f	class:CPoolTx
IsFromMe	wallet.h	/^			 bool IsFromMe() const$/;"	f	class:CWalletTx
IsFromMe	wallet.h	/^		bool IsFromMe(const CTransaction& tx)$/;"	f	class:CWallet
IsHex	util.cpp	/^bool IsHex(const string& str)$/;"	f
IsInMainChain	block.cpp	/^bool CBlockIndex::IsInMainChain(int ifaceIndex) const$/;"	f	class:CBlockIndex
IsInMainChain	main.h	/^    bool IsInMainChain(int ifaceIndex) const { return GetDepthInMainChain(ifaceIndex) > 0; }$/;"	f	class:CMerkleTx
IsInMemoryPool	block.cpp	/^bool CTransaction::IsInMemoryPool(int ifaceIndex)$/;"	f	class:CTransaction
IsInitialBlockDownload	block.cpp	/^bool IsInitialBlockDownload(int ifaceIndex)$/;"	f
IsInputTx	txmempool.cpp	/^bool CPool::IsInputTx(const uint256 hash, int nOut)$/;"	f	class:CPool
IsInvalidTx	txmempool.h	/^    bool IsInvalidTx(const uint256 hash) const$/;"	f	class:CPool
IsKnownType	protocol.cpp	/^bool CInv::IsKnownType() const$/;"	f	class:CInv
IsLocal	txmempool.h	/^    bool IsLocal()$/;"	f	class:CPoolTx
IsMine	script.cpp	/^bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool fWitnessFlag)$/;"	f
IsMine	script.cpp	/^bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)$/;"	f
IsMine	wallet.cpp	/^bool CWallet::IsMine(const CTxIn &txin)$/;"	f	class:CWallet
IsMine	wallet.h	/^		bool IsMine(const CTransaction& tx)$/;"	f	class:CWallet
IsMine	wallet.h	/^		bool IsMine(const CTxOut& txout)$/;"	f	class:CWallet
IsNewerThan	block.h	/^    bool IsNewerThan(const CTransaction& old) const$/;"	f	class:CTransaction
IsNull	account.h	/^		bool IsNull() const { $/;"	f	class:CAccountCache
IsNull	block.h	/^		bool IsNull()$/;"	f	class:CTxOut
IsNull	block.h	/^    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }$/;"	f	class:COutPoint
IsNull	block.h	/^    bool IsNull() const { return (nFile == (unsigned int) -1); }$/;"	f	class:CDiskTxPos
IsNull	block.h	/^    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }$/;"	f	class:CInPoint
IsNull	block.h	/^    bool IsNull() const { return scriptWitness.IsNull(); }$/;"	f	class:CTxInWitness
IsNull	block.h	/^    bool IsNull() const { return stack.empty(); }$/;"	f	struct:CScriptWitness
IsNull	block.h	/^    bool IsNull() const$/;"	f	class:CBlock
IsNull	block.h	/^    bool IsNull() const$/;"	f	class:CBlockHeader
IsNull	block.h	/^    bool IsNull() const$/;"	f	class:CTransactionCore
IsNull	block.h	/^    bool IsNull() const$/;"	f	class:CTxWitness
IsNull	block.h	/^    bool IsNull()$/;"	f	class:CBlockLocator
IsNull	block.h	/^    bool IsNull()$/;"	f	class:CTxIndex
IsNull	dikey.cpp	/^bool DIKey::IsNull() const$/;"	f	class:DIKey
IsNull	eckey.cpp	/^bool ECKey::IsNull() const$/;"	f	class:ECKey
IsNull	key.h	/^    bool IsNull() const$/;"	f	class:CKey
IsNull	net.h	/^    bool IsNull()$/;"	f	class:CRequestTracker
IsPayToScriptHash	script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsPendingTx	txmempool.h	/^    bool IsPendingTx(const uint256 hash) const$/;"	f	class:CPool
IsPushOnly	script.h	/^    bool IsPushOnly() const$/;"	f	class:CScript
IsRelevant	bloom.cpp	/^bool CBloomFilter::IsRelevant(const CTransaction& tx, const uint256& hash, bool fUpdate)$/;"	f	class:CBloomFilter
IsRelevantAndUpdate	bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& hash)$/;"	f	class:CBloomFilter
IsScript	coinaddr.cpp	/^bool CCoinAddr::IsScript() const $/;"	f	class:CCoinAddr
IsSpent	wallet.h	/^			 bool IsSpent(unsigned int nOut) const$/;"	f	class:CWalletTx
IsStandard	block.cpp	/^bool CTransaction::IsStandard() const$/;"	f	class:CTransaction
IsStandard	script.cpp	/^bool IsStandard(const CScript& scriptPubKey)$/;"	f
IsTest	net.h	/^    bool IsTest()$/;"	f	class:CBloomFilter
IsTxAvailable	block_cmpct.cpp	/^bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {$/;"	f	class:PartiallyDownloadedBlock
IsValid	base58.h	/^		bool IsValid() const$/;"	f	class:CCoinSecret
IsValid	block.h	/^    bool IsValid(int nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	coinaddr.cpp	/^bool CCoinAddr::IsValid() const$/;"	f	class:CCoinAddr
IsValid	dikey.cpp	/^bool DIKey::IsValid()$/;"	f	class:DIKey
IsValid	eckey.cpp	/^bool ECKey::IsValid()$/;"	f	class:ECKey
IsValid	hdkey.cpp	/^bool HDPrivKey::IsValid()$/;"	f	class:HDPrivKey
IsValid	key.h	/^		bool IsValid() const$/;"	f	class:CPubKey
IsValid	protocol.cpp	/^bool CMessageHeader::IsValid(int ifaceIndex) const$/;"	f	class:CMessageHeader
IsValidKey	hdkey.cpp	/^bool HDMasterPrivKey::IsValidKey()$/;"	f	class:HDMasterPrivKey
IsValidKey	hdkey.cpp	/^bool HDPrivKey::IsValidKey()$/;"	f	class:HDPrivKey
IsWithinSizeConstraints	bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
IsWitnessEnabled	block.cpp	/^bool IsWitnessEnabled(CIface *iface, const CBlockIndex* pindexPrev)$/;"	f
IsWitnessProgram	script.cpp	/^bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const $/;"	f	class:CScript
LN2	bloom.cpp	35;"	d	file:
LN2SQUARED	bloom.cpp	34;"	d	file:
LOCAL_BIND	net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon4
LOCAL_HTTP	net.h	/^    LOCAL_HTTP,   \/\/ address reported by whatismyip.com and similars$/;"	e	enum:__anon4
LOCAL_IF	net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon4
LOCAL_IRC	net.h	/^    LOCAL_IRC,    \/\/ address reported by IRC (deprecated)$/;"	e	enum:__anon4
LOCAL_MANUAL	net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon4
LOCAL_MAX	net.h	/^    LOCAL_MAX$/;"	e	enum:__anon4
LOCAL_NONE	net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon4
LOCAL_UPNP	net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon4
LOCKTIME_MEDIAN_TIME_PAST	block.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	coin.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	txmempool.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	validation.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	wallet.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_THRESHOLD	block.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; $/;"	v
LOCKTIME_VERIFY_SEQUENCE	block.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	coin.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	txmempool.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	validation.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	wallet.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LastCommonAncestor	block.cpp	/^CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) $/;"	f
ListAccountCreditDebit	walletdb.cpp	/^void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
LoadCScript	wallet.h	/^		bool LoadCScript(const CScript& redeemScript) { return CBasicKeyStore::AddCScript(redeemScript); }$/;"	f	class:CWallet
LoadExternalBlockchainFile	chain.cpp	/^bool LoadExternalBlockchainFile()$/;"	f
LoadKey	wallet.h	/^		bool LoadKey(const DIKey& key) { return CBasicKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadKey	wallet.h	/^		bool LoadKey(const ECKey& key) { return CBasicKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadWallet	wallet.cpp	/^int CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	walletdb.cpp	/^int CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LogException	util.cpp	/^void LogException(std::exception* pex, const char* pszThread)$/;"	f
MAX_ACCADDR	wallet.h	76;"	d
MAX_ALGOBITS	algobits.h	37;"	d
MAX_BASE58_TYPES	coinaddr.h	/^			MAX_BASE58_TYPES$/;"	e	enum:CCoinAddr::__anon3
MAX_BLOCK_CONFIRMS	txfeerate.h	/^static const unsigned int MAX_BLOCK_CONFIRMS = 25;$/;"	v
MAX_BLOCK_DOWNLOAD_BATCH	chain.cpp	42;"	d	file:
MAX_BLOCK_DOWNLOAD_TIME	block.cpp	47;"	d	file:
MAX_BLOOM_FILTER_SIZE	bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_FEERATE	txfeerate.h	/^static const double MAX_FEERATE = 1e7;$/;"	v
MAX_HASH_FUNCS	bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HD_SEED_INDEX	hdkey.cpp	52;"	d	file:
MAX_MEMPOOL_ACTIVE_SPAN	txmempool.h	30;"	d
MAX_MEMPOOL_INVAL_SPAN	txmempool.h	33;"	d
MAX_MEMPOOL_OVERFLOW_SPAN	txmempool.h	31;"	d
MAX_MEMPOOL_PENDING_SPAN	txmempool.h	32;"	d
MAX_MEMPOOL_STALE_SPAN	txmempool.h	34;"	d
MAX_NOTARY_TX_VALUE	matrix.h	/^		static const int MAX_NOTARY_TX_VALUE = 100;$/;"	m	class:CTxMatrix
MAX_OPCODE	block.cpp	51;"	d	file:
MAX_PRIORITY	txfeerate.h	/^static const double MAX_PRIORITY = 1e16;$/;"	v
MAX_WORDS	mnemonic.cpp	35;"	d	file:
META_HD_KEY	key.h	/^		static const int META_HD_KEY = (1 << 1);$/;"	m	class:CKeyMetadata
META_INTERNAL	key.h	/^		static const int META_INTERNAL = (1 << 2);$/;"	m	class:CKeyMetadata
META_SEGWIT	key.h	/^		static const int META_SEGWIT = (1 << 0);$/;"	m	class:CKeyMetadata
MIN_FEERATE	txfeerate.h	/^static const double MIN_FEERATE = 10;$/;"	v
MIN_PRIORITY	txfeerate.h	/^static const double MIN_PRIORITY = 10;$/;"	v
MIN_SUCCESS_PCT	txfeerate.h	/^static const double MIN_SUCCESS_PCT = .95;$/;"	v
MIN_VALIDATE_NOTARY_CONSENSUS	matrix.cpp	35;"	d	file:
MSG_BLOCK	net.h	/^    MSG_BLOCK,$/;"	e	enum:__anon5
MSG_CMPCT_BLOCK	net.h	/^    MSG_CMPCT_BLOCK,$/;"	e	enum:__anon5
MSG_FILTERED_BLOCK	net.h	/^    MSG_FILTERED_BLOCK, \/* bloom *\/$/;"	e	enum:__anon5
MSG_FILTERED_WITNESS_BLOCK	net.h	/^    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG$/;"	e	enum:__anon5
MSG_TX	net.h	/^    MSG_TX = 1, $/;"	e	enum:__anon5
MSG_TYPE_MASK	net.h	123;"	d
MSG_TYPE_MAX	net.h	120;"	d
MSG_WITNESS_BLOCK	net.h	/^    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,$/;"	e	enum:__anon5
MSG_WITNESS_FLAG	net.h	122;"	d
MSG_WITNESS_TX	net.h	/^    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,$/;"	e	enum:__anon5
M_SPRING	matrix.h	/^		static const int M_SPRING = 2;$/;"	m	class:CTxMatrix
M_VALIDATE	matrix.h	/^		static const int M_VALIDATE = 1;$/;"	m	class:CTxMatrix
MakeNewKey	dikey.cpp	/^void DIKey::MakeNewKey()$/;"	f	class:DIKey
MakeNewKey	dikey.h	/^    void MakeNewKey(bool fCompressed) \/* CKey *\/$/;"	f	class:DIKey
MakeNewKey	eckey.cpp	/^void ECKey::MakeNewKey(bool fCompressed)$/;"	f	class:ECKey
MakeNewKey	hdkey.cpp	/^void HDMasterPrivKey::MakeNewKey(bool fCompressed)$/;"	f	class:HDMasterPrivKey
MakeNewKey	hdkey.cpp	/^void HDPrivKey::MakeNewKey(bool fCompressed)$/;"	f	class:HDPrivKey
MakeNewKey	hdkey.h	/^    void MakeNewKey()$/;"	f	class:HDMasterPrivKey
MakeSameSize	script.cpp	/^void MakeSameSize(valtype& vch1, valtype& vch2)$/;"	f
MapCheckpoints	checkpoints.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t
MapPrevTx	block.h	/^typedef std::map<uint256, std::pair<CTxIndex, CTransaction> > MapPrevTx;$/;"	t
MarkDirty	wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	wallet.h	/^			 void MarkDirty()$/;"	f	class:CWalletTx
MarkSpent	wallet.h	/^			 void MarkSpent(unsigned int nOut)$/;"	f	class:CWalletTx
Mask	versionbits.cpp	/^      uint32_t Mask(CIface * params) const { return ((uint32_t)1) << params->vDeployments[id].bit; }$/;"	f	class:__anon9::VersionBitsConditionChecker
MergeKey	dikey.cpp	/^void DIKey::MergeKey(CKey& childKey, cbuff tag)$/;"	f	class:DIKey
MergeKey	eckey.cpp	/^void ECKey::MergeKey(CKey& childKey, cbuff tag)$/;"	f	class:ECKey
MerkleComputation	wit_merkle.cpp	/^static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) $/;"	f	file:
MoneyRange	block.h	/^inline bool MoneyRange(CIface *iface, int64 nValue) $/;"	f
MoneyRange	block.h	/^inline bool MoneyRange(int ifaceIndex, int64 nValue) $/;"	f
MurmurHash3	bloom.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
NOMINMAX	util.cpp	54;"	d	file:
NULL_ACCOUNT	wallet.cpp	/^const string NULL_ACCOUNT = "*";$/;"	v
Neuter	dikey.cpp	/^DIExtPubKey DIExtKey::Neuter() const $/;"	f	class:DIExtKey
Neuter	eckey.cpp	/^ECExtPubKey ECExtKey::Neuter() const $/;"	f	class:ECExtKey
NewTx	txfeerate.cpp	/^unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)$/;"	f	class:TxConfirmStats
OP_0	script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_ALIAS	script.h	/^    OP_ALIAS = 0x0a,$/;"	e	enum:opcodetype
OP_ALTCHAIN	script.h	/^		OP_ALTCHAIN = 0x04,$/;"	e	enum:opcodetype
OP_AND	script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_ASSET	script.h	/^    OP_ASSET = 0x0f,$/;"	e	enum:opcodetype
OP_BOOLAND	script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CERT	script.h	/^    OP_CERT=0x0d,$/;"	e	enum:opcodetype
OP_CHANNEL	script.h	/^    OP_CHANNEL = 0x07,$/;"	e	enum:opcodetype
OP_CHECKALTPROOF	script.h	/^		OP_CHECKALTPROOF = 0xb7,$/;"	e	enum:opcodetype
OP_CHECKLOCKTIMEVERIFY	script.h	/^		OP_CHECKLOCKTIMEVERIFY = 0xb1,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSEQUENCEVERIFY	script.h	/^		OP_CHECKSEQUENCEVERIFY = 0xb2,$/;"	e	enum:opcodetype
OP_CHECKSIG	script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_CONTEXT	script.h	/^    OP_CONTEXT = 0x05,$/;"	e	enum:opcodetype
OP_DEPTH	script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_EXEC	script.h	/^    OP_EXEC = 0x06,$/;"	e	enum:opcodetype
OP_EXT_ACTIVATE	script.h	/^    OP_EXT_ACTIVATE = 0xf1,$/;"	e	enum:opcodetype
OP_EXT_GENERATE	script.h	/^    OP_EXT_GENERATE = 0xf4,$/;"	e	enum:opcodetype
OP_EXT_HASH	script.h	/^    OP_EXT_HASH = 0xfc,$/;"	e	enum:opcodetype
OP_EXT_NEW	script.h	/^    OP_EXT_NEW = 0xf0,$/;"	e	enum:opcodetype
OP_EXT_NOP8	script.h	/^		OP_EXT_NOP8 = 0xf8,$/;"	e	enum:opcodetype
OP_EXT_NOP9	script.h	/^		OP_EXT_NOP9 = 0xf9,$/;"	e	enum:opcodetype
OP_EXT_PAY	script.h	/^    OP_EXT_PAY = 0xf6,$/;"	e	enum:opcodetype
OP_EXT_REMOVE	script.h	/^    OP_EXT_REMOVE = 0xf3,$/;"	e	enum:opcodetype
OP_EXT_RESERVED1	script.h	/^    OP_EXT_RESERVED1 = 0x01,$/;"	e	enum:opcodetype
OP_EXT_RESERVED2	script.h	/^    OP_EXT_RESERVED2 = 0x02,$/;"	e	enum:opcodetype
OP_EXT_RESERVED8	script.h	/^    OP_EXT_RESERVED8 = 0x08,$/;"	e	enum:opcodetype
OP_EXT_TRANSFER	script.h	/^    OP_EXT_TRANSFER = 0xf5,$/;"	e	enum:opcodetype
OP_EXT_UPDATE	script.h	/^    OP_EXT_UPDATE = 0xf2,$/;"	e	enum:opcodetype
OP_EXT_VALIDATE	script.h	/^    OP_EXT_VALIDATE = 0xf7,$/;"	e	enum:opcodetype
OP_FALSE	script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IDENT	script.h	/^    OP_IDENT=0x0c,$/;"	e	enum:opcodetype
OP_IF	script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LICENSE	script.h	/^    OP_LICENSE = 0x0e,$/;"	e	enum:opcodetype
OP_LSHIFT	script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MATRIX	script.h	/^    OP_MATRIX = 0x09,$/;"	e	enum:opcodetype
OP_MAX	script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	script.h	/^		OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	script.h	/^		OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,$/;"	e	enum:opcodetype
OP_NOP3	script.h	/^		OP_NOP3 = OP_CHECKSEQUENCEVERIFY,$/;"	e	enum:opcodetype
OP_NOP4	script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	script.h	/^		OP_NOP8 = OP_CHECKALTPROOF,$/;"	e	enum:opcodetype
OP_NOP9	script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OFFER	script.h	/^    OP_OFFER=0x0b,$/;"	e	enum:opcodetype
OP_OR	script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PARAM	script.h	/^		OP_PARAM = 0x03,$/;"	e	enum:opcodetype
OP_PICK	script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUBKEY	script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUBKEYS	script.h	/^    OP_PUBKEYS = 0xfb,$/;"	e	enum:opcodetype
OP_PUSHDATA1	script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SMALLINTEGER	script.h	/^    OP_SMALLINTEGER = 0xfa,$/;"	e	enum:opcodetype
OP_SUB	script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
OUTPUT_TYPE_BECH32	coinaddr.h	38;"	d
OUTPUT_TYPE_DILITHIUM	coinaddr.h	39;"	d
OUTPUT_TYPE_LEGACY	coinaddr.h	36;"	d
OUTPUT_TYPE_NONE	coinaddr.h	35;"	d
OUTPUT_TYPE_P2SH_SEGWIT	coinaddr.h	37;"	d
Open	txidx.cpp	/^bool CDBEnv::Open(boost::filesystem::path pathEnv_)$/;"	f	class:CDBEnv
OpenBlockFile	main.cpp	/^FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode)$/;"	f
POOL_ACTIVE	txmempool.h	37;"	d
POOL_DEPENDENCY	txmempool.h	48;"	d
POOL_FEE_LOW	txmempool.h	43;"	d
POOL_INVALID	txmempool.h	40;"	d
POOL_NOT_FINAL	txmempool.h	44;"	d
POOL_NO_INPUT	txmempool.h	46;"	d
POOL_OVERFLOW	txmempool.h	39;"	d
POOL_PENDING	txmempool.h	38;"	d
POOL_PEND_TX	txmempool.h	45;"	d
POOL_SOFT_LIMIT	txmempool.h	47;"	d
POOL_STALE	txmempool.h	41;"	d
PRI_SPACING	txfeerate.h	/^static const double PRI_SPACING = 2;$/;"	v
PUBKEY_C_ADDRESS	coinaddr.h	/^			PUBKEY_C_ADDRESS = 29,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_E_ADDRESS	coinaddr.h	/^			PUBKEY_E_ADDRESS = 33,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_G_ADDRESS	coinaddr.h	/^			PUBKEY_G_ADDRESS = 38,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_L_ADDRESS	coinaddr.h	/^			PUBKEY_L_ADDRESS = 48,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_S_ADDRESS	coinaddr.h	/^			PUBKEY_S_ADDRESS = 62,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_T_ADDRESS	coinaddr.h	/^			PUBKEY_T_ADDRESS = 65,$/;"	e	enum:CCoinAddr::__anon2
ParseHex	util.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	util.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseMoney	coin.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	coin.cpp	/^bool ParseMoney(const string& str, CAmount& nRet)$/;"	f
ParseParameters	util.cpp	/^void ParseParameters(int argc, const char* const argv[])$/;"	f
ParseString	util.cpp	/^void ParseString(const string& str, char c, vector<string>& v)$/;"	f
PartiallyDownloadedBlock	block_cmpct.h	/^		explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}$/;"	f	class:PartiallyDownloadedBlock
PartiallyDownloadedBlock	block_cmpct.h	/^class PartiallyDownloadedBlock $/;"	c
PayOffer	block.cpp	/^COffer *CTransaction::PayOffer(COffer *accept)$/;"	f	class:CTransaction
PerformBlockChainOperation	chain.cpp	/^void PerformBlockChainOperation(int ifaceIndex)$/;"	f
Period	versionbits.cpp	/^      int Period(CIface * params) const { return params->nMinerConfirmationWindow; }$/;"	f	class:__anon9::VersionBitsConditionChecker
PopTx	txmempool.cpp	/^bool CPool::PopTx(const CTransaction& tx, CPoolTx& ptx)$/;"	f	class:CPool
PrefilledTransaction	block_cmpct.h	/^struct PrefilledTransaction $/;"	s
PrintException	util.cpp	/^void PrintException(std::exception* pex, const char* pszThread)$/;"	f
PrintExceptionContinue	util.cpp	/^void PrintExceptionContinue(std::exception* pex, const char* pszThread)$/;"	f
PrintHex	script.h	/^    void PrintHex() const$/;"	f	class:CScript
PrintWallet	wallet.cpp	/^void CWallet::PrintWallet(const CBlock& block)$/;"	f	class:CWallet
ProcessBlock	block.cpp	/^bool ProcessBlock(CNode* pfrom, CBlock* pblock)$/;"	f
ProcessBlockAvailability	chain.cpp	/^void ProcessBlockAvailability(int ifaceIndex, CNode *pfrom)$/;"	f
ProcessNewBlockHeaders	validation.cpp	/^bool ProcessNewBlockHeaders(CIface *iface, std::vector<CBlockHeader>& headers, CBlockIndex** ppindex)$/;"	f
ProcessValidateMatrixNotaryTx	matrix.cpp	/^bool ProcessValidateMatrixNotaryTx(CIface *iface, const CTransaction& tx)$/;"	f
PurgeActiveTx	txmempool.cpp	/^void CPool::PurgeActiveTx()$/;"	f	class:CPool
PurgeOverflowTx	txmempool.cpp	/^void CPool::PurgeOverflowTx()$/;"	f	class:CPool
PurgePendingTx	txmempool.cpp	/^void CPool::PurgePendingTx()$/;"	f	class:CPool
PushAddress	net.h	/^    void PushAddress(const CAddress& addr)$/;"	f	class:CNode
PushAll	script.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushAll	txsignature.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushBlockHash	net.h	/^		void PushBlockHash(const uint256 &hash)$/;"	f	class:CNode
PushInventory	net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8)$/;"	f	class:CNode
PushMessage	net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8, const T9& a9)$/;"	f	class:CNode
PushReject	net.h	/^		void PushReject(std::string mode, uint256 hash, int err_code, std::string err_text)$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand, const T1& a1, const T2& a2,$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand, const T1& a1,$/;"	f	class:CNode
PushRequest	net.h	/^    void PushRequest(const char* pszCommand,$/;"	f	class:CNode
READ_STATUS_CHECKBLOCK_FAILED	block_cmpct.h	/^    READ_STATUS_CHECKBLOCK_FAILED, \/\/ Used only by FillBlock to indicate a$/;"	e	enum:ReadStatus_t
READ_STATUS_FAILED	block_cmpct.h	/^    READ_STATUS_FAILED, \/\/ Failed to process object$/;"	e	enum:ReadStatus_t
READ_STATUS_INVALID	block_cmpct.h	/^    READ_STATUS_INVALID, \/\/ Invalid object, peer is sending bogus$/;"	e	enum:ReadStatus_t
READ_STATUS_OK	block_cmpct.h	/^    READ_STATUS_OK,$/;"	e	enum:ReadStatus_t
REJECT_CHECKPOINT	net.h	/^static const unsigned char REJECT_CHECKPOINT = 0x43;$/;"	v
REJECT_DUPLICATE	net.h	/^static const unsigned char REJECT_DUPLICATE = 0x12;$/;"	v
REJECT_INSUFFICIENTFEE	net.h	/^static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;$/;"	v
REJECT_INVALID	net.h	/^static const unsigned char REJECT_INVALID = 0x10;$/;"	v
REJECT_MALFORMED	net.h	/^static const unsigned char REJECT_MALFORMED = 0x01;$/;"	v
REJECT_NONSTANDARD	net.h	/^static const unsigned char REJECT_NONSTANDARD = 0x40;$/;"	v
REJECT_OBSOLETE	net.h	/^static const unsigned char REJECT_OBSOLETE = 0x11;$/;"	v
ROLLING_FEE_HALFLIFE	txfeerate.cpp	58;"	d	file:
ROTL32	bloom.cpp	/^inline uint32_t ROTL32 ( uint32_t x, int8_t r )$/;"	f
RaiseValidity	block.h	/^    bool RaiseValidity(int nUpTo)$/;"	f	class:CBlockIndex
RandAddSeed	util.cpp	/^void RandAddSeed()$/;"	f
Raw	hdkey.h	/^    cbuff Raw() const$/;"	f	class:HDPrivKey
Raw	key.h	/^		std::vector<unsigned char> Raw() const $/;"	f	class:CPubKey
Read	txidx.h	/^      bool Read(const K& key, T& value)$/;"	f	class:CDB
ReadAccount	walletdb.cpp	/^bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadArchTx	wallettx.cpp	/^bool CWallet::ReadArchTx(uint256 hash, CWalletTx& wtx) const$/;"	f	class:CWallet
ReadAtCursor	txidx.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)$/;"	f	class:CDB
ReadBestBlock	walletdb.h	/^    bool ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBestChain	global.cpp	/^uint256 ReadBestChain(CIface *iface)$/;"	f
ReadCScript	walletdb.h	/^    bool ReadCScript(const uint160 &hash, CScript& redeemScript)$/;"	f	class:CWalletDB
ReadCoins	coin.cpp	/^bool CTransaction::ReadCoins(int ifaceIndex, vector<uint256>& vOuts)$/;"	f	class:CTransaction
ReadDefaultKey	walletdb.h	/^    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)$/;"	f	class:CWalletDB
ReadDiskTx	txidx.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	txidx.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx)$/;"	f	class:CTxDB
ReadFromDisk	block.cpp	/^bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)$/;"	f	class:CBlock
ReadFromDisk	main.cpp	/^bool CTransaction::ReadFromDisk(int ifaceIndex, COutPoint prevout)$/;"	f	class:CTransaction
ReadGlobalVar	global.cpp	/^const char *ReadGlobalVar(char *tag, char *var)$/;"	f
ReadHashBestChain	coin.cpp	/^bool ReadHashBestChain(CIface *iface, uint256& ret_hash)$/;"	f
ReadHashBestChain	txidx.cpp	/^bool CTxDB::ReadHashBestChain(uint256& hashBestChain)$/;"	f	class:CTxDB
ReadKey	walletdb.h	/^    bool ReadKey(const CPubKey& vchPubKey, CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
ReadName	walletdb.h	/^    bool ReadName(const std::string& strAddress, std::string& strName)$/;"	f	class:CWalletDB
ReadSetting	walletdb.h	/^    bool ReadSetting(const std::string& strKey, T& value)$/;"	f	class:CWalletDB
ReadStatus	block_cmpct.h	/^} ReadStatus;$/;"	t	typeref:enum:ReadStatus_t
ReadStatus_t	block_cmpct.h	/^typedef enum ReadStatus_t$/;"	g
ReadTx	block.cpp	/^bool CTransaction::ReadTx(int ifaceIndex, uint256 txHash)$/;"	f	class:CTransaction
ReadTx	block.cpp	/^bool CTransaction::ReadTx(int ifaceIndex, uint256 txHash, uint256 *hashBlock)$/;"	f	class:CTransaction
ReadTx	walletdb.h	/^    bool ReadTx(uint256 hash, CWalletTx& wtx)$/;"	f	class:CWalletDB
ReadTxIndex	txidx.cpp	/^bool CTxDB::ReadTxIndex(uint256 hash, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadVersion	global.cpp	/^int ReadVersion(CIface *iface)$/;"	f
ReadVersion	txidx.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReceiveBufferSize	net.h	/^inline unsigned int ReceiveBufferSize() { return 1000*GetArg("-maxreceivebuffer", 5*1000); }$/;"	f
Record	txfeerate.cpp	/^void TxConfirmStats::Record(int blocksToConfirm, double val)$/;"	f	class:TxConfirmStats
RefillInputs	txmempool.cpp	/^bool CPool::RefillInputs(CPoolTx& ptx)$/;"	f	class:CPool
RelayInventory	net.h	/^inline void RelayInventory(const CInv& inv)$/;"	f
RelayMessage	net.h	/^inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)$/;"	f
RelayMessage	net.h	/^void RelayMessage(const CInv& inv, const T& a)$/;"	f
RelayTransaction	wallet.cpp	/^void RelayTransaction(int ifaceIndex, const CTransaction& tx, const uint256& hash)$/;"	f
RelayValidateMatrixNotaryTx	matrix.cpp	/^bool RelayValidateMatrixNotaryTx(CIface *iface, const CTransaction& txMatrix, CTransaction *txIn)$/;"	f
Release	net.h	/^    void Release()$/;"	f	class:CNode
RemoveAlias	block.cpp	/^CAlias *CTransaction::RemoveAlias(std::string name)$/;"	f	class:CTransaction
RemoveAsset	block.cpp	/^CAsset *CTransaction::RemoveAsset(const CAsset& assetIn)$/;"	f	class:CTransaction
RemoveBloomFilter	net.h	/^    void RemoveBloomFilter()$/;"	f	class:CNode
RemoveCheckpoint	checkpoints.cpp	/^bool CCheckpoints::RemoveCheckpoint(int nHeight)$/;"	f	class:CCheckpoints
RemoveOffer	block.cpp	/^COffer *CTransaction::RemoveOffer(uint160 hashOffer)$/;"	f	class:CTransaction
RemoveSolverDropPrefix	script.cpp	/^static bool RemoveSolverDropPrefix(const CScript& script, CScript::const_iterator& pc1, opcodetype& opcode1, cbuff& vch1)$/;"	f	file:
RemoveTx	txmempool.cpp	/^bool CPool::RemoveTx(const uint256& hash)$/;"	f	class:CPool
RemoveTx	txmempool.h	/^    bool RemoveTx(CTransaction &tx)$/;"	f	class:CPool
RemoveTx	wallettx.cpp	/^void CWallet::RemoveTx(uint256 hash)$/;"	f	class:CWallet
RemoveTxWithInput	txmempool.cpp	/^void CPool::RemoveTxWithInput(const CTxIn& txin)$/;"	f	class:CPool
RenameOver	util.cpp	/^bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)$/;"	f
RenameThread	util.cpp	/^void RenameThread(const char* name)$/;"	f
Reset	key.h	/^		void Reset()$/;"	f	class:CKey
ResetAddr	account.cpp	/^void CAccountCache::ResetAddr(int type)$/;"	f	class:CAccountCache
ResetNotorizedBlock	checkpoints.cpp	/^void CCheckpoints::ResetNotorizedBlock()$/;"	f	class:CCheckpoints
ResetServiceValidateEvent	chain.cpp	/^void ResetServiceValidateEvent(CWallet *wallet)$/;"	f
ResetServiceWalletEvent	chain.cpp	/^void ResetServiceWalletEvent(CWallet *wallet)$/;"	f
ResolveConflicts	txmempool.cpp	/^bool CPool::ResolveConflicts(CPoolTx& ptx)$/;"	f	class:CPool
Retract	matrix.cpp	/^void CTxMatrix::Retract(int heightIn, uint256 hash)$/;"	f	class:CTxMatrix
Rewrite	txidx.cpp	/^bool CDB::Rewrite(const string& strFile, const char* pszSkip)$/;"	f	class:CDB
SCRIPT_ADDRESS	coinaddr.h	/^			SCRIPT_ADDRESS = 5,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_ADDRESS_2	coinaddr.h	/^			SCRIPT_ADDRESS_2 = 50,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_ADDRESS_2G	coinaddr.h	/^			SCRIPT_ADDRESS_2G = 55,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_ADDRESS_2S	coinaddr.h	/^			SCRIPT_ADDRESS_2S = 25,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY	script.h	/^  SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),$/;"	e	enum:__anon6
SCRIPT_VERIFY_CHECKSEQUENCEVERIFY	script.h	/^  SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),$/;"	e	enum:__anon6
SCRIPT_VERIFY_CLEANSTACK	script.h	/^  SCRIPT_VERIFY_CLEANSTACK = (1U << 8),$/;"	e	enum:__anon6
SCRIPT_VERIFY_DERSIG	script.h	/^  SCRIPT_VERIFY_DERSIG    = (1U << 2),$/;"	e	enum:__anon6
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS	script.h	/^  SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),$/;"	e	enum:__anon6
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	script.h	/^  SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),$/;"	e	enum:__anon6
SCRIPT_VERIFY_LOW_S	script.h	/^  SCRIPT_VERIFY_LOW_S     = (1U << 3),$/;"	e	enum:__anon6
SCRIPT_VERIFY_MINIMALDATA	script.h	/^  SCRIPT_VERIFY_MINIMALDATA = (1U << 6),$/;"	e	enum:__anon6
SCRIPT_VERIFY_MINIMALIF	script.h	/^  SCRIPT_VERIFY_MINIMALIF = (1U << 13),$/;"	e	enum:__anon6
SCRIPT_VERIFY_NONE	script.h	/^  SCRIPT_VERIFY_NONE      = 0,$/;"	e	enum:__anon6
SCRIPT_VERIFY_NULLDUMMY	script.h	/^  SCRIPT_VERIFY_NULLDUMMY = (1U << 4),$/;"	e	enum:__anon6
SCRIPT_VERIFY_NULLFAIL	script.h	/^  SCRIPT_VERIFY_NULLFAIL = (1U << 14),$/;"	e	enum:__anon6
SCRIPT_VERIFY_P2SH	script.h	/^  SCRIPT_VERIFY_P2SH      = (1U << 0),$/;"	e	enum:__anon6
SCRIPT_VERIFY_SIGPUSHONLY	script.h	/^  SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),$/;"	e	enum:__anon6
SCRIPT_VERIFY_STRICTENC	script.h	/^  SCRIPT_VERIFY_STRICTENC = (1U << 1),$/;"	e	enum:__anon6
SCRIPT_VERIFY_WITNESS	script.h	/^  SCRIPT_VERIFY_WITNESS = (1U << 11),$/;"	e	enum:__anon6
SCRIPT_VERIFY_WITNESS_PUBKEYTYPE	script.h	/^  SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),$/;"	e	enum:__anon6
SECP256K1_SIGN_CONTEXT	eckey.cpp	/^secp256k1_context *SECP256K1_SIGN_CONTEXT(void)$/;"	f
SECP256K1_VERIFY_CONTEXT	eckey.cpp	/^secp256k1_context *SECP256K1_VERIFY_CONTEXT(void)$/;"	f
SEQUENCE_FINAL	block.h	/^		static const uint32_t SEQUENCE_FINAL = 0xffffffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_DISABLE_FLAG	block.h	/^		static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_GRANULARITY	block.h	/^		static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_MASK	block.h	/^		static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_TYPE_FLAG	block.h	/^		static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);$/;"	m	class:CTxIn
SERIALIZE_TRANSACTION_NO_WITNESS	block.h	445;"	d
SERIALIZE_TRANSACTION_NO_WITNESS	net.h	55;"	d
SERVER__MAIN_H	main.h	37;"	d
SHA256Transform	main.cpp	/^void SHA256Transform(void* pstate, void* pinput, const void* pinit)$/;"	f
SHAlias	shlib.h	/^typedef shref_t SHAlias;$/;"	t
SHAsset	shlib.h	/^typedef shasset_t SHAsset;$/;"	t
SHCCoinAddr	coinaddr.h	/^    SHCCoinAddr() : CCoinAddr(SHC_COIN_IFACE)$/;"	f	class:SHCCoinAddr
SHCCoinAddr	coinaddr.h	/^    SHCCoinAddr(const CTxDestination &dest) : CCoinAddr(SHC_COIN_IFACE)$/;"	f	class:SHCCoinAddr
SHCCoinAddr	coinaddr.h	/^    SHCCoinAddr(const std::string& strAddress) : CCoinAddr(SHC_COIN_IFACE)$/;"	f	class:SHCCoinAddr
SHCCoinAddr	coinaddr.h	/^class SHCCoinAddr : public CCoinAddr$/;"	c
SHCert	shlib.h	/^typedef shesig_t SHCert;$/;"	t
SHLicense	shlib.h	/^typedef shlic_t SHLicense;$/;"	t
SHORTTXIDS_LENGTH	block_cmpct.h	/^		static const int SHORTTXIDS_LENGTH = 6;$/;"	m	class:CBlockHeaderAndShortTxIDs
SHPeer	shlib.h	/^    SHPeer()$/;"	f	class:SHPeer
SHPeer	shlib.h	/^    SHPeer(shpeer_t *peerIn)$/;"	f	class:SHPeer
SHPeer	shlib.h	/^class SHPeer$/;"	c
SHSig	shlib.h	/^    SHSig()$/;"	f	class:SHSig
SHSig	shlib.h	/^    SHSig(shsig_t *sigIn)$/;"	f	class:SHSig
SHSig	shlib.h	/^class SHSig$/;"	c
SIGHASH_ALL	txsignature.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon7
SIGHASH_ANYONECANPAY	txsignature.h	/^    SIGHASH_ANYONECANPAY = 0x80$/;"	e	enum:__anon7
SIGHASH_HDKEY	txsignature.h	/^    SIGHASH_HDKEY = 0x40,$/;"	e	enum:__anon7
SIGHASH_NONE	txsignature.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon7
SIGHASH_SINGLE	txsignature.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon7
SIGN_ALG_DILITHIUM	key.h	41;"	d
SIGN_ALG_ECDSA	key.h	40;"	d
SIGN_ALG_NONE	key.h	39;"	d
SIGVERSION_BASE	txsignature.h	/^  SIGVERSION_BASE = 0,$/;"	e	enum:__anon8
SIGVERSION_WITNESS_V0	txsignature.h	/^  SIGVERSION_WITNESS_V0 = 1,$/;"	e	enum:__anon8
SIGVERSION_WITNESS_V14	txsignature.h	/^  SIGVERSION_WITNESS_V14 = 15$/;"	e	enum:__anon8
SIP33Hash	dikey.cpp	/^static void SIP33Hash(const ChainCode &chainCode, unsigned int nChild, uint16_t header, uint8_t *data, size_t data_len, unsigned char *output\/*[128]*\/)$/;"	f	file:
SIP33_EXTKEY_SIZE	dikey.cpp	35;"	d	file:
SPRING_OFFSET_LATITUDE	spring.h	52;"	d
SPRING_OFFSET_LONGITUDE	spring.h	57;"	d
SPRING_X_FACTOR	spring.h	61;"	d
SPRING_Y_FACTOR	spring.h	59;"	d
STANDARD_LOCKTIME_VERIFY_FLAGS	block.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	coin.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS =$/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	txmempool.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	validation.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	wallet.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STRINGIFY	version.cpp	72;"	d	file:
SUFFICIENT_FEETXS	txfeerate.h	/^static const double SUFFICIENT_FEETXS = 1;$/;"	v
SUFFICIENT_PRITXS	txfeerate.h	/^static const double SUFFICIENT_PRITXS = .2;$/;"	v
SaveExternalBlockchainFile	chain.cpp	/^bool SaveExternalBlockchainFile()$/;"	f
ScanForWalletTransaction	wallet.cpp	/^int CWallet::ScanForWalletTransaction(const uint256& hashTx)$/;"	f	class:CWallet
ScanHash_CryptoPP	main.cpp	/^unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)$/;"	f	file:
ScriptMap	keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptSigArgsExpected	script.cpp	/^int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)$/;"	f
SelectAccountCoins	wallet.cpp	/^bool CWallet::SelectAccountCoins(string strAccount, int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet, uint160 hColor) const$/;"	f	class:CWallet
SelectCoins	wallet.cpp	/^bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet)$/;"	f	class:CWallet
SelectCoinsMinConf	wallet.cpp	/^bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const$/;"	f	class:CWallet
SelectCoins_Avg	wallet.cpp	/^bool SelectCoins_Avg(int64 nTargetValue, vector<COutput>& vCoins, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet)$/;"	f
Send	txcreator.cpp	/^bool CTxBatchCreator::Send()$/;"	f	class:CTxBatchCreator
Send	txcreator.cpp	/^bool CTxCreator::Send()$/;"	f	class:CTxCreator
SendBufferSize	net.h	/^inline unsigned int SendBufferSize() { return 1000*GetArg("-maxsendbuffer", 1*1000); }$/;"	f
SendRemitMoneyTx	wallet.cpp	/^bool SendRemitMoneyTx(CIface *iface, const CCoinAddr& addrFrom, CWalletTx *wtxIn, CWalletTx& wtxNew, vector<pair<CScript, int64> >& vecSend, CScript scriptPubKey)$/;"	f
SequenceLocks	block.cpp	/^bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
SerializationOp	block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactions
SerializationOp	block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactionsRequest
SerializationOp	block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeaderAndShortTxIDs
SerializationOp	block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:TransactionCompressor
SerializationOp	block_cmpct.h	/^		inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:PrefilledTransaction
SerializeHash	util.h	/^uint256 SerializeHash(const T& obj, int nVersion = 1)$/;"	f
ServiceBlockEvent	chain.cpp	/^bool ServiceBlockEvent(int ifaceIndex)$/;"	f
ServiceBlockEventUpdate	chain.cpp	/^void ServiceBlockEventUpdate(int ifaceIndex)$/;"	f
ServiceBlockGetDataEvent	chain.cpp	/^bool ServiceBlockGetDataEvent(CWallet *wallet, CBlockIndex* pindexBest, CNode *pfrom)$/;"	f
ServiceBlockHeadersEvent	chain.cpp	/^bool ServiceBlockHeadersEvent(CWallet *wallet, CBlockIndex *pindexBest, CNode *pfrom)$/;"	f
ServiceEventState	chain.cpp	/^void ServiceEventState(int ifaceIndex)$/;"	f
ServicePeerEvent	chain.cpp	/^bool ServicePeerEvent(int ifaceIndex)$/;"	f
ServiceValidateEvent	chain.cpp	/^static bool ServiceValidateEvent(int ifaceIndex)$/;"	f	file:
ServiceWalletEvent	chain.cpp	/^static bool ServiceWalletEvent(int ifaceIndex)$/;"	f	file:
ServiceWalletEventUpdate	chain.cpp	/^void ServiceWalletEventUpdate(CWallet *wallet, const CBlock *pblock)$/;"	f
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const CKeyID &id) $/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const CScriptID &id) $/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const CTxDestination &dest)$/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessUnknown& id)$/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV0KeyHash& id)$/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV0ScriptHash& id)$/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV14KeyHash& id)$/;"	f	class:CCoinAddr
Set	coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV14ScriptHash& id)$/;"	f	class:CCoinAddr
SetAccount	txcreator.cpp	/^void CTxCreator::SetAccount(string strAccountIn)$/;"	f	class:CTxCreator
SetAddr	account.cpp	/^void CAccountCache::SetAddr(int type, CCoinAddr addr)$/;"	f	class:CAccountCache
SetAddrDestinations	account.cpp	/^void CAccountCache::SetAddrDestinations(const CKeyID& keyid)$/;"	f	class:CAccountCache
SetAddressBookName	wallet.cpp	/^bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)$/;"	f	class:CWallet
SetBestBlockIndex	block.cpp	/^void SetBestBlockIndex(CIface *iface, CBlockIndex *pindex)$/;"	f
SetBestBlockIndex	block.cpp	/^void SetBestBlockIndex(int ifaceIndex, CBlockIndex *pindex)$/;"	f
SetBestChain	wallet.cpp	/^void CWallet::SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBloomFilter	net.h	/^    void SetBloomFilter(CBloomFilter& filterIn)$/;"	f	class:CNode
SetCell	matrix.h	/^		void SetCell(int row, int col, unsigned int val)$/;"	f	class:CTxMatrix
SetCellsNull	matrix.h	/^		void SetCellsNull()$/;"	f	class:CTxMatrix
SetCertHash	account.cpp	/^bool CAccountCache::SetCertHash(const uint160& hCert)$/;"	f	class:CAccountCache
SetChain	hdkey.cpp	/^bool HDPrivKey::SetChain(cbuff vchChainIn)$/;"	f	class:HDPrivKey
SetChain	hdkey.cpp	/^bool HDPrivKey::SetChain(string hexChain)$/;"	f	class:HDPrivKey
SetChangeAddr	txcreator.cpp	/^bool CTxCreator::SetChangeAddr(const CPubKey& scriptPubKey)$/;"	f	class:CTxCreator
SetColor	txmempool.h	/^		void SetColor(const uint160& hColorIn)$/;"	f	class:CPoolTx
SetColor	wallet.h	/^			 void SetColor(uint160 hColorIn)$/;"	f	class:CWalletTx
SetCompactSignature	dikey.cpp	/^bool DIKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
SetCompactSignature	eckey.cpp	/^bool ECKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
SetCompactSignature	hdkey.cpp	/^bool HDPrivKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
SetCompressedPubKey	key.h	/^    void SetCompressedPubKey()$/;"	f	class:CKey
SetData	base58.h	/^		void SetData(const cbuff& vchVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	base58.h	/^		void SetData(const cbuff& vchVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetData	base58.h	/^		void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	base58.h	/^		void SetData(int nVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDefaultAddr	account.cpp	/^void CAccountCache::SetDefaultAddr(const CPubKey& pubkey)$/;"	f	class:CAccountCache
SetDefaultKey	wallet.cpp	/^bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)$/;"	f	class:CWallet
SetDestination	script.cpp	/^void CScript::SetDestination(const CTxDestination& dest)$/;"	f	class:CScript
SetDetach	txidx.h	/^    void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }$/;"	f	class:CDBEnv
SetFlag	block.h	/^		void SetFlag(unsigned int flag)$/;"	f	class:CTransactionCore
SetFlag	txmempool.h	/^    void SetFlag(int flag)$/;"	f	class:CPoolTx
SetKey	crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKeyFromPassphrase	crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLimits	txcreator.cpp	/^void CTxBatchCreator::SetLimits()$/;"	f	class:CTxBatchCreator
SetLockHeight	txcreator.cpp	/^bool CTxCreator::SetLockHeight(uint32_t nHeight)$/;"	f	class:CTxCreator
SetLockHeightSpan	txcreator.cpp	/^bool CTxCreator::SetLockHeightSpan(int nIn, uint32_t nHeight)$/;"	f	class:CTxCreator
SetLockTime	txcreator.cpp	/^bool CTxCreator::SetLockTime(time_t t)$/;"	f	class:CTxCreator
SetLockTimeSpan	txcreator.cpp	/^bool CTxCreator::SetLockTimeSpan(int nIn, time_t t)$/;"	f	class:CTxCreator
SetMaster	dikey.cpp	/^void DIExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) $/;"	f	class:DIExtKey
SetMaster	eckey.cpp	/^void ECExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) $/;"	f	class:ECExtKey
SetMerkleBranch	wallet.cpp	/^int CMerkleTx::SetMerkleBranch(const CBlock* pblock)$/;"	f	class:CMerkleTx
SetMerkleBranch	wallet.cpp	/^int CMerkleTx::SetMerkleBranch(int ifaceIndex)$/;"	f	class:CMerkleTx
SetMinFee	txcreator.cpp	/^void CTxCreator::SetMinFee(int64 nMinFeeIn)$/;"	f	class:CTxCreator
SetMinFee	txcreator.h	/^		void SetMinFee(int64 nFee)$/;"	f	class:CTxBatchCreator
SetMockTime	util.cpp	/^void SetMockTime(int64 nMockTimeIn)$/;"	f
SetMultisig	script.cpp	/^void CScript::SetMultisig(int nRequired, const std::vector<ECKey>& keys)$/;"	f	class:CScript
SetNoDestination	script.cpp	/^void CScript::SetNoDestination()$/;"	f	class:CScript
SetNull	account.h	/^			void SetNull() $/;"	f	class:CAccountCache
SetNull	block.h	/^			void SetNull()$/;"	f	class:CTxOut
SetNull	block.h	/^		void SetNull()$/;"	f	class:CBlockLocator
SetNull	block.h	/^    void SetNull() { hash = 0; n = (unsigned int) -1; }$/;"	f	class:COutPoint
SetNull	block.h	/^    void SetNull() { nFile = (unsigned int) -1; nBlockPos = 0; nTxPos = 0; }$/;"	f	class:CDiskTxPos
SetNull	block.h	/^    void SetNull() { ptx = NULL; n = (unsigned int) -1; }$/;"	f	class:CInPoint
SetNull	block.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	block.h	/^    void SetNull()$/;"	f	class:CBlockHeader
SetNull	block.h	/^    void SetNull()$/;"	f	class:CTransaction
SetNull	block.h	/^    void SetNull()$/;"	f	class:CTransactionCore
SetNull	block.h	/^    void SetNull()$/;"	f	class:CTxIndex
SetNull	block.h	/^    void SetNull()$/;"	f	class:CTxWitness
SetNull	coinaddr.h	/^		void SetNull()$/;"	f	class:CCoinAddr
SetNull	hdkey.h	/^    void SetNull()$/;"	f	class:HDMasterPrivKey
SetNull	hdkey.h	/^    void SetNull()$/;"	f	class:HDPrivKey
SetNull	hdkey.h	/^    void SetNull()$/;"	f	class:HDPubKey
SetNull	key.h	/^		void SetNull()$/;"	f	class:CKeyMetadata
SetNull	key.h	/^		void SetNull()$/;"	f	class:CPubKey
SetNull	key.h	/^    void SetNull()$/;"	f	class:CKey
SetNull	matrix.h	/^		void SetNull()$/;"	f	class:CTxMatrix
SetNull	shlib.h	/^    void SetNull()$/;"	f	class:SHPeer
SetNull	shlib.h	/^    void SetNull()$/;"	f	class:SHSig
SetNull	txcreator.h	/^    void SetNull()$/;"	f	class:CTxBatchCreator
SetNull	txmempool.h	/^    void SetNull()$/;"	f	class:CPoolTx
SetNull	wallet.h	/^		void SetNull()$/;"	f	class:CAccount
SetNull	wallet.h	/^		void SetNull()$/;"	f	class:CAccountingEntry
SetPrivKey	dikey.cpp	/^bool DIKey::SetPrivKey(const CPrivKey& vchPrivKey, bool fCompressed)$/;"	f	class:DIKey
SetPrivKey	eckey.cpp	/^bool ECKey::SetPrivKey(const CPrivKey& vchPrivKey, bool fCompressed)$/;"	f	class:ECKey
SetPubKey	dikey.cpp	/^bool DIKey::SetPubKey(const CPubKey& vchPubKey)$/;"	f	class:DIKey
SetPubKey	eckey.cpp	/^bool ECKey::SetPubKey(const CPubKey& vchPubKey)$/;"	f	class:ECKey
SetScript	coinaddr.cpp	/^bool CCoinAddr::SetScript(const CScript& script)$/;"	f	class:CCoinAddr
SetSecret	base58.h	/^		void SetSecret(int ifaceIndex, const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CCoinSecret
SetSecret	dikey.cpp	/^bool DIKey::SetSecret(const CSecret& vchSecret)$/;"	f	class:DIKey
SetSecret	dikey.h	/^    bool SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:DIKey
SetSecret	eckey.cpp	/^bool ECKey::SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:ECKey
SetSeed	hdkey.cpp	/^bool HDPrivKey::SetSeed(cbuff seed)$/;"	f	class:HDPrivKey
SetSeed	hdkey.h	/^    bool SetSeed(CSecret seed)$/;"	f	class:HDPrivKey
SetString	base58.cpp	/^bool CBase58Data::SetString(const char *psz, size_t nVersionSize)$/;"	f	class:CBase58Data
SetString	base58.cpp	/^bool CCoinSecret::SetString(const char* pszSecret)$/;"	f	class:CCoinSecret
SetString	base58.cpp	/^bool CCoinSecret::SetString(const std::string& strSecret)$/;"	f	class:CCoinSecret
SetString	base58.h	/^		bool SetString(const std::string& str, size_t nVersionSize = 1)$/;"	f	class:CBase58Data
SetString	coinaddr.cpp	/^bool CCoinAddr::SetString(const std::string& str)$/;"	f	class:CCoinAddr
SetType	matrix.h	/^		void SetType(int nTypeIn)$/;"	f	class:CTxMatrix
SetVersion	block.h	/^		void SetVersion(int ver)$/;"	f	class:CTransactionCore
SetWallet	wallet.cpp	/^void SetWallet(CIface *iface, CWallet *wallet)$/;"	f
SetWallet	wallet.cpp	/^void SetWallet(int iface_idx, CWallet *wallet)$/;"	f
Sign	dikey.cpp	/^bool DIKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
Sign	eckey.cpp	/^bool ECKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
Sign	hdkey.cpp	/^bool HDPrivKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
Sign1	script.cpp	/^bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
Sign1	txsignature.cpp	/^static bool Sign1(CSignature *sig, const CKeyID& address, const CScript& scriptCode, cstack_t& ret, int sigversion)$/;"	f	file:
SignAddress	txsignature.cpp	/^bool CSignature::SignAddress(const CScript& scriptPubKey, cstack_t& ret, txnouttype& whichTypeRet, int sigversion)$/;"	f	class:CSignature
SignCompact	dikey.cpp	/^bool DIKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
SignCompact	eckey.cpp	/^bool ECKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
SignCompact	hdkey.cpp	/^bool HDPrivKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
SignN	script.cpp	/^bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
SignN	txsignature.cpp	/^static bool SignN(CSignature *sig, const vector<valtype>& multisigdata, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)$/;"	f	file:
SignSignature	txsignature.cpp	/^bool CSignature::SignSignature(const CScript& fromPubKey)$/;"	f	class:CSignature
SignSignature	txsignature.cpp	/^bool CSignature::SignSignature(const CTransaction& txFrom)$/;"	f	class:CSignature
SignatureHash	txsignature.cpp	/^bool CSignature::SignatureHash(CScript scriptCode, int sigver, uint256& hashRet)$/;"	f	class:CSignature
SoftSetArg	util.cpp	/^bool SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
SoftSetBoolArg	util.cpp	/^bool SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f
Solver	script.cpp	/^bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f
SolverCheckAltProof	script.cpp	/^static bool SolverCheckAltProof(CScript& script, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f	file:
StackString	script.h	/^inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)$/;"	f
SubCell	matrix.h	/^		void SubCell(int row, int col, unsigned int val)$/;"	f	class:CTxMatrix
SyncWithWallets	wallet.cpp	/^bool SyncWithWallets(CIface *iface, CTransaction& tx, CBlock *pblock)$/;"	f
TERM_SECP256K1	eckey.cpp	/^void TERM_SECP256K1(void)$/;"	f
THREAD_ADDEDCONNECTIONS	net.h	/^    THREAD_ADDEDCONNECTIONS,$/;"	e	enum:threadId
THREAD_DNSSEED	net.h	/^    THREAD_DNSSEED,$/;"	e	enum:threadId
THREAD_DUMPADDRESS	net.h	/^    THREAD_DUMPADDRESS,$/;"	e	enum:threadId
THREAD_MAX	net.h	/^    THREAD_MAX$/;"	e	enum:threadId
THREAD_MESSAGEHANDLER	net.h	/^    THREAD_MESSAGEHANDLER,$/;"	e	enum:threadId
THREAD_MINER	net.h	/^    THREAD_MINER,$/;"	e	enum:threadId
THREAD_OPENCONNECTIONS	net.h	/^    THREAD_OPENCONNECTIONS,$/;"	e	enum:threadId
THREAD_RPCHANDLER	net.h	/^    THREAD_RPCHANDLER,$/;"	e	enum:threadId
THREAD_RPCLISTENER	net.h	/^    THREAD_RPCLISTENER,$/;"	e	enum:threadId
THREAD_SOCKETHANDLER	net.h	/^    THREAD_SOCKETHANDLER,$/;"	e	enum:threadId
THREAD_UPNP	net.h	/^    THREAD_UPNP,$/;"	e	enum:threadId
THRESHOLD_ACTIVE	versionbits.h	/^    THRESHOLD_ACTIVE,$/;"	e	enum:ThresholdState
THRESHOLD_DEFINED	versionbits.h	/^    THRESHOLD_DEFINED,$/;"	e	enum:ThresholdState
THRESHOLD_FAILED	versionbits.h	/^    THRESHOLD_FAILED,$/;"	e	enum:ThresholdState
THRESHOLD_LOCKED_IN	versionbits.h	/^    THRESHOLD_LOCKED_IN,$/;"	e	enum:ThresholdState
THRESHOLD_STARTED	versionbits.h	/^    THRESHOLD_STARTED,$/;"	e	enum:ThresholdState
TXF_ALIAS	block.h	/^    static const int TXF_ALIAS = (1 << 6);$/;"	m	class:CTransactionCore
TXF_ALTCHAIN	block.h	/^    static const int TXF_ALTCHAIN = (1 << 15);$/;"	m	class:CTransactionCore
TXF_ASSET	block.h	/^    static const int TXF_ASSET = (1 << 9);$/;"	m	class:CTransactionCore
TXF_CERTIFICATE	block.h	/^    static const int TXF_CERTIFICATE = (1 << 4);$/;"	m	class:CTransactionCore
TXF_CONTEXT	block.h	/^    static const int TXF_CONTEXT = (1 << 14);$/;"	m	class:CTransactionCore
TXF_EXEC	block.h	/^    static const int TXF_EXEC = (1 << 13);$/;"	m	class:CTransactionCore
TXF_IDENT	block.h	/^    static const int TXF_IDENT = (1 << 10);$/;"	m	class:CTransactionCore
TXF_LICENSE	block.h	/^    static const int TXF_LICENSE = (1 << 5);$/;"	m	class:CTransactionCore
TXF_MATRIX	block.h	/^    static const int TXF_MATRIX = (1 << 11);$/;"	m	class:CTransactionCore
TXF_OFFER	block.h	/^    static const int TXF_OFFER = (1 << 7);$/;"	m	class:CTransactionCore
TXF_PARAM	block.h	/^    static const int TXF_PARAM = (1 << 8);$/;"	m	class:CTransactionCore
TXF_RESERVED_0	block.h	/^    static const int TXF_RESERVED_0 = (1 << 2);$/;"	m	class:CTransactionCore
TXF_RESERVED_1	block.h	/^    static const int TXF_RESERVED_1 = (1 << 3);$/;"	m	class:CTransactionCore
TXF_VERSION	block.h	/^    static const int TXF_VERSION = (1 << 0);$/;"	m	class:CTransactionCore
TXF_VERSION_2	block.h	/^    static const int TXF_VERSION_2 = (1 << 1);$/;"	m	class:CTransactionCore
TX_MULTISIG	script.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	script.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_PUBKEY	script.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	script.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_RETURN	script.h	/^    TX_RETURN,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	script.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_VERSION	block.h	442;"	d
TX_VERSION_2	block.h	443;"	d
TX_WITNESS_UNKNOWN	script.h	/^    TX_WITNESS_UNKNOWN,$/;"	e	enum:txnouttype
TX_WITNESS_V0_KEYHASH	script.h	/^    TX_WITNESS_V0_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V0_SCRIPTHASH	script.h	/^    TX_WITNESS_V0_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V14_KEYHASH	script.h	/^    TX_WITNESS_V14_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V14_SCRIPTHASH	script.h	/^    TX_WITNESS_V14_SCRIPTHASH,$/;"	e	enum:txnouttype
Threshold	versionbits.cpp	/^      int Threshold(CIface * params) const { return params->nRuleChangeActivationThreshold; }$/;"	f	class:__anon9::VersionBitsConditionChecker
ThresholdConditionCache	versionbits.h	/^typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;$/;"	t
ThresholdState	versionbits.h	/^enum ThresholdState {$/;"	g
ToByteVector	coinaddr.cpp	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToByteVector	script.cpp	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToByteVector	txsignature.cpp	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToString	base58.cpp	/^std::string CBase58Data::ToString(int output_type) const$/;"	f	class:CBase58Data
ToString	block.cpp	/^std::string CBlock::ToString(bool fVerbose)$/;"	f	class:CBlock
ToString	block.cpp	/^std::string CBlockHeader::ToString()$/;"	f	class:CBlockHeader
ToString	block.cpp	/^std::string CTransaction::ToString(int ifaceIndex)$/;"	f	class:CTransaction
ToString	block.cpp	/^std::string CTransactionCore::ToString(int ifaceIndex)$/;"	f	class:CTransactionCore
ToString	block.cpp	/^std::string CTxOut::ToString(int ifaceIndex)$/;"	f	class:CTxOut
ToString	block.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	block.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	block.h	/^    std::string ToString() const$/;"	f	class:CDiskTxPos
ToString	block.h	/^    std::string ToString() const$/;"	f	class:COutPoint
ToString	block.h	/^    std::string ToString() const$/;"	f	class:CTxIn
ToString	bloom.cpp	/^std::string CBloomFilter::ToString()$/;"	f	class:CBloomFilter
ToString	coinaddr.cpp	/^std::string CCoinAddr::ToString() const$/;"	f	class:CCoinAddr
ToString	hdkey.cpp	/^std::string HDPrivKey::ToString()$/;"	f	class:HDPrivKey
ToString	hdkey.cpp	/^std::string HDPubKey::ToString()$/;"	f	class:HDPubKey
ToString	matrix.cpp	/^std::string CTxMatrix::ToString()$/;"	f	class:CTxMatrix
ToString	protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	script.h	/^    std::string ToString() const$/;"	f	class:CScript
ToString	txfeerate.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	wallet.h	/^		std::string ToString() const$/;"	f	class:COutput
ToValue	block.cpp	/^Object CBlock::ToValue(bool fVerbose)$/;"	f	class:CBlock
ToValue	block.cpp	/^Object CBlockHeader::ToValue()$/;"	f	class:CBlockHeader
ToValue	block.cpp	/^Object CTransaction::ToValue(CBlock *pblock)$/;"	f	class:CTransaction
ToValue	block.cpp	/^Object CTransaction::ToValue(int ifaceIndex)$/;"	f	class:CTransaction
ToValue	block.cpp	/^Object CTransactionCore::ToValue(int ifaceIndex)$/;"	f	class:CTransactionCore
ToValue	block.cpp	/^Object CTxOut::ToValue(int ifaceIndex)$/;"	f	class:CTxOut
ToValue	hdkey.cpp	/^Object HDPrivKey::ToValue()$/;"	f	class:HDPrivKey
ToValue	hdkey.cpp	/^Object HDPubKey::ToValue()$/;"	f	class:HDPubKey
ToValue	matrix.cpp	/^Object CTxMatrix::ToValue()$/;"	f	class:CTxMatrix
ToValue_date_format	block.cpp	/^string ToValue_date_format(time_t t)$/;"	f
TransactionCompressor	block_cmpct.h	/^		explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}$/;"	f	struct:TransactionCompressor
TransactionCompressor	block_cmpct.h	/^struct TransactionCompressor $/;"	s
TransferExec	block.cpp	/^CExec *CTransaction::TransferExec(const CExec& execIn)$/;"	f	class:CTransaction
TraverseAndBuild	bloom.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) $/;"	f	class:CPartialMerkleTree
TraverseAndExtract	bloom.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch) {$/;"	f	class:CPartialMerkleTree
TxConfirmStats	txfeerate.h	/^class TxConfirmStats$/;"	c
TxStatsInfo	txfeerate.h	/^        TxStatsInfo() : stats(NULL), blockHeight(0), bucketIndex(0) {}$/;"	f	struct:CBlockPolicyEstimator::TxStatsInfo
TxStatsInfo	txfeerate.h	/^    struct TxStatsInfo$/;"	s	class:CBlockPolicyEstimator
TxnAbort	txidx.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnBegin	txidx.h	/^    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)$/;"	f	class:CDBEnv
TxnBegin	txidx.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnCommit	txidx.h	/^    bool TxnCommit()$/;"	f	class:CDB
UNLIKELY_PCT	txfeerate.h	/^static const double UNLIKELY_PCT = .5;$/;"	v
UnsetFlag	txmempool.h	/^    void UnsetFlag(int flag)$/;"	f	class:CPoolTx
UpdateAccount	account.cpp	/^void CAccountCache::UpdateAccount()$/;"	f	class:CAccountCache
UpdateAlias	block.cpp	/^CAlias *CTransaction::UpdateAlias(std::string name, const uint160& hash)$/;"	f	class:CTransaction
UpdateAsset	block.cpp	/^CAsset *CTransaction::UpdateAsset(const CAsset& assetIn, string strAssetName, string strAssetHash)$/;"	f	class:CTransaction
UpdateBlockAvailability	chain.cpp	/^void UpdateBlockAvailability(int ifaceIndex, CNode *pfrom, const uint256& hash)$/;"	f
UpdateBlockCoins	coin.cpp	/^bool UpdateBlockCoins(CBlock& block)$/;"	f
UpdateEmptyFull	bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateExec	block.cpp	/^CExecCheckpoint *CTransaction::UpdateExec(const CExec& execIn)$/;"	f	class:CTransaction
UpdateMovingAverages	txfeerate.cpp	/^void TxConfirmStats::UpdateMovingAverages()$/;"	f	class:TxConfirmStats
UpdateParam	block.cpp	/^CParam *CTransaction::UpdateParam(std::string strName, int64_t nValue)$/;"	f	class:CTransaction
UpdateServiceMinerEvent	chain.cpp	/^bool UpdateServiceMinerEvent(int ifaceIndex)$/;"	f
UpdateSpent	wallet.h	/^				 bool UpdateSpent(const std::vector<char>& vfNewSpent)$/;"	f	class:CWalletTx
UpdateTime	block.cpp	/^void CBlock::UpdateTime(const CBlockIndex* pindexPrev)$/;"	f	class:CBlock
UpdateTxIndex	txidx.cpp	/^bool CTxDB::UpdateTxIndex(uint256 hash, const CTxIndex& txindex)$/;"	f	class:CTxDB
UpdateValidateNotaryTx	matrix.cpp	/^void UpdateValidateNotaryTx(CIface *iface, CTransaction& tx, const CScript& scriptPrev)$/;"	f
UpdatedTransaction	wallet.cpp	/^void CWallet::UpdatedTransaction(const uint256 &hashTx)$/;"	f	class:CWallet
VALIDATE_NOTARY_DEPTH	matrix.cpp	37;"	d	file:
VERSIONBITS_LAST_OLD_BLOCK_VERSION	versionbits.h	/^static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;$/;"	v
VERSIONBITS_NUM_BITS	versionbits.h	/^static const int32_t VERSIONBITS_NUM_BITS = 29;$/;"	v
VERSIONBITS_TOP_BITS	versionbits.h	/^static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;$/;"	v
VERSIONBITS_TOP_MASK	versionbits.h	/^static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;$/;"	v
VERSION_MASK	block.h	/^		static const int VERSION_MASK = 15;$/;"	m	class:CTransactionCore
ValidIndexSet	block.h	/^typedef set<CBlockIndex*, CBlockIndexWorkComparator> ValidIndexSet;$/;"	t
ValueFromAmount	block.cpp	/^json_spirit::Value ValueFromAmount(int64 amount)$/;"	f
ValueString	script.h	/^inline std::string ValueString(const std::vector<unsigned char>& vch)$/;"	f
Verify	dikey.cpp	/^bool DIKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
Verify	eckey.cpp	/^bool ECKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
Verify	hdkey.cpp	/^bool HDPubKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPubKey
Verify	hdkey.h	/^    bool Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
Verify	txcreator.cpp	/^bool CTxCreator::Verify()$/;"	f	class:CTxCreator
VerifyCompact	dikey.cpp	/^bool DIKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
VerifyCompact	eckey.cpp	/^bool ECKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
VerifyCompact	hdkey.cpp	/^bool HDPrivKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
VerifyLimits	txmempool.cpp	/^bool CPool::VerifyLimits(CPoolTx& ptx)$/;"	f	class:CPool
VerifyMatrixTx	wallet.cpp	/^bool VerifyMatrixTx(CTransaction& tx, int& mode)$/;"	f
VerifyScript	script.cpp	/^bool VerifyScript(CSignature& sig, const CScript& scriptSig, cstack_t& witness, const CScript& scriptPubKey, int flags)$/;"	f
VerifySignature	script.cpp	/^bool VerifySignature(int ifaceIndex, const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)$/;"	f
VerifySoftLimits	txmempool.cpp	/^bool CPool::VerifySoftLimits(CPoolTx& ptx)$/;"	f	class:CPool
VerifySpringMatrix	matrix.cpp	/^bool CTransaction::VerifySpringMatrix(int ifaceIndex, const CTxMatrix& matrix, shnum_t *lat_p, shnum_t *lon_p)$/;"	f	class:CTransaction
VerifyStandards	txmempool.cpp	/^bool CPool::VerifyStandards(CPoolTx& ptx)$/;"	f	class:CPool
VerifyTx	txmempool.cpp	/^bool CPool::VerifyTx(CTransaction& tx)$/;"	f	class:CPool
VerifyTxHash	block.cpp	/^bool VerifyTxHash(CIface *iface, uint256 hashTx)$/;"	f
VerifyValidateMatrix	block.cpp	/^bool CTransaction::VerifyValidateMatrix(int ifaceIndex, const CTxMatrix& matrix, CBlockIndex *pindex)$/;"	f	class:CTransaction
VerifyValidateMatrixScript	matrix.cpp	/^bool VerifyValidateMatrixScript(CWallet *wallet, CTransaction& tx)$/;"	f
VerifyValidateMatrixScript	matrix.cpp	/^bool VerifyValidateMatrixScript(CWallet *wallet, const uint256& hMatrixTx, const CScript& scriptIn)$/;"	f
VerifyWitnessProgram	script.cpp	/^static bool VerifyWitnessProgram(CSignature& sig, cstack_t& witness, int witversion, const std::vector<unsigned char>& program, int flags)$/;"	f	file:
VersionBitsCache	versionbits.h	/^struct VersionBitsCache$/;"	s
VersionBitsConditionChecker	versionbits.cpp	/^      VersionBitsConditionChecker(DeploymentPos id_) : id(id_) {}$/;"	f	class:__anon9::VersionBitsConditionChecker
VersionBitsConditionChecker	versionbits.cpp	/^  class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {$/;"	c	namespace:__anon9	file:
VersionBitsDeploymentInfo	versionbits.cpp	/^const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[MAX_VERSION_BITS_DEPLOYMENTS] = {$/;"	v	typeref:struct:BIP9DeploymentInfo
VersionBitsMask	versionbits.cpp	/^uint32_t VersionBitsMask(CIface * params, DeploymentPos pos)$/;"	f
VersionBitsState	versionbits.cpp	/^ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, CIface * params, DeploymentPos pos)$/;"	f
WALLET_CRYPTO_KEY_SIZE	crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WIN32_LEAN_AND_MEAN	util.cpp	52;"	d	file:
WalletFeature	wallet.h	/^enum WalletFeature$/;"	g
WalletUpdateSpent	wallettx.cpp	/^void CWallet::WalletUpdateSpent(const CTransaction &tx)$/;"	f	class:CWallet
WildcardMatch	util.cpp	/^bool WildcardMatch(const char* psz, const char* mask)$/;"	f
WildcardMatch	util.cpp	/^bool WildcardMatch(const string& str, const string& mask)$/;"	f
WitnessSigOps	block.cpp	/^static size_t WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness, int flags)$/;"	f	file:
WitnessUnknown	script.h	/^struct WitnessUnknown$/;"	s
WitnessV0KeyHash	script.h	/^	WitnessV0KeyHash() : uint160() {} $/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	script.h	/^	explicit WitnessV0KeyHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	script.h	/^struct WitnessV0KeyHash : public uint160$/;"	s
WitnessV0ScriptHash	script.h	/^	WitnessV0ScriptHash() : uint256() {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	script.h	/^	explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	script.h	/^struct WitnessV0ScriptHash : public uint256$/;"	s
WitnessV14KeyHash	script.h	/^	WitnessV14KeyHash() : uint160() {} $/;"	f	struct:WitnessV14KeyHash
WitnessV14KeyHash	script.h	/^	explicit WitnessV14KeyHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:WitnessV14KeyHash
WitnessV14KeyHash	script.h	/^struct WitnessV14KeyHash : public uint160$/;"	s
WitnessV14ScriptHash	script.h	/^	WitnessV14ScriptHash() : uint256() {}$/;"	f	struct:WitnessV14ScriptHash
WitnessV14ScriptHash	script.h	/^	explicit WitnessV14ScriptHash(const uint256& hash) : uint256(hash) {}$/;"	f	struct:WitnessV14ScriptHash
WitnessV14ScriptHash	script.h	/^struct WitnessV14ScriptHash : public uint256$/;"	s
Write	txidx.h	/^      bool Write(const K& key, const T& value, bool fOverwrite=true)$/;"	f	class:CDB
WriteAccount	walletdb.cpp	/^bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteArchBlock	block.cpp	/^bool CBlock::WriteArchBlock()$/;"	f	class:CBlock
WriteArchTx	wallettx.cpp	/^bool CWallet::WriteArchTx(const CWalletTx& wtx) const$/;"	f	class:CWallet
WriteBestBlock	walletdb.h	/^    bool WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBestChain	global.cpp	/^void WriteBestChain(CIface *iface, uint256 hash)$/;"	f
WriteBlock	block.cpp	/^bool CBlock::WriteBlock(uint64_t nHeight)$/;"	f	class:CBlock
WriteCScript	walletdb.h	/^    bool WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:CWalletDB
WriteCoins	coin.cpp	/^bool CTransaction::WriteCoins(int ifaceIndex, const vector<uint256>& vOuts)$/;"	f	class:CTransaction
WriteCoins	coin.cpp	/^bool CTransaction::WriteCoins(int ifaceIndex, int nOut, const uint256& hashTxOut)$/;"	f	class:CTransaction
WriteCryptedKey	walletdb.h	/^    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)$/;"	f	class:CWalletDB
WriteDefaultKey	walletdb.h	/^    bool WriteDefaultKey(const CPubKey& vchPubKey)$/;"	f	class:CWalletDB
WriteGlobalVar	global.cpp	/^void WriteGlobalVar(char *tag, char *var, const char *value)$/;"	f
WriteHashBestChain	coin.cpp	/^void WriteHashBestChain(CIface *iface, uint256 hash)$/;"	f
WriteHashBestChain	txidx.cpp	/^bool CTxDB::WriteHashBestChain(uint256 hashBestChain)$/;"	f	class:CTxDB
WriteKey	walletdb.h	/^    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)$/;"	f	class:CWalletDB
WriteKey	walletdb.h	/^    bool WriteKey(const DIKey& key, const CPubKey& pubkey)$/;"	f	class:CWalletDB
WriteKey	walletdb.h	/^    bool WriteKey(const ECKey& key, const CPubKey& pubkey)$/;"	f	class:CWalletDB
WriteMasterKey	walletdb.h	/^    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteMinVersion	walletdb.h	/^    bool WriteMinVersion(int nVersion)$/;"	f	class:CWalletDB
WriteName	walletdb.cpp	/^bool CWalletDB::WriteName(const string& strAddress, const string& strName)$/;"	f	class:CWalletDB
WriteSetting	walletdb.h	/^    bool WriteSetting(const std::string& strKey, const T& value)$/;"	f	class:CWalletDB
WriteTx	block.cpp	/^bool CTransaction::WriteTx(int ifaceIndex, uint64_t blockHeight)$/;"	f	class:CTransaction
WriteTx	walletdb.h	/^    bool WriteTx(uint256 hash, const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteTxCoins	coin.cpp	/^bool WriteTxCoins(uint256 hash, int ifaceIndex, const vector<uint256>& vOuts)$/;"	f
WriteVersion	global.cpp	/^void WriteVersion(CIface *iface, int nVersion)$/;"	f
WriteVersion	txidx.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteWalletTx	wallettx.cpp	/^void CWallet::WriteWalletTx(const CWalletTx& wtx) const$/;"	f	class:CWallet
_CheckLowS	script.cpp	/^bool static _CheckLowS(const std::vector<unsigned char>& vchSig)$/;"	f	file:
_FeeEstimator	txfeerate.cpp	/^static CBlockPolicyEstimator *_FeeEstimator[MAX_COIN_IFACE];$/;"	v	file:
_PubKeyToJSON	block.cpp	/^static void _PubKeyToJSON(int ifaceIndex, const CScript& scriptPubKey, Object& out)$/;"	f	file:
_WIN32_IE	util.cpp	49;"	d	file:
_WIN32_IE	util.cpp	51;"	d	file:
_WIN32_WINNT	util.cpp	45;"	d	file:
_WIN32_WINNT	util.cpp	47;"	d	file:
__BLOCK_CMPCT_H__	block_cmpct.h	27;"	d
__CRYPTER_H__	crypter.h	27;"	d
__MATRIX_H__	matrix.h	27;"	d
__MRUSET_H	mruset.h	27;"	d
__RESERVED_2	script.h	/^		__RESERVED_2$/;"	e	enum:txnouttype
__SERVER__ACCOUNT_H__	account.h	27;"	d
__SERVER__ALGOBITS_H__	algobits.h	27;"	d
__SERVER__BASE58_H__	base58.h	27;"	d
__SERVER__BLOCK_H__	block.h	27;"	d
__SERVER__BLOOM_H__	bloom.h	27;"	d
__SERVER__CHAIN_H__	chain.h	27;"	d
__SERVER__CHECKPOINTS_H__	checkpoints.h	27;"	d
__SERVER__COINADDR_H__	coinaddr.h	27;"	d
__SERVER__COIN_H__	coin.h	27;"	d
__SERVER__DIKEY_H__	dikey.h	27;"	d
__SERVER__ECKEY_H__	eckey.h	27;"	d
__SERVER__GLOBAL_H__	global.h	27;"	d
__SERVER__HDKEY_H__	hdkey.h	27;"	d
__SERVER__KEYSTORE_H__	keystore.h	27;"	d
__SERVER__KEY_H__	key.h	27;"	d
__SERVER__MNEMONIC_H__	mnemonic.h	27;"	d
__SERVER__NET_H__	net.h	27;"	d
__SERVER__SCRIPT_H__	script.h	27;"	d
__SERVER__SERVER_H__	server.h	27;"	d
__SERVER__SHA256D_MERKLE_H__	sha256d_merkle.h	27;"	d
__SERVER__SPRING_H__	spring.h	27;"	d
__SERVER__TXCREATOR_H__	txcreator.h	27;"	d
__SERVER__TXFEERATE_H__	txfeerate.h	4;"	d
__SERVER__TXMEMPOOL_H__	txmempool.h	27;"	d
__SERVER__TXSIGNATURE_H__	txsignature.h	27;"	d
__SERVER__VALIDATION_H__	validation.h	27;"	d
__SERVER__WALLET_H__	wallet.h	27;"	d
__SHLIB_H__	shlib.h	27;"	d
__TXIDX_H__	txidx.h	28;"	d
__UTIL_H__	util.h	3;"	d
__WALLETDB_H__	walletdb.h	28;"	d
__WIT_MERKLE_H__	wit_merkle.h	3;"	d
_account_address_flags	account.cpp	/^static int _account_address_flags[MAX_ACCADDR] = {$/;"	v	file:
_blank_hash	coin.cpp	/^static const uint256 _blank_hash = 0;$/;"	v	file:
_keyxor	eckey.cpp	/^static void _keyxor(unsigned char *buf, unsigned char *alt, size_t size)$/;"	f	file:
_memxor	dikey.cpp	/^static void _memxor(unsigned char *buf, unsigned char *alt, size_t size)$/;"	f	file:
_pubkey_tag_table	account.cpp	/^static const char *_pubkey_tag_table[MAX_ACCADDR] = {$/;"	v	file:
_reserved0_	account.h	/^		uint256 _reserved0_;$/;"	m	class:CAccountCache
_spring_matrix	spring.c	/^uint64_t _spring_matrix[256][256] = {$/;"	v
_version_bits_cache	versionbits.cpp	/^static VersionBitsCache _version_bits_cache[MAX_COIN_IFACE];$/;"	v	file:
accept	txmempool.h	/^    bool accept(CTransaction &tx, CNode *pfrom = NULL)$/;"	f	class:CTxMemPool
account	account.h	/^		CAccount account;$/;"	m	class:CAccountCache
active	txmempool.h	/^    pool_map active;$/;"	m	class:CPool
activeTxn	txidx.h	/^    DbTxn *activeTxn;$/;"	m	class:CDB
addr	coinaddr.h	/^    CCoinAddr *addr;$/;"	m	class:CCoinAddrVisitor
addr	net.h	/^    CAddress addr;$/;"	m	class:CNode
addrLocal	net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
algobits_label	algobits.cpp	/^static const char *algobits_label[MAX_ALGOBITS] = {$/;"	v	file:
alias	block.h	/^    CAlias alias;$/;"	m	class:CTransaction
altchain	block.h	/^		CAltChain altchain;$/;"	m	class:CTransaction
altstacktop	script.cpp	102;"	d	file:
avg	txfeerate.h	/^    std::vector<double> avg;$/;"	m	class:TxConfirmStats
base_SignatureHash	txsignature.cpp	/^uint256 base_SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
begin	key.h	/^		const unsigned char* begin() const { return vch.data(); }$/;"	f	class:CKey
begin	key.h	/^		const unsigned char* begin() const { return vchPubKey.data(); }$/;"	f	class:CPubKey
begin	mruset.h	/^		iterator begin() const { return set.begin(); }$/;"	f	class:mruset
bit_mask	bloom.cpp	/^static const unsigned char bit_mask[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};$/;"	v	file:
bitdb	txidx.cpp	/^CDBEnv bitdb;$/;"	v
blkidx_t	block.h	/^typedef std::map<uint256, CBlockIndex*> blkidx_t;$/;"	t
blockHeight	txfeerate.h	/^        unsigned int blockHeight;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
blockSinceLastRollingFeeBump	txfeerate.h	/^    mutable bool blockSinceLastRollingFeeBump;$/;"	m	class:CBlockPolicyEstimator
blockhash	block_cmpct.h	/^		uint256 blockhash;$/;"	m	class:BlockTransactions
blockhash	block_cmpct.h	/^		uint256 blockhash;$/;"	m	class:BlockTransactionsRequest
bloomflags	net.h	/^enum bloomflags$/;"	g
bnBestChainWork	wallet.h	/^		CBigNum bnBestChainWork;$/;"	m	class:CWallet
bnChainWork	block.h	/^    CBigNum bnChainWork;$/;"	m	class:CBlockIndex
bucketIndex	txfeerate.h	/^        unsigned int bucketIndex;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
bucketMap	txfeerate.h	/^    std::map<double, unsigned int> bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:TxConfirmStats
buckets	txfeerate.h	/^    std::vector<double> buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:TxConfirmStats
caches	versionbits.h	/^    ThresholdConditionCache caches[MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:VersionBitsCache
certificate	block.h	/^    CCert certificate;$/;"	m	class:CTransaction
chIV	crypter.h	/^    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chKey	crypter.h	/^    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chain_AreNodesBusy	chain.cpp	/^static bool chain_AreNodesBusy(int ifaceIndex)$/;"	f	file:
chain_GetNextNode	chain.cpp	/^static CNode *chain_GetNextNode(int ifaceIndex)$/;"	f	file:
chain_IsNodeBusy	chain.cpp	/^static bool chain_IsNodeBusy(CNode *pnode)$/;"	f	file:
chain_UpdateWalletCoins	chain.cpp	/^static void chain_UpdateWalletCoins(int ifaceIndex, CBlock *block, const CTransaction& tx, bool& fCoinBase)$/;"	f	file:
chain_VerifyValidOutputs	chain.cpp	/^static void chain_VerifyValidOutputs(int ifaceIndex, const uint256& tx_hash, CWalletTx& wtx)$/;"	f	file:
chaincode	dikey.h	/^	ChainCode chaincode;$/;"	m	struct:DIExtKey
chaincode	dikey.h	/^	ChainCode chaincode;$/;"	m	struct:DIExtPubKey
chaincode	eckey.h	/^	ChainCode chaincode;$/;"	m	struct:ECExtKey
chaincode	eckey.h	/^	ChainCode chaincode;$/;"	m	struct:ECExtPubKey
changePubKey	txcreator.h	/^    CPubKey changePubKey;$/;"	m	class:CTxCreator
checkpoints	wallet.h	/^		CCheckpoints *checkpoints;$/;"	m	class:CWallet
ckey_MergeKey	eckey.cpp	/^static cbuff ckey_MergeKey(cbuff secret, cbuff tag)$/;"	f	file:
coin_set	txcreator.h	/^typedef set<pair<CWalletTx *,unsigned int> > coin_set;$/;"	t
color_opt	wallet.h	/^typedef map<int, int> color_opt;$/;"	t
common_words	mnemonic.cpp	/^string common_words[1626] = $/;"	v
confAvg	txfeerate.h	/^    std::vector<std::vector<double> > confAvg; \/\/ confAvg[Y][X]$/;"	m	class:TxConfirmStats
const_iterator	mruset.h	/^		typedef typename std::set<T>::const_iterator const_iterator;$/;"	t	class:mruset
contains	bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const uint160& hash) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	bloom.cpp	/^bool CBloomFilter::contains(const vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
core_AcceptBlock	validation.cpp	/^bool core_AcceptBlock(CBlock *pblock, CBlockIndex *pindexPrev)$/;"	f
core_AcceptBlockHeader	validation.cpp	/^bool core_AcceptBlockHeader(CIface *iface, CBlockHeader& block, CBlockIndex **pindex_p)$/;"	f
core_CScript_IsPushOnly	script.cpp	/^static bool core_CScript_IsPushOnly(const CScript& script, int of = 0)$/;"	f	file:
core_CheckBlockWitness	block.cpp	/^bool core_CheckBlockWitness(CIface *iface, CBlock *pblock, CBlockIndex *pindexPrev)$/;"	f
core_CommitBlock	block.cpp	/^bool core_CommitBlock(CBlock *pblock, CBlockIndex *pindexNew)$/;"	f
core_ComputeBlockVersion	block.cpp	/^int core_ComputeBlockVersion(CIface *params, CBlockIndex *pindexPrev)$/;"	f
core_ConnectBlock	coin.cpp	/^bool core_ConnectBlock(CBlock *block, CBlockIndex* pindex)$/;"	f
core_ConnectCoinInputs	coin.cpp	/^bool core_ConnectCoinInputs(int ifaceIndex, CTransaction *tx, const CBlockIndex* pindexBlock, tx_map& mapOutput, map<uint256, CTransaction>& mapTx, int& nSigOps, int64& nFees, bool fVerifySig, bool fVerifyInputs, bool fRequireInputs, CBlock *pBlock)$/;"	f
core_ConnectExtTx	coin.cpp	/^void core_ConnectExtTx(CIface *iface, CBlock *pblock, int nHeight, CBlockIndex *pindexPrev)$/;"	f
core_DisconnectBlock	block.cpp	/^bool core_DisconnectBlock(CBlockIndex* pindex, CBlock *pblock)$/;"	f
core_DisconnectCoinInputs	coin.cpp	/^static bool core_DisconnectCoinInputs(CWallet *wallet, CTransaction& prevTx, const COutPoint& prevout)$/;"	f	file:
core_DisconnectInputs	coin.cpp	/^bool core_DisconnectInputs(int ifaceIndex, CTransaction *tx)$/;"	f
core_DisconnectWalletInputs	coin.cpp	/^static bool core_DisconnectWalletInputs(CWallet *wallet, const COutPoint& prevout)$/;"	f	file:
core_GenerateCoinbaseCommitment	block.cpp	/^bool core_GenerateCoinbaseCommitment(CIface *iface, CBlock *block, CBlockIndex *pindexPrev)$/;"	f
core_IncrementExtraNonce	block.cpp	/^void core_IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev)$/;"	f
core_ReacceptWalletTransactions	wallet.cpp	/^void core_ReacceptWalletTransactions(CWallet *wallet)$/;"	f
core_SetExtraNonce	block.cpp	/^void core_SetExtraNonce(CBlock* pblock, const char *xn_hex)$/;"	f
core_Truncate	coin.cpp	/^bool core_Truncate(CIface *iface, uint256 hash)$/;"	f
core_UnacceptWalletTransaction	wallet.cpp	/^bool core_UnacceptWalletTransaction(CIface *iface, const CTransaction& tx)$/;"	f
core_UpdateUncommittedBlockStructures	block.cpp	/^void core_UpdateUncommittedBlockStructures(CIface *iface, CBlock *block, const CBlockIndex* pindexPrev)$/;"	f
core_VerifyCoinInputs	coin.cpp	/^bool core_VerifyCoinInputs(int ifaceIndex, CTransaction& tx, unsigned int nIn, CTxOut& prev)$/;"	f
core_netmsg	netmsg.cpp	/^void core_netmsg(CNode *pfrom, string method, cbuff vRecv)$/;"	f
core_netmsg_ping	netmsg.cpp	/^void core_netmsg_ping(CNode *pfrom, cbuff vRecv)$/;"	f
count	mruset.h	/^		size_type count(const key_type& k) const { return set.count(k); }$/;"	f	class:mruset
cpool_RemoveTxWithInput	txmempool.cpp	/^static void cpool_RemoveTxWithInput(CPool *pool, const CTxIn& txin)$/;"	f	file:
cpp_validate_render_fractal	matrix.cpp	/^int cpp_validate_render_fractal(int ifaceIndex, char *img_path, double zoom, double span, double x_of, double y_of)$/;"	f
cs	txmempool.h	/^    mutable CCriticalSection cs;$/;"	m	class:CPool
cs_KeyStore	keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_chain	coin.cpp	/^static CCriticalSection cs_chain;$/;"	v	file:
cs_db	txidx.h	/^    mutable CCriticalSection cs_db;$/;"	m	class:CDBEnv
cs_filter	net.h	/^    CCriticalSection cs_filter;$/;"	m	class:CNode
cs_inventory	net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_mapRequests	net.h	/^    CCriticalSection cs_mapRequests;$/;"	m	class:CNode
cs_setBanned	net.h	/^    static CCriticalSection cs_setBanned;$/;"	m	class:CNode
cs_vRecv	net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_vcache	versionbits.cpp	/^static CCriticalSection cs_vcache;$/;"	v	file:
cs_wallet	wallet.h	/^		mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
curBlockConf	txfeerate.h	/^    std::vector<std::vector<int> > curBlockConf; \/\/ curBlockConf[Y][X]$/;"	m	class:TxConfirmStats
curBlockTxCt	txfeerate.h	/^    std::vector<int> curBlockTxCt;$/;"	m	class:TxConfirmStats
curBlockVal	txfeerate.h	/^    std::vector<double> curBlockVal;$/;"	m	class:TxConfirmStats
dFeePriority	txmempool.h	/^    double dFeePriority;$/;"	m	class:CPoolTx
dPriority	txmempool.h	/^    double dPriority;$/;"	m	class:CPoolTx
dataTypeString	txfeerate.h	/^    std::string dataTypeString;$/;"	m	class:TxConfirmStats
dbenv	txidx.h	/^    DbEnv dbenv;$/;"	m	class:CDBEnv
decay	txfeerate.h	/^    double decay;$/;"	m	class:TxConfirmStats
depth	hdkey.h	/^    unsigned int depth;$/;"	m	class:HDPrivKey
depth	hdkey.h	/^    unsigned int depth;$/;"	m	class:HDPubKey
derive	hdkey.cpp	/^bool HDPrivKey::derive(HDPrivKey& privkey, cbuff pubkey, uint32_t i)$/;"	f	class:HDPrivKey
derive	hdkey.cpp	/^bool HDPubKey::derive(HDPubKey& pubkey, unsigned int i)$/;"	f	class:HDPubKey
dikey_MergeKey	dikey.cpp	/^static cbuff dikey_MergeKey(cbuff secret, cbuff tag)$/;"	f	file:
empty	mruset.h	/^		bool empty() const { return set.empty(); }$/;"	f	class:mruset
end	key.h	/^		const unsigned char* end() const { return vch.data() + size(); }$/;"	f	class:CKey
end	key.h	/^		const unsigned char* end() const { return vchPubKey.data() + size(); }$/;"	f	class:CPubKey
end	mruset.h	/^		iterator end() const { return set.end(); }$/;"	f	class:mruset
error	util.cpp	/^bool error(int err_code, const char *pszFormat, ...)$/;"	f
estimateFee	txfeerate.cpp	/^CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)$/;"	f	class:CBlockPolicyEstimator
estimatePriority	txfeerate.cpp	/^double CBlockPolicyEstimator::estimatePriority(int confTarget)$/;"	f	class:CBlockPolicyEstimator
estimateSmartFee	txfeerate.cpp	/^CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget)$/;"	f	class:CBlockPolicyEstimator
estimateSmartPriority	txfeerate.cpp	/^double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget)$/;"	f	class:CBlockPolicyEstimator
event_cycle_chain	chain.cpp	/^void event_cycle_chain(int ifaceIndex)$/;"	f
exec	block.h	/^		CExecCore exec;$/;"	m	class:CTransaction
exists	txmempool.h	/^    bool exists(uint256 hash)$/;"	f	class:CTxMemPool
extra_count	block_cmpct.h	/^		size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
fAccount	txcreator.h	/^    bool fAccount;$/;"	m	class:CTxCreator
fAutoLock	txcreator.h	/^		bool fAutoLock;$/;"	m	class:CTxCreator
fAutoParam	txcreator.h	/^		bool fAutoParam;$/;"	m	class:CTxCreator
fAvailableCreditCached	wallet.h	/^		mutable bool fAvailableCreditCached;$/;"	m	class:CWalletTx
fBad	bloom.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fChangeCached	wallet.h	/^		mutable bool fChangeCached;$/;"	m	class:CWalletTx
fClient	net.h	/^    bool fClient;$/;"	m	class:CNode
fCommandLine	util.cpp	/^bool fCommandLine = false;$/;"	v
fCompressedPubKey	key.h	/^    bool fCompressedPubKey;$/;"	m	class:CKey
fCreditCached	wallet.h	/^		mutable bool fCreditCached;$/;"	m	class:CWalletTx
fDaemon	util.cpp	/^bool fDaemon = false;$/;"	v
fDbEnvInit	txidx.h	/^    bool fDbEnvInit;$/;"	m	class:CDBEnv
fDebitCached	wallet.h	/^		mutable bool fDebitCached;$/;"	m	class:CWalletTx
fDebug	util.cpp	/^bool fDebug = false;$/;"	v
fDebugNet	util.cpp	/^bool fDebugNet = false;$/;"	v
fDetachDB	txidx.h	/^    bool fDetachDB;$/;"	m	class:CDBEnv
fDisconnect	net.h	/^    bool fDisconnect;$/;"	m	class:CNode
fFromMe	wallet.h	/^		char fFromMe;$/;"	m	class:CWalletTx
fGenerate	txcreator.h	/^    bool fGenerate;$/;"	m	class:CTxCreator
fGetAddr	net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHaveUPnP	main.h	/^static const int fHaveUPnP = false;$/;"	v
fHaveUPnP	main.h	/^static const int fHaveUPnP = true;$/;"	v
fHaveWitness	net.h	/^    bool fHaveWitness;$/;"	m	class:CNode
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNode
fInbound	net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fKeySet	crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLocal	txmempool.h	/^    bool fLocal;$/;"	m	class:CPoolTx
fLogTimestamps	util.cpp	/^bool fLogTimestamps = false;$/;"	v
fMerkleVerified	main.h	/^    mutable bool fMerkleVerified;$/;"	m	class:CMerkleTx
fNetDebug	net.h	/^		bool fNetDebug;$/;"	m	class:CNode
fNetworkNode	net.h	/^    bool fNetworkNode;$/;"	m	class:CNode
fNoListen	util.cpp	/^bool fNoListen = false;$/;"	v
fPreferHeaders	net.h	/^    bool fPreferHeaders;$/;"	m	class:CNode
fPubSet	key.h	/^    bool fPubSet;$/;"	m	class:CKey
fReadOnly	txidx.h	/^    bool fReadOnly;$/;"	m	class:CDB
fRelayTxes	net.h	/^    bool fRelayTxes;$/;"	m	class:CNode
fReopenDebugLog	util.cpp	/^bool fReopenDebugLog = false;$/;"	v
fRequestShutdown	util.cpp	/^bool fRequestShutdown = false;$/;"	v
fServer	util.cpp	/^bool fServer = false;$/;"	v
fShutdown	util.cpp	/^bool fShutdown = false;$/;"	v
fSuccessfullyConnected	net.h	/^    bool fSuccessfullyConnected;$/;"	m	class:CNode
fTestNet	util.cpp	/^bool fTestNet = false;$/;"	v
fWitness	txcreator.h	/^    bool fWitness;$/;"	m	class:CTxCreator
fcntl	txfeerate.cpp	45;"	d	file:
feeLikely	txfeerate.h	/^    CFeeRate feeLikely, feeUnlikely;$/;"	m	class:CBlockPolicyEstimator
feeStats	txfeerate.h	/^    TxConfirmStats feeStats, priStats;$/;"	m	class:CBlockPolicyEstimator
feeUnlikely	txfeerate.h	/^    CFeeRate feeLikely, feeUnlikely;$/;"	m	class:CBlockPolicyEstimator
feeset	txfeerate.h	/^    std::set<double> feeset;$/;"	m	class:FeeFilterRounder
find	mruset.h	/^		iterator find(const key_type& k) const { return set.find(k); }$/;"	f	class:mruset
flags	txmempool.h	/^    int flags;$/;"	m	class:CPoolTx
fn	net.h	/^    void (*fn)(void*, CDataStream&);$/;"	m	class:CRequestTracker
gbt_force	versionbits.h	/^    bool gbt_force;$/;"	m	struct:BIP9DeploymentInfo
getInputCount	txcreator.h	/^		int getInputCount()$/;"	f	class:CTxCreator
getint	script.h	/^    int getint() const$/;"	f	class:CScriptNum
getvch	script.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum
grantOutbound	net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
hCert	wallet.h	/^		uint160 hCert;$/;"	m	class:CAccount
hColor	block.h	/^		uint160 hColor;$/;"	m	class:CBlock
hColor	txmempool.h	/^		uint160 hColor;$/;"	m	class:CPoolTx
hColor	wallet.h	/^		uint160 hColor; \/* COLOR_COIN_IFACE *\/$/;"	m	class:CWalletTx
hNotaryBlock	checkpoints.h	/^		uint256 hNotaryBlock;$/;"	m	class:CCheckpoints
hNotaryHeight	checkpoints.h	/^		uint32_t hNotaryHeight;$/;"	m	class:CCheckpoints
hRef	matrix.h	/^		uint160 hRef;$/;"	m	class:CTxMatrix
hSocket	net.h	/^    unsigned int hSocket;$/;"	m	class:CNode
hash	block.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	net.h	/^		uint256 hash;$/;"	m	class:CValidateState
hash	txmempool.h	/^    uint256 hash;$/;"	m	class:CPoolTx
hashBlock	block.h	/^    mutable uint256 hashBlock;$/;"	m	class:CDiskTxPos
hashBlock	main.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashLastGetBlocksEnd	net.h	/^    uint256 hashLastGetBlocksEnd;$/;"	m	class:CNode
hashLastUnknownBlock	net.h	/^		uint256 hashLastUnknownBlock;$/;"	m	class:CNode
hashMerkleRoot	block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockHeader
hashMerkleRoot	block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashNext	block.h	/^    uint256 hashNext;$/;"	m	class:CDiskBlockIndex
hashPrev	block.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	block.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlockHeader
hashTx	block.h	/^    mutable uint256 hashTx;$/;"	m	class:CDiskTxPos
hdKeypath	key.h	/^		std::string hdKeypath; \/\/optional HD\/bip32 keypath$/;"	m	class:CKeyMetadata
hdMasterKeyID	key.h	/^		CKeyID hdMasterKeyID; \/\/id of the HD masterkey used to derive this key$/;"	m	class:CKeyMetadata
header	block_cmpct.h	/^		CBlockHeader header;$/;"	m	class:CBlockHeaderAndShortTxIDs
header	block_cmpct.h	/^		CBlockHeader header;$/;"	m	class:PartiallyDownloadedBlock
header	bloom.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
i	wallet.h	/^		int i;$/;"	m	class:COutput
id	versionbits.cpp	/^      const DeploymentPos id;$/;"	m	class:__anon9::VersionBitsConditionChecker	file:
ifaceIndex	block.h	/^    mutable int ifaceIndex;$/;"	m	class:CBlockHeader
ifaceIndex	chain.h	/^  int ifaceIndex;$/;"	m	struct:ChainOp
ifaceIndex	checkpoints.h	/^		int ifaceIndex;$/;"	m	class:CCheckpoints
ifaceIndex	coinaddr.h	/^    int ifaceIndex;$/;"	m	class:CCoinAddr
ifaceIndex	net.h	/^		int ifaceIndex;$/;"	m	class:CValidateState
ifaceIndex	net.h	/^    int ifaceIndex;$/;"	m	class:CBloomFilter
ifaceIndex	net.h	/^    mutable int ifaceIndex;$/;"	m	class:CNode
ifaceIndex	txfeerate.h	/^    int ifaceIndex;$/;"	m	class:CBlockPolicyEstimator
ifaceIndex	txidx.h	/^    mutable int ifaceIndex;$/;"	m	class:CTxDB
ifaceIndex	txmempool.h	/^    int ifaceIndex;$/;"	m	class:CPool
ifaceIndex	txsignature.h	/^		int ifaceIndex;$/;"	m	class:CSignature
ifaceIndex	wallet.h	/^		int ifaceIndex;$/;"	m	class:CWallet
index	block_cmpct.h	/^	uint16_t index;$/;"	m	struct:PrefilledTransaction
index	hdkey.h	/^    unsigned int index;$/;"	m	class:HDPrivKey
index	hdkey.h	/^    unsigned int index;$/;"	m	class:HDPubKey
index_of	mnemonic.cpp	/^size_t index_of(const string& word)$/;"	f
indexes	block_cmpct.h	/^		std::vector<uint16_t> indexes;$/;"	m	class:BlockTransactionsRequest
insert	bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const uint160& hash)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	bloom.cpp	/^void CBloomFilter::insert(const vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	mruset.h	/^		std::pair<iterator, bool> insert(const key_type& x)$/;"	f	class:mruset
instance_of_cinit	util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
inval	txmempool.h	/^    set<uint256> inval;$/;"	m	class:CPool
isAutoLock	txcreator.h	/^		bool isAutoLock()$/;"	f	class:CTxCreator
isAutoParam	txcreator.h	/^		bool isAutoParam()$/;"	f	class:CTxCreator
isEmpty	net.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isExtOp	script.cpp	/^bool isExtOp(opcodetype opcode)$/;"	f
isFeeDataPoint	txfeerate.cpp	/^bool CBlockPolicyEstimator::isFeeDataPoint(const CFeeRate &fee, double pri)$/;"	f	class:CBlockPolicyEstimator
isFlag	block.h	/^    bool isFlag(unsigned int flag) const$/;"	f	class:CTransactionCore
isFull	net.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isLocal	txmempool.h	/^    bool isLocal()$/;"	f	class:CPoolTx
isPriDataPoint	txfeerate.cpp	/^bool CBlockPolicyEstimator::isPriDataPoint(const CFeeRate &fee, double pri)$/;"	f	class:CBlockPolicyEstimator
is_spring_loc	spring.c	/^int is_spring_loc(double lat, double lon)$/;"	f
iterator	mruset.h	/^		typedef typename std::set<T>::iterator iterator;$/;"	t	class:mruset
join	util.cpp	/^string join(const vector<string>& vec, const char* delim)$/;"	f
key	dikey.h	/^	DIKey key;$/;"	m	struct:DIExtKey
key	eckey.h	/^	ECKey key;$/;"	m	struct:ECExtKey
key_error	key.h	/^    explicit key_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:key_error
key_error	key.h	/^class key_error : public std::runtime_error$/;"	c
key_type	mruset.h	/^		typedef T key_type;$/;"	t	class:mruset
keystore	script.cpp	/^    const CKeyStore *keystore;$/;"	m	class:CKeyStoreIsMineVisitor	file:
lastRollingFeeUpdate	txfeerate.h	/^    mutable int64_t lastRollingFeeUpdate;$/;"	m	class:CBlockPolicyEstimator
lat	spring.c	/^  shnum_t lat;$/;"	m	struct:spring_bits	file:
lat1	spring.c	/^  unsigned int lat1, lat2;$/;"	m	struct:spring_bits	file:
lat2	spring.c	/^  unsigned int lat1, lat2;$/;"	m	struct:spring_bits	file:
length	script.h	/^	unsigned int length;$/;"	m	struct:WitnessUnknown
locking_callback	util.cpp	/^void locking_callback(int mode, int i, const char* file, int line)$/;"	f
lon	spring.c	/^  shnum_t lon;$/;"	m	struct:spring_bits	file:
lon1	spring.c	/^  unsigned int lon1, lon2;$/;"	m	struct:spring_bits	file:
lon2	spring.c	/^  unsigned int lon1, lon2;$/;"	m	struct:spring_bits	file:
lookup	txmempool.h	/^    CTransaction& lookup(uint256 hash)$/;"	f	class:CTxMemPool
m_value	script.h	/^    int64_t m_value;$/;"	m	class:CScriptNum
mapAddrCache	wallet.h	/^		map<string, CAccountCache *> mapAddrCache;$/;"	m	class:CWallet
mapAddressBook	wallet.h	/^		std::map<CTxDestination, std::string> mapAddressBook;$/;"	m	class:CWallet
mapAlias	wallet.h	/^		mutable std::map<std::string, uint256> mapAlias;$/;"	m	class:CWallet
mapAliasArch	wallet.h	/^		mutable std::map<uint256, std::string> mapAliasArch;$/;"	m	class:CWallet
mapAskFor	net.h	/^    std::multimap<int64, CInv> mapAskFor;$/;"	m	class:CNode
mapAsset	wallet.h	/^		mutable std::map<uint160, uint256> mapAsset;$/;"	m	class:CWallet
mapCert	wallet.h	/^		mutable std::map<uint160, uint256> mapCert;$/;"	m	class:CWallet
mapCertArch	wallet.h	/^		mutable std::map<uint256, uint160> mapCertArch;$/;"	m	class:CWallet
mapCertLabel	wallet.h	/^		mutable std::map<std::string, uint160> mapCertLabel;$/;"	m	class:CWallet
mapChannel	wallet.h	/^		mutable std::map<uint160, CTransaction> mapChannel;$/;"	m	class:CWallet
mapChannelRedeem	wallet.h	/^		mutable std::map<uint160, CTransaction> mapChannelRedeem;$/;"	m	class:CWallet
mapChannelSpent	wallet.h	/^		mutable std::map<uint160, CTransaction> mapChannelSpent;$/;"	m	class:CWallet
mapCheckpoints	checkpoints.h	/^		MapCheckpoints mapCheckpoints;$/;"	m	class:CCheckpoints
mapCoinHash	coin.cpp	/^static vector<uint160> mapCoinHash;$/;"	v	file:
mapColor	wallet.h	/^		std::map<uint160, uint256> mapColor;$/;"	m	class:CWallet
mapColorHead	wallet.h	/^		std::map<uint256, uint160> mapColorHead;$/;"	m	class:CWallet
mapColorPool	wallet.h	/^		std::map<uint160, uint256> mapColorPool;$/;"	m	class:CWallet
mapContext	wallet.h	/^		mutable std::map<uint160, uint256> mapContext;$/;"	m	class:CWallet
mapContextArch	wallet.h	/^		mutable std::map<uint256, uint160> mapContextArch;$/;"	m	class:CWallet
mapDIKeys	keystore.h	/^    DIKeyMap mapDIKeys;$/;"	m	class:CBasicKeyStore
mapDb	txidx.h	/^    std::map<std::string, Db*> mapDb;$/;"	m	class:CDBEnv
mapECKeys	keystore.h	/^    ECKeyMap mapECKeys;$/;"	m	class:CBasicKeyStore
mapExec	wallet.h	/^		mutable std::map<uint160, uint256> mapExec;$/;"	m	class:CWallet
mapExecCall	wallet.h	/^		mutable std::map< uint160, vector<uint160> > mapExecCall;$/;"	m	class:CWallet
mapExecCallPending	wallet.h	/^		mutable std::map< uint160, vector<uint160> > mapExecCallPending;$/;"	m	class:CWallet
mapExecCheckpoint	wallet.h	/^		mutable std::map<uint160, uint256> mapExecCheckpoint; $/;"	m	class:CWallet
mapExecLabel	wallet.h	/^		mutable std::map<string, uint160> mapExecLabel;$/;"	m	class:CWallet
mapFileUseCount	txidx.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:CDBEnv
mapIdent	wallet.h	/^		mutable std::map<uint160, uint256> mapIdent;$/;"	m	class:CWallet
mapInputs	txmempool.h	/^    tx_cache mapInputs;$/;"	m	class:CPoolTx
mapInputs	txsignature.h	/^		tx_cache mapInputs;$/;"	m	class:CSignature
mapLicense	wallet.h	/^		mutable std::map<uint160, uint256> mapLicense;$/;"	m	class:CWallet
mapMemPoolTxs	txfeerate.h	/^    std::map<uint256, TxStatsInfo> mapMemPoolTxs;$/;"	m	class:CBlockPolicyEstimator
mapMultiArgs	util.cpp	/^map<string, vector<string> > mapMultiArgs;$/;"	v
mapNextTx	txmempool.h	/^    std::map<COutPoint, CInPoint> mapNextTx;$/;"	m	class:CPoolTx
mapOffer	wallet.h	/^		mutable std::map<uint160, uint256> mapOffer;$/;"	m	class:CWallet
mapOfferAccept	wallet.h	/^		mutable std::map<uint160, uint256> mapOfferAccept;$/;"	m	class:CWallet
mapOfferAcceptArch	wallet.h	/^		mutable std::map<uint160, uint256> mapOfferAcceptArch;$/;"	m	class:CWallet
mapOfferArch	wallet.h	/^		mutable std::map<uint160, uint256> mapOfferArch;$/;"	m	class:CWallet
mapOfferGenerate	wallet.h	/^		mutable std::map<uint160, uint256> mapOfferGenerate;$/;"	m	class:CWallet
mapParam	wallet.h	/^		mutable std::vector<CParam> mapParam;$/;"	m	class:CWallet
mapParamArch	wallet.h	/^		mutable std::vector<uint256> mapParamArch;$/;"	m	class:CWallet
mapRequestCount	wallet.h	/^		std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapRequests	net.h	/^    std::map<uint256, CRequestTracker> mapRequests;$/;"	m	class:CNode
mapScripts	keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapValidateNotary	wallet.h	/^		map<uint256, CPubKey> mapValidateNotary;$/;"	m	class:CWallet
mapValidateTx	wallet.h	/^		vector<uint256> mapValidateTx;$/;"	m	class:CWallet
mapValue	wallet.h	/^		std::map<std::string, std::string> mapValue;$/;"	m	class:CWalletTx
mapWallet	wallet.h	/^		std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
mapWalletArch	wallet.h	/^		std::map<uint256, CWalletTx> mapWalletArch;$/;"	m	class:CWallet
map_table	netmsg.cpp	/^netmsg_map map_table[MAX_COIN_IFACE];$/;"	v
mapval_t	wallet.h	/^typedef std::map<std::string, std::string> mapval_t;$/;"	t
masterKeyID	wallet.h	/^		CKeyID masterKeyID; $/;"	m	class:CAccount
matrix	block.h	/^    CTxMatrix matrix;$/;"	m	class:CTransaction
matrixValidate	wallet.h	/^		CTxMatrix matrixValidate;$/;"	m	class:CWallet
matrix_GetMinConsensus	matrix.cpp	/^static unsigned int matrix_GetMinConsensus(int ifaceIndex)$/;"	f	file:
matrix_GetNotaryLockTime	matrix.cpp	/^static uint32_t matrix_GetNotaryLockTime(CIface *iface)$/;"	f	file:
max	chain.h	/^  unsigned int max;$/;"	m	struct:ChainOp
max_size	mruset.h	/^		size_type max_size() const { return nMaxSize; }$/;"	f	class:mruset
max_size	mruset.h	/^		size_type max_size(size_type s)$/;"	f	class:mruset
mempool_count	block_cmpct.h	/^		size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
minReasonableRelayFee	txfeerate.h	/^    CFeeRate minReasonableRelayFee;$/;"	m	class:CBlockPolicyEstimator
minTrackedFee	txfeerate.h	/^    CFeeRate minTrackedFee;    \/\/!< Passed to constructor to avoid dependency on main$/;"	m	class:CBlockPolicyEstimator
minTrackedPriority	txfeerate.h	/^    double minTrackedPriority; \/\/!< Set to AllowFreeThreshold$/;"	m	class:CBlockPolicyEstimator
mode	chain.h	/^  int mode;$/;"	m	struct:ChainOp
mruset	mruset.h	/^		mruset(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }$/;"	f	class:mruset
mruset	mruset.h	/^template <typename T> class mruset$/;"	c
n	block.h	/^    unsigned int n;$/;"	m	class:CInPoint
n	block.h	/^    unsigned int n;$/;"	m	class:COutPoint
nAccessTime	coinaddr.h	/^		int64_t nAccessTime; $/;"	m	class:CCoinAddr
nAccountingEntryNumber	walletdb.cpp	/^static uint64 nAccountingEntryNumber = 0;$/;"	v	file:
nAvailableCreditCached	wallet.h	/^		mutable int64 nAvailableCreditCached;$/;"	m	class:CWalletTx
nBatchValue	txcreator.h	/^    int64 nBatchValue;$/;"	m	class:CTxBatchCreator
nBestSeenHeight	txfeerate.h	/^    unsigned int nBestSeenHeight;$/;"	m	class:CBlockPolicyEstimator
nBits	block.h	/^    unsigned int nBits;$/;"	m	class:CBlockHeader
nBits	block.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBlockPos	block.h	/^    unsigned int nBlockPos;$/;"	m	class:CDiskTxPos
nChainInputValue	txmempool.h	/^    int64 nChainInputValue;$/;"	m	class:CPoolTx
nChainTx	block.h	/^		unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChangeCached	wallet.h	/^		mutable int64 nChangeCached;$/;"	m	class:CWalletTx
nChild	dikey.h	/^	uint32_t nChild;$/;"	m	struct:DIExtKey
nChild	dikey.h	/^	uint32_t nChild;$/;"	m	struct:DIExtPubKey
nChild	eckey.h	/^	uint32_t nChild;$/;"	m	struct:ECExtKey
nChild	eckey.h	/^	uint32_t nChild;$/;"	m	struct:ECExtPubKey
nCoinPerK	txfeerate.h	/^    CAmount nCoinPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nCreateTime	coinaddr.h	/^		int64_t nCreateTime; $/;"	m	class:CCoinAddr
nCreateTime	key.h	/^		int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CKeyMetadata
nCredit	txcreator.h	/^    int64 nCredit; $/;"	m	class:CTxCreator
nCreditCached	wallet.h	/^		mutable int64 nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	wallet.h	/^		int64 nCreditDebit;$/;"	m	class:CAccountingEntry
nCurrentBlockFile	main.cpp	/^static unsigned int nCurrentBlockFile = 1;$/;"	v	file:
nDebit	txcreator.h	/^    int64 nDebit;$/;"	m	class:CTxCreator
nDebitCached	wallet.h	/^		mutable int64 nDebitCached;$/;"	m	class:CWalletTx
nDefaultMaxNumSize	script.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum
nDepth	dikey.h	/^	uint8_t nDepth;$/;"	m	struct:DIExtKey
nDepth	dikey.h	/^	uint8_t nDepth;$/;"	m	struct:DIExtPubKey
nDepth	eckey.h	/^	uint8_t nDepth;$/;"	m	struct:ECExtKey
nDepth	eckey.h	/^	uint8_t nDepth;$/;"	m	struct:ECExtPubKey
nDepth	txcreator.h	/^    unsigned int nDepth;$/;"	m	class:CTxCreator
nDepth	wallet.h	/^		int nDepth;$/;"	m	class:COutput
nDerivationMethod	crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nError	net.h	/^		unsigned int nError;$/;"	m	class:CValidateState
nExternalDIChainCounter	wallet.h	/^		uint32_t nExternalDIChainCounter;$/;"	m	class:CAccount
nExternalECChainCounter	wallet.h	/^		uint32_t nExternalECChainCounter;$/;"	m	class:CAccount
nFee	txmempool.h	/^    int64 nFee;$/;"	m	class:CPoolTx
nFeeDepth	txcreator.h	/^		int nFeeDepth;$/;"	m	class:CTxCreator
nFile	block.h	/^    unsigned int nFile;$/;"	m	class:CDiskTxPos
nFlag	block.h	/^    int nFlag;$/;"	m	class:CTransactionCore
nFlag	key.h	/^		unsigned int nFlag;$/;"	m	class:CKeyMetadata
nFlags	net.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nHashFuncs	net.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHashType	txsignature.h	/^		int nHashType; $/;"	m	class:CSignature
nHeaderStart	net.h	/^    int nHeaderStart;$/;"	m	class:CNode
nHeight	block.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	matrix.h	/^		unsigned int nHeight; $/;"	m	class:CTxMatrix
nHeight	txmempool.h	/^    unsigned int nHeight;$/;"	m	class:CPoolTx
nIndex	main.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nInternalDIChainCounter	wallet.h	/^		uint32_t nInternalDIChainCounter;$/;"	m	class:CAccount
nInternalECChainCounter	wallet.h	/^		uint32_t nInternalECChainCounter;$/;"	m	class:CAccount
nLastBlockSize	main.cpp	/^uint64 nLastBlockSize = 0;$/;"	v
nLastBlockTx	main.cpp	/^uint64 nLastBlockTx = 0;$/;"	v
nLastRecv	net.h	/^    int64 nLastRecv;$/;"	m	class:CNode
nLastRecv	net.h	/^    int64 nLastRecv;$/;"	m	class:CNodeStats
nLastSend	net.h	/^    int64 nLastSend;$/;"	m	class:CNode
nLastSend	net.h	/^    int64 nLastSend;$/;"	m	class:CNodeStats
nLastSendEmpty	net.h	/^    int64 nLastSendEmpty;$/;"	m	class:CNode
nLockTime	block.h	/^    unsigned int nLockTime;$/;"	m	class:CTransactionCore
nMaxFee	txcreator.h	/^    int64 nMaxFee;$/;"	m	class:CTxBatchCreator
nMaxNumSize	script.cpp	/^static const size_t nMaxNumSize = 4;$/;"	v	file:
nMaxSigOp	txcreator.h	/^    int64 nMaxSigOp;$/;"	m	class:CTxBatchCreator
nMaxSize	mruset.h	/^		size_type nMaxSize;$/;"	m	class:mruset
nMaxTxSize	txcreator.h	/^    int64 nMaxTxSize;$/;"	m	class:CTxBatchCreator
nMedianTimeSpan	block.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon1
nMessageStart	net.h	/^    unsigned int nMessageStart;$/;"	m	class:CNode
nMinDiskSpace	main.h	/^static const uint64 nMinDiskSpace = 52428800;$/;"	v
nMinFee	net.h	/^    int64 nMinFee;$/;"	m	class:CNode
nMinFee	txcreator.h	/^    int64 nMinFee;$/;"	m	class:CTxBatchCreator
nMinFee	txcreator.h	/^    int64 nMinFee;$/;"	m	class:CTxCreator
nMinFee	txmempool.h	/^    int64 nMinFee;$/;"	m	class:CPoolTx
nMisbehavior	net.h	/^    int nMisbehavior;$/;"	m	class:CNode
nMisbehavior	net.h	/^    int nMisbehavior;$/;"	m	class:CNodeStats
nMockTime	util.cpp	/^static int64 nMockTime = 0;  \/\/ For unit testing$/;"	v	file:
nNonce	block.h	/^    unsigned int nNonce;$/;"	m	class:CBlockHeader
nNonce	block.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nNonceCount	chain.cpp	/^static uint64_t nNonceCount;$/;"	v	file:
nOutValue	txcreator.h	/^    int64 nOutValue;$/;"	m	class:CTxBatchCreator
nRefCount	net.h	/^    int nRefCount;$/;"	m	class:CNode
nReleaseTime	net.h	/^    int64 nReleaseTime;$/;"	m	class:CNode
nReleaseTime	net.h	/^    int64 nReleaseTime;$/;"	m	class:CNodeStats
nReserveIndex	txcreator.h	/^    int64 nReserveIndex;$/;"	m	class:CTxCreator
nScanHeight	wallet.h	/^		unsigned int nScanHeight;$/;"	m	class:CWallet
nSequence	block.h	/^    unsigned int nSequence;$/;"	m	class:CTxIn
nServices	net.h	/^    uint64 nServices;$/;"	m	class:CNode
nServices	net.h	/^    uint64 nServices;$/;"	m	class:CNodeStats
nSigOpCost	txmempool.h	/^    int64 nSigOpCost;$/;"	m	class:CPoolTx
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNode
nStartingHeight	net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStatus	block.h	/^    int nStatus;$/;"	m	class:CBlockIndex
nTime	block.h	/^    unsigned int nTime;$/;"	m	class:CBlockHeader
nTime	block.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	wallet.h	/^		int64 nTime;$/;"	m	class:CAccountingEntry
nTimeConnected	net.h	/^    int64 nTimeConnected;$/;"	m	class:CNode
nTimeConnected	net.h	/^    int64 nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	wallet.h	/^		int64 nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpires	wallet.h	/^		int64 nTimeExpires;$/;"	m	class:CWalletKey
nTimeOffset	util.cpp	/^static int64 nTimeOffset = 0;$/;"	v	file:
nTimeReceived	wallet.h	/^		unsigned int nTimeReceived;  \/\/ time received by this node$/;"	m	class:CWalletTx
nTimeUnused	wallet.h	/^		unsigned int nTimeUnused; \/\/ time committed to a block.$/;"	m	class:CWalletTx
nTransactionFee	main.cpp	/^int64 nTransactionFee = 0;$/;"	v
nTransactions	bloom.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTrust	net.h	/^		int nTrust;$/;"	m	class:CValidateState
nTweak	net.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTxIn	txsignature.h	/^		int nTxIn;$/;"	m	class:CSignature
nTxModSize	txmempool.h	/^    int64 nTxModSize;$/;"	m	class:CPoolTx
nTxPos	block.h	/^    unsigned int nTxPos;$/;"	m	class:CDiskTxPos
nTxSize	txmempool.h	/^    int64 nTxSize;$/;"	m	class:CPoolTx
nType	coinaddr.h	/^		int nType; \/* ADDR_BASE58 | ADDR_BECH32 *\/$/;"	m	class:CCoinAddr
nType	matrix.h	/^		unsigned int nType;$/;"	m	class:CTxMatrix
nValidateHeight	wallet.h	/^		unsigned int nValidateHeight;$/;"	m	class:CWallet
nValue	block.h	/^		int64 nValue;$/;"	m	class:CTxOut
nVersion	block.h	/^        nVersion = this->nVersion;$/;"	m	class:CBlockHeader
nVersion	block.h	/^    int nVersion;$/;"	m	class:CBlockHeader
nVersion	block.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNode
nVersion	net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nWalletDBUpdated	txidx.cpp	/^unsigned int nWalletDBUpdated;$/;"	v
nWeight	txmempool.h	/^    int64 nWeight;$/;"	m	class:CPoolTx
name	versionbits.h	/^    const char *name;$/;"	m	struct:BIP9DeploymentInfo
netmsg_f	netmsg.cpp	/^typedef void (*netmsg_f)(CNode *, cbuff);$/;"	t	file:
netmsg_map	netmsg.cpp	/^typedef std::map<std:;string, netmsg_f> netmsg_map;$/;"	t	file:
nonce	block_cmpct.h	/^		uint64_t nonce;$/;"	m	class:CBlockHeaderAndShortTxIDs
offer	block.h	/^    COffer offer;$/;"	m	class:CTransaction
oldUnconfTxs	txfeerate.h	/^    std::vector<int> oldUnconfTxs;$/;"	m	class:TxConfirmStats
opcodetype	script.h	/^enum opcodetype$/;"	g
operator !=	block.h	/^		friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	block.h	/^    friend bool operator!=(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator !=	block.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	block.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	block.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	block.h	/^    friend bool operator!=(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator !=	hdkey.h	/^    friend bool operator!=(const HDMasterPrivKey &a, const HDMasterPrivKey &b) {$/;"	f	class:HDMasterPrivKey
operator !=	hdkey.h	/^    friend bool operator!=(const HDPrivKey &a, const HDPrivKey &b) {$/;"	f	class:HDPrivKey
operator !=	hdkey.h	/^    friend bool operator!=(const HDPubKey &a, const HDPubKey &b) {$/;"	f	class:HDPubKey
operator !=	key.h	/^		friend bool operator!=(const CPubKey &a, const CPubKey &b) { return a.vchPubKey != b.vchPubKey; }$/;"	f	class:CPubKey
operator !=	matrix.h	/^		friend bool operator!=(const CTxMatrix& a, const CTxMatrix& b)$/;"	f	class:CTxMatrix
operator !=	script.h	/^    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum
operator !=	script.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum
operator &	script.h	/^    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }$/;"	f	class:CScriptNum
operator &	script.h	/^    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}$/;"	f	class:CScriptNum
operator &=	script.h	/^    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator &=	script.h	/^    inline CScriptNum& operator&=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ()	block.h	/^    bool operator()(CBlockIndex *pa, CBlockIndex *pb) {$/;"	f	struct:CBlockIndexWorkComparator
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const CKeyID &id) const         { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const CNoDestination &id) const { return false; }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessUnknown &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV0KeyHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV0ScriptHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV14KeyHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV14ScriptHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	script.cpp	/^    bool operator()(const CKeyID &keyID) const { return keystore->HaveKey(keyID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const CKeyID& keyID) const $/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const CNoDestination &dest) const { return false; }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const CNoDestination& dest) const $/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const CScriptID& scriptID) const $/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessUnknown& id) const { return false; }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessUnknown& id) const {$/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV0KeyHash& id) const $/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV0KeyHash& keyId) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV0ScriptHash& id) const {$/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV0ScriptHash& scriptID) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV14KeyHash& id) const $/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV14KeyHash& keyId) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV14ScriptHash& id) const {$/;"	f	class:CScriptVisitor
operator ()	script.cpp	/^    bool operator()(const WitnessV14ScriptHash& scriptID) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	wallet.cpp	/^	bool operator()(const pair<int64, pair<const CWalletTx*, unsigned int> >& t1,$/;"	f	struct:CompareValueOnly
operator +	script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	script.h	/^    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum
operator +	script.h	/^    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}$/;"	f	class:CScriptNum
operator +=	script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	script.h	/^    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator +=	script.h	/^    inline CScriptNum& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator +=	txfeerate.h	/^    CFeeRate& operator+=(const CFeeRate& a) { nCoinPerK += a.nCoinPerK; return *this; }$/;"	f	class:CFeeRate
operator -	script.h	/^    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum
operator -	script.h	/^    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}$/;"	f	class:CScriptNum
operator -	script.h	/^    inline CScriptNum operator-()                         const$/;"	f	class:CScriptNum
operator -=	script.h	/^    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator -=	script.h	/^    inline CScriptNum& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator <	base58.h	/^		bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	block.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	key.h	/^		friend bool operator<(const CPubKey &a, const CPubKey &b) { return a.vchPubKey < b.vchPubKey; }$/;"	f	class:CPubKey
operator <	mruset.h	/^		bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }$/;"	f	class:mruset
operator <	protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	script.h	/^	friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator <	script.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	script.h	/^    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum
operator <	script.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum
operator <	txfeerate.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK < b.nCoinPerK; }$/;"	f	class:CFeeRate
operator <	txmempool.h	/^    bool operator < (const CPoolTx& ptx) const$/;"	f	class:CPoolTx
operator <<	script.h	/^    CScript& operator<<(const CBigNum& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CPubKey& key)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const CScriptNum& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const uint160& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(const uint256& b)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(int b)            { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(int64 b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(long b)           { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(short b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(signed char b)    { return push_int64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(uint64 b)         { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned char b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned int b)   { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned long b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	script.h	/^    CScript& operator<<(unsigned short b) { return push_uint64(b); }$/;"	f	class:CScript
operator <=	base58.h	/^		bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	script.h	/^    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum
operator <=	script.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum
operator <=	txfeerate.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK <= b.nCoinPerK; }$/;"	f	class:CFeeRate
operator =	dikey.h	/^    DIKey& operator=(const DIKey& b)$/;"	f	class:DIKey
operator =	eckey.h	/^    ECKey& operator=(const ECKey& b)$/;"	f	class:ECKey
operator =	hdkey.h	/^    HDMasterPrivKey operator=(const HDMasterPrivKey &b)$/;"	f	class:HDMasterPrivKey
operator =	hdkey.h	/^    HDPrivKey operator=(const HDPrivKey &b)$/;"	f	class:HDPrivKey
operator =	hdkey.h	/^    HDPubKey operator=(const HDPubKey &b)$/;"	f	class:HDPubKey
operator =	key.h	/^    CKey& operator=(const CKey& b)$/;"	f	class:CKey
operator =	matrix.h	/^		CTxMatrix operator=(const CTxMatrix &b)$/;"	f	class:CTxMatrix
operator =	script.h	/^    inline CScriptNum& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ==	account.h	/^		friend bool operator==(const CAccountCache& a, const CAccountCache& b)$/;"	f	class:CAccountCache
operator ==	base58.h	/^		bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	block.h	/^		friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	block.h	/^    friend bool operator==(const CBlockHeader& a, const CBlockHeader& b)$/;"	f	class:CBlockHeader
operator ==	block.h	/^    friend bool operator==(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator ==	block.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	block.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	block.h	/^    friend bool operator==(const CTransactionCore& a, const CTransactionCore& b)$/;"	f	class:CTransactionCore
operator ==	block.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	block.h	/^    friend bool operator==(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator ==	dikey.h	/^		friend bool operator==(const DIKey &a, const DIKey &b) { return a.vch == b.vch; }$/;"	f	class:DIKey
operator ==	dikey.h	/^	friend bool operator==(const DIExtKey& a, const DIExtKey& b)$/;"	f	struct:DIExtKey
operator ==	dikey.h	/^	friend bool operator==(const DIExtPubKey &a, const DIExtPubKey &b)$/;"	f	struct:DIExtPubKey
operator ==	eckey.h	/^		friend bool operator==(const ECKey &a, const ECKey &b) { return a.vch == b.vch; }$/;"	f	class:ECKey
operator ==	eckey.h	/^	friend bool operator==(const ECExtKey& a, const ECExtKey& b)$/;"	f	struct:ECExtKey
operator ==	eckey.h	/^	friend bool operator==(const ECExtPubKey &a, const ECExtPubKey &b)$/;"	f	struct:ECExtPubKey
operator ==	hdkey.h	/^    friend bool operator==(const HDMasterPrivKey &a, const HDMasterPrivKey &b) $/;"	f	class:HDMasterPrivKey
operator ==	hdkey.h	/^    friend bool operator==(const HDPrivKey &a, const HDPrivKey &b) $/;"	f	class:HDPrivKey
operator ==	hdkey.h	/^    friend bool operator==(const HDPubKey &a, const HDPubKey &b) $/;"	f	class:HDPubKey
operator ==	key.h	/^		friend bool operator==(const CPubKey &a, const CPubKey &b) { return a.vchPubKey == b.vchPubKey; }$/;"	f	class:CPubKey
operator ==	matrix.h	/^			friend bool operator==(const CTxMatrix& a, const CTxMatrix& b)$/;"	f	class:CTxMatrix
operator ==	mruset.h	/^		bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }$/;"	f	class:mruset
operator ==	mruset.h	/^		bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }$/;"	f	class:mruset
operator ==	script.h	/^	friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator ==	script.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	script.h	/^    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum
operator ==	script.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum
operator ==	shlib.h	/^    friend bool operator==(const SHPeer &a, const SHPeer &b)$/;"	f	class:SHPeer
operator ==	shlib.h	/^    friend bool operator==(const SHSig &a, const SHSig &b)$/;"	f	class:SHSig
operator ==	txfeerate.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK == b.nCoinPerK; }$/;"	f	class:CFeeRate
operator ==	txmempool.h	/^    bool operator == (const CPoolTx& b) const$/;"	f	class:CPoolTx
operator >	base58.h	/^		bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	script.h	/^    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum
operator >	script.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum
operator >	txfeerate.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK > b.nCoinPerK; }$/;"	f	class:CFeeRate
operator >	txmempool.h	/^    bool operator > (const CPoolTx& ptx) const$/;"	f	class:CPoolTx
operator >=	base58.h	/^		bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	script.h	/^    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum
operator >=	script.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum
operator >=	txfeerate.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK >= b.nCoinPerK; }$/;"	f	class:CFeeRate
originPeer	block.h	/^    mutable CNode *originPeer;$/;"	m	class:CBlock
overflow	txmempool.h	/^    pool_map overflow;$/;"	m	class:CPool
pSHA256InitState	main.cpp	/^static const unsigned int pSHA256InitState[8] =$/;"	v	file:
param	block.h	/^		CParam param; $/;"	m	class:CTransaction
param1	net.h	/^    void* param1;$/;"	m	class:CRequestTracker
params_Bech32HRP	coinaddr.cpp	/^static bool params_Bech32HRP(int ifaceIndex, string strName)$/;"	f	file:
path	chain.h	/^  char path[PATH_MAX+1];$/;"	m	struct:ChainOp
pathEnv	txidx.h	/^    boost::filesystem::path pathEnv;$/;"	m	class:CDBEnv
pdb	txidx.h	/^    Db* pdb;$/;"	m	class:CDB
peer	net.h	/^		CNode *peer;$/;"	m	class:CValidateState
peer	shlib.h	/^    shpeer_t peer;$/;"	m	class:SHPeer
pending	txmempool.h	/^    pool_map pending;$/;"	m	class:CPool
pfilter	net.h	/^    CBloomFilter *pfilter;$/;"	m	class:CNode
phashBlock	block.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
phexdigit	util.cpp	/^static signed char phexdigit[256] =$/;"	v	file:
pindexBestHeader	wallet.h	/^		CBlockIndex *pindexBestHeader;$/;"	m	class:CWallet
pindexBestHeaderSend	net.h	/^		CBlockIndex *pindexBestHeaderSend;$/;"	m	class:CNode
pindexBestKnownBlock	net.h	/^		CBlockIndex *pindexBestKnownBlock;$/;"	m	class:CNode
pindexLastBlock	net.h	/^		CBlockIndex *pindexLastBlock;$/;"	m	class:CNode
pindexLastGetBlocksBegin	net.h	/^    CBlockIndex* pindexLastGetBlocksBegin;$/;"	m	class:CNode
pindexLastHeader	net.h	/^		CBlockIndex *pindexLastHeader;$/;"	m	class:CNode
pkey	shlib.h	/^    mutable shkey_t pkey;$/;"	m	class:SHPeer
pnext	block.h	/^    CBlockIndex* pnext;$/;"	m	class:CBlockIndex
pool	block_cmpct.h	/^		CTxMemPool* pool;$/;"	m	class:PartiallyDownloadedBlock
pool_map	txmempool.h	/^typedef map<const uint256, CPoolTx> pool_map;$/;"	t
popstack	script.cpp	/^static inline void popstack(vector<valtype>& stack)$/;"	f	file:
pos	block.h	/^    CDiskTxPos pos;$/;"	m	class:CTxIndex
pos	chain.h	/^  int pos;$/;"	m	struct:ChainOp
ppmutexOpenSSL	util.cpp	/^static CCriticalSection** ppmutexOpenSSL;$/;"	v	file:
pprev	block.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
ppszTypeName	protocol.cpp	/^static const char* ppszTypeName[] =$/;"	v	file:
prefilled_count	block_cmpct.h	/^		size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
prefilledtxn	block_cmpct.h	/^		std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:CBlockHeaderAndShortTxIDs
prevout	block.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
priLikely	txfeerate.h	/^    double priLikely, priUnlikely;$/;"	m	class:CBlockPolicyEstimator
priStats	txfeerate.h	/^    TxConfirmStats feeStats, priStats;$/;"	m	class:CBlockPolicyEstimator
priUnlikely	txfeerate.h	/^    double priLikely, priUnlikely;$/;"	m	class:CBlockPolicyEstimator
print	block.h	/^    void print() const$/;"	f	class:CBlockIndex
print	block.h	/^    void print() const$/;"	f	class:CDiskBlockIndex
print	block.h	/^    void print() const$/;"	f	class:CDiskTxPos
print	block.h	/^    void print() const$/;"	f	class:COutPoint
print	block.h	/^    void print() const$/;"	f	class:CTxIn
print	block.h	/^    void print()$/;"	f	class:CBlock
print	block.h	/^    void print(int ifaceIndex)$/;"	f	class:CTransaction
print	protocol.cpp	/^void CInv::print() const$/;"	f	class:CInv
print	script.h	/^    void print() const$/;"	f	class:CScript
print	wallet.h	/^		void print() const$/;"	f	class:COutput
processBlock	txfeerate.cpp	/^void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,$/;"	f	class:CBlockPolicyEstimator
processBlockTx	txfeerate.cpp	/^void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, CPoolTx& entry)$/;"	f	class:CBlockPolicyEstimator
processTransaction	txfeerate.cpp	/^void CBlockPolicyEstimator::processTransaction(CPoolTx& entry, bool fCurrentEstimate)$/;"	f	class:CBlockPolicyEstimator
program	script.h	/^	unsigned char program[40];$/;"	m	struct:WitnessUnknown
pskip	block.h	/^    CBlockIndex *pskip;$/;"	m	class:CBlockIndex
pszBase58	base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptx	block.h	/^    CTransaction* ptx;$/;"	m	class:CInPoint
pubkey	dikey.h	/^	CPubKey pubkey;$/;"	m	struct:DIExtPubKey
pubkey	eckey.h	/^	CPubKey pubkey;$/;"	m	struct:ECExtPubKey
push_int64	script.h	/^    CScript& push_int64(int64 n)$/;"	f	class:CScript
push_uint64	script.h	/^    CScript& push_uint64(uint64 n)$/;"	f	class:CScript
pwallet	wallet.h	/^		CWallet *pwallet;$/;"	m	class:CWalletTx
pwalletdbEncryption	wallet.h	/^		CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
queryHashes	txmempool.h	/^    void queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CPool
queue	mruset.h	/^		std::deque<T> queue;$/;"	m	class:mruset
real_strprintf	util.cpp	/^string real_strprintf(const std::string &format, int dummy, ...)$/;"	f
reject	block.cpp	/^void CBlockHeader::reject(CValidateState *state, int err_code, string err_text)$/;"	f	class:CBlockHeader
reject	block.cpp	/^void CTransaction::reject(CValidateState *state, int err_code, string err_text)$/;"	f	class:CTransaction
removeTx	txfeerate.cpp	/^void CBlockPolicyEstimator::removeTx(uint256 hash)$/;"	f	class:CBlockPolicyEstimator
removeTx	txfeerate.cpp	/^void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex)$/;"	f	class:TxConfirmStats
rollingMinimumFeeRate	txfeerate.h	/^    mutable double rollingMinimumFeeRate;$/;"	m	class:CBlockPolicyEstimator
round	txfeerate.cpp	/^CAmount FeeFilterRounder::round(CAmount currentMinFee)$/;"	f	class:FeeFilterRounder
runCommand	util.cpp	/^void runCommand(std::string strCommand)$/;"	f
sError	net.h	/^		std::string sError;$/;"	m	class:CValidateState
script	script.cpp	/^    CScript *script;$/;"	m	class:CScriptVisitor	file:
scriptPub	txcreator.h	/^    CScript scriptPub;$/;"	m	class:CTxBatchCreator
scriptPubKey	block.h	/^		CScript scriptPubKey;$/;"	m	class:CTxOut
scriptSig	block.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scriptWitness	block.h	/^    CScriptWitness scriptWitness;$/;"	m	class:CTxInWitness
scriptnum_error	script.h	/^    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum_error
scriptnum_error	script.h	/^class scriptnum_error : public std::runtime_error$/;"	c
secp256k1_context_sign	eckey.cpp	/^static secp256k1_context* secp256k1_context_sign = NULL;$/;"	v	file:
secp256k1_context_verify	eckey.cpp	/^static secp256k1_context* secp256k1_context_verify = NULL;$/;"	v	file:
serialize	script.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum
serv_state	chain.cpp	/^static bool serv_state(CIface *iface, int flag)$/;"	f	file:
server_shutdown	init.cpp	/^void server_shutdown(void)$/;"	f
set	mruset.h	/^		std::set<T> set;$/;"	m	class:mruset
setAddrKnown	net.h	/^    std::set<CAddress> setAddrKnown;$/;"	m	class:CNode
setAutoLock	txcreator.h	/^		void setAutoLock(bool b)$/;"	f	class:CTxCreator
setAutoParam	txcreator.h	/^		void setAutoParam(bool b)$/;"	f	class:CTxCreator
setBanned	net.h	/^    static std::map<CNetAddr, int64> setBanned;$/;"	m	class:CNode
setBlockIndexValid	block.cpp	/^ValidIndexSet setBlockIndexValid[MAX_COIN_IFACE];$/;"	v
setCoins	txcreator.h	/^    set<pair<const CWalletTx*,unsigned int> > setCoins;$/;"	m	class:CTxBatchCreator
setHighFeeRate	txcreator.h	/^		void setHighFeeRate()$/;"	f	class:CTxCreator
setInput	txcreator.h	/^    coin_set setInput;$/;"	m	class:CTxCreator
setInventoryKnown	net.h	/^    mruset<CInv> setInventoryKnown;$/;"	m	class:CNode
setKnown	net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setLocal	txmempool.h	/^    void setLocal(bool val)$/;"	f	class:CPoolTx
setLowFeeRate	txcreator.h	/^		void setLowFeeRate()$/;"	f	class:CTxCreator
setSeq	txcreator.h	/^		map<unsigned int,unsigned int> setSeq;$/;"	m	class:CTxCreator
set_serv_state	chain.cpp	/^static void set_serv_state(CIface *iface, int flag)$/;"	f	file:
set_vch	script.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum
sha256_BlockMerkleRoot	sha256d_merkle.cpp	/^uint256 sha256_BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
sha256d_BlockMerkleRoot	sha256d_merkle.cpp	/^uint256 sha256d_BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
sha256d_BlockWitnessMerkleRoot	sha256d_merkle.cpp	/^uint256 sha256d_BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
sha256d_ComputeMerkleRoot	sha256d_merkle.cpp	/^uint256 sha256d_ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) $/;"	f
shnet_inform	shlib.h	/^inline int shnet_inform(CIface *iface, int tx_op, void *data, size_t data_len)$/;"	f
shorttxidk0	block_cmpct.h	/^		mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxidk1	block_cmpct.h	/^		mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	block_cmpct.h	/^		std::vector<uint64_t> shorttxids;$/;"	m	class:CBlockHeaderAndShortTxIDs
sig	shlib.h	/^    shsig_t sig;$/;"	m	class:SHSig
size	key.h	/^		unsigned int size() const { return (vch.size()); }$/;"	f	class:CKey
size	key.h	/^		unsigned int size() const { return vchPubKey.size(); }$/;"	f	class:CPubKey
size	mruset.h	/^		size_type size() const { return set.size(); }$/;"	f	class:mruset
size	txmempool.h	/^    int size()$/;"	f	class:CTxMemPool
size_type	mruset.h	/^		typedef typename std::set<T>::size_type size_type;$/;"	t	class:mruset
special_modulo	mnemonic.cpp	/^uint32_t special_modulo(int u, int v)$/;"	f
spring_bits	spring.c	/^typedef struct spring_bits$/;"	s	file:
spring_bits	spring.c	/^} spring_bits;$/;"	t	typeref:struct:spring_bits	file:
spring_loc_bits	spring.c	/^static void spring_loc_bits(spring_bits *bits)$/;"	f	file:
spring_loc_claim	spring.c	/^void spring_loc_claim(double lat, double lon)$/;"	f
spring_loc_search	spring.c	/^int spring_loc_search(double cur_lat, double cur_lon, double *lat_p, double *lon_p)$/;"	f
spring_loc_set	spring.c	/^void spring_loc_set(double lat, double lon)$/;"	f
spring_matrix_bit	spring.c	/^static unsigned int spring_matrix_bit(uint64_t seed)$/;"	f	file:
spring_matrix_compress	spring.c	/^void spring_matrix_compress(uint32_t matrix[3][3])$/;"	f
spring_render_fractal	spring.c	/^int spring_render_fractal(char *img_path, double zoom, double span, double x_of, double y_of)$/;"	f
stack	block.h	/^    cstack_t stack;$/;"	m	struct:CScriptWitness
stacktop	script.cpp	101;"	d	file:
stale	txmempool.h	/^    pool_map stale;$/;"	m	class:CPool
stamp	txmempool.h	/^    time_t stamp;$/;"	m	class:CPoolTx
stats	txfeerate.h	/^        TxConfirmStats *stats;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
strAccount	account.h	/^		string strAccount;$/;"	m	class:CAccountCache
strAccount	wallet.h	/^		std::string strAccount;$/;"	m	class:CAccountingEntry
strComment	wallet.h	/^		std::string strComment;$/;"	m	class:CAccountingEntry
strComment	wallet.h	/^		std::string strComment;$/;"	m	class:CWalletKey
strError	txcreator.h	/^    string strError; $/;"	m	class:CTxCreator
strFile	txidx.h	/^    std::string strFile;$/;"	m	class:CDB
strFromAccount	wallet.h	/^		std::string strFromAccount;$/;"	m	class:CWalletTx
strMiscWarning	util.cpp	/^string strMiscWarning;$/;"	v
strOtherAccount	wallet.h	/^		std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strSubVer	net.h	/^    std::string strSubVer;$/;"	m	class:CNode
strSubVer	net.h	/^    std::string strSubVer;$/;"	m	class:CNodeStats
strWalletFile	wallet.h	/^		std::string strWalletFile;$/;"	m	class:CWallet
string_list	mnemonic.h	/^typedef vector<string> string_list;$/;"	t
szMemMax	txmempool.h	/^    size_t szMemMax;$/;"	m	class:CPool
tableBlockIndex	block.cpp	/^blkidx_t tableBlockIndex[MAX_COIN_IFACE];$/;"	v
threadId	net.h	/^enum threadId$/;"	g
total	chain.h	/^  unsigned int total;$/;"	m	struct:ChainOp
trust	block.cpp	/^bool CBlock::trust(int deg, const char *msg, ...)$/;"	f	class:CBlock
tx	block_cmpct.h	/^		CTransactionRef& tx;$/;"	m	struct:TransactionCompressor
tx	block_cmpct.h	/^	CTransactionRef tx;$/;"	m	struct:PrefilledTransaction
tx	txmempool.h	/^    CTransaction tx;$/;"	m	class:CPoolTx
tx	txsignature.h	/^		CTransaction *tx;$/;"	m	class:CSignature
tx	wallet.h	/^		const CWalletTx *tx;$/;"	m	class:COutput
txCtAvg	txfeerate.h	/^    std::vector<double> txCtAvg;$/;"	m	class:TxConfirmStats
tx_HasValidOps	block.cpp	/^static bool tx_HasValidOps(CIface *iface, const CScript& script)$/;"	f	file:
tx_cache	block.h	/^typedef std::map<uint256, CTransaction> tx_cache;$/;"	t
tx_map	block.h	/^typedef map< uint256, vector<uint256> > tx_map;$/;"	t
tx_map	coin.cpp	/^typedef map< uint256, vector<uint256> > tx_map;$/;"	t	file:
txcreator_AddDummySignature	txcreator.cpp	/^static void txcreator_AddDummySignature(CIface *iface, const CTransaction& tx, int nOut, CTxIn& in, CTxInWitness& wit)$/;"	f	file:
txcreator_RecentBlockHeight	txcreator.cpp	/^static uint32_t txcreator_RecentBlockHeight(CIface *iface)$/;"	f	file:
txn	block_cmpct.h	/^		std::vector<CTransactionRef> txn;$/;"	m	class:BlockTransactions
txn	bloom.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txn_available	block_cmpct.h	/^		std::vector<CTransactionRef> txn_available;$/;"	m	class:PartiallyDownloadedBlock
txnouttype	script.h	/^enum txnouttype$/;"	g
unconfTxs	txfeerate.h	/^    std::vector<std::vector<int> > unconfTxs;  \/\/unconfTxs[Y][X]$/;"	m	class:TxConfirmStats
unset_serv_state	chain.cpp	/^static void unset_serv_state(CIface *iface, int flag)$/;"	f	file:
vAddr	account.h	/^		CCoinAddr vAddr[MAX_ACCADDR];$/;"	m	class:CAccountCache
vAddrToSend	net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vBatchIn	txcreator.h	/^    vector<CTxIn> vBatchIn;$/;"	m	class:CTxBatchCreator
vBits	bloom.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlockHashesToAnnounce	net.h	/^		std::vector<uint256> vBlockHashesToAnnounce;$/;"	m	class:CNode
vBytes	bloom.h	/^        std::vector<unsigned char> vBytes;$/;"	m	class:CPartialMerkleTree
vData	matrix.h	/^		uint32_t vData[3][3];$/;"	m	class:CTxMatrix
vData	net.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vHash	bloom.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHave	block.h	/^		std::vector<uint256> vHave;$/;"	m	class:CBlockLocator
vInventoryToSend	net.h	/^    std::vector<CInv> vInventoryToSend;$/;"	m	class:CNode
vMatchedTxn	bloom.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vMerkleBranch	main.h	/^    std::vector<uint256> vMerkleBranch;$/;"	m	class:CMerkleTx
vOrderForm	wallet.h	/^		std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vRecv	net.h	/^    CDataStream vRecv;$/;"	m	class:CNode
vSend	net.h	/^    CDataStream vSend;$/;"	m	class:CNode
vSpent	block.h	/^    std::vector<CDiskTxPos> vSpent;$/;"	m	class:CTxIndex
vTxList	txcreator.h	/^    vector<CWalletTx> vTxList;$/;"	m	class:CTxBatchCreator
validate_render_fractal	matrix.cpp	/^	int validate_render_fractal(int ifaceIndex, char *img_path, double zoom, double span, double x_of, double y_of)$/;"	f
valtype	coinaddr.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	script.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	txmempool.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	txsignature.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
value_type	mruset.h	/^		typedef T value_type;$/;"	t	class:mruset
vch	key.h	/^    CSecret vch;$/;"	m	class:CKey
vchChain	hdkey.h	/^    cbuff vchChain;$/;"	m	class:HDPrivKey
vchChain	hdkey.h	/^    cbuff vchChain;$/;"	m	class:HDPubKey
vchCryptedKey	crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	base58.h	/^		cbuff vchData;$/;"	m	class:CBase58Data
vchDefaultKey	wallet.h	/^		CPubKey vchDefaultKey;$/;"	m	class:CWallet
vchFingerprint	dikey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:DIExtKey
vchFingerprint	dikey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:DIExtPubKey
vchFingerprint	eckey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:ECExtKey
vchFingerprint	eckey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:ECExtPubKey
vchFromString	shlib.h	/^inline std::vector<unsigned char> vchFromString(const std::string &str) {$/;"	f
vchOtherDerivationParameters	crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	wallet.h	/^		CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPub	key.h	/^    cbuff vchPub;$/;"	m	class:CKey
vchPubKey	key.h	/^		std::vector<unsigned char> vchPubKey;$/;"	m	class:CPubKey
vchPubKey	wallet.h	/^		CPubKey vchPubKey;$/;"	m	class:CAccount
vchSalt	crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchVersion	base58.h	/^		cbuff vchVersion;$/;"	m	class:CBase58Data
version	script.h	/^	unsigned int version;$/;"	m	struct:WitnessUnknown
vfSpent	wallet.h	/^		std::vector<char> vfSpent; \/\/ which outputs are already spent$/;"	m	class:CWalletTx
vin	block.h	/^    std::vector<CTxIn> vin;$/;"	m	class:CTransactionCore
vout	block.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CTransactionCore
vstrprintf	util.cpp	/^string vstrprintf(const std::string &format, va_list ap)$/;"	f
vtx	block.h	/^    std::vector<CTransaction> vtx;$/;"	m	class:CBlock
vtxPrev	wallet.h	/^		std::vector<CMerkleTx> vtxPrev;$/;"	m	class:CWalletTx
vtxinwit	block.h	/^    std::vector<CTxInWitness> vtxinwit;$/;"	m	class:CTxWitness
wallet	account.h	/^		mutable CWallet *wallet;$/;"	m	class:CAccountCache
wallet_MergeTx	wallettx.cpp	/^static bool wallet_MergeTx(CWallet *wallet, const uint256& hash, const CWalletTx& wtxIn, CWalletTx& wtx)$/;"	f	file:
wallet_wtx_filename	wallet.cpp	/^static const char *wallet_wtx_filename(CWallet *wallet)$/;"	f	file:
wit	block.h	/^    CTxWitness wit;$/;"	m	class:CTransactionCore
witness_v0_SignatureHash	txsignature.cpp	/^static uint256 witness_v0_SignatureHash(CScript scriptCode, CTransaction& txTo, unsigned int nIn, int nHashType, int64 nAmount)$/;"	f	file:
x	spring.c	/^  unsigned int x, y;$/;"	m	struct:spring_bits	file:
y	spring.c	/^  unsigned int x, y;$/;"	m	struct:spring_bits	file:
~CBase58Data	base58.h	/^		~CBase58Data()$/;"	f	class:CBase58Data
~CCrypter	crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	txidx.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBEnv	txidx.cpp	/^CDBEnv::~CDBEnv()$/;"	f	class:CDBEnv
~CInit	util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKeyStore	keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CNode	net.h	/^    ~CNode()$/;"	f	class:CNode
