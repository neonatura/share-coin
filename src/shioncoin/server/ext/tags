!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCADDRF_DERIVE	../../server/account.h	39;"	d
ACCADDRF_DILITHIUM	../../server/account.h	43;"	d
ACCADDRF_STATIC	../../server/account.h	41;"	d
ACCADDRF_WITNESS	../../server/account.h	37;"	d
ACCADDR_CHANGE	../../server/wallet.h	64;"	d
ACCADDR_EXEC	../../server/wallet.h	66;"	d
ACCADDR_EXT	../../server/wallet.h	70;"	d
ACCADDR_HDKEY	../../server/wallet.h	68;"	d
ACCADDR_MINER	../../server/wallet.h	74;"	d
ACCADDR_NOTARY	../../server/wallet.h	72;"	d
ACCADDR_RECV	../../server/wallet.h	62;"	d
ADDR_BASE58	../../server/coinaddr.h	42;"	d
ADDR_BECH32	../../server/coinaddr.h	43;"	d
ADDR_UNKNOWN	../../server/coinaddr.h	41;"	d
ADD_SERIALIZE_METHODS	../../server/block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactions
ADD_SERIALIZE_METHODS	../../server/block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	class:BlockTransactionsRequest
ADD_SERIALIZE_METHODS	../../server/block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	class:CBlockHeaderAndShortTxIDs
ADD_SERIALIZE_METHODS	../../server/block_cmpct.h	/^		ADD_SERIALIZE_METHODS;$/;"	m	struct:TransactionCompressor
ADD_SERIALIZE_METHODS	../../server/block_cmpct.h	/^	ADD_SERIALIZE_METHODS;$/;"	m	struct:PrefilledTransaction
ALGOBITS_NUM_BITS	../../server/algobits.h	53;"	d
ALGOBITS_TOP_BITS	../../server/algobits.h	49;"	d
ALGOBITS_TOP_MASK	../../server/algobits.h	51;"	d
ALGO_BLAKE2S	../../server/algobits.h	33;"	d
ALGO_GROESTL	../../server/algobits.h	35;"	d
ALGO_KECCAK	../../server/algobits.h	31;"	d
ALGO_QUBIT	../../server/algobits.h	34;"	d
ALGO_SCRYPT	../../server/algobits.h	29;"	d
ALGO_SHA256D	../../server/algobits.h	30;"	d
ALGO_SKEIN	../../server/algobits.h	36;"	d
ALGO_X11	../../server/algobits.h	32;"	d
AbortMessage	../../server/net.h	/^    void AbortMessage()$/;"	f	class:CNode
AbstractThresholdConditionChecker	../../server/versionbits.h	/^class AbstractThresholdConditionChecker {$/;"	c
AcceptOffer	../../server/block.cpp	/^COffer *CTransaction::AcceptOffer(COffer *offerIn)$/;"	f	class:CTransaction
AcceptWalletTransaction	../../server/wallet.cpp	/^bool CWalletTx::AcceptWalletTransaction()$/;"	f	class:CWalletTx
AddActiveTx	../../server/txmempool.cpp	/^bool CPool::AddActiveTx(CPoolTx& ptx)$/;"	f	class:CPool
AddAddressKnown	../../server/net.h	/^    void AddAddressKnown(const CAddress& addr)$/;"	f	class:CNode
AddCScript	../../server/keystore.cpp	/^bool CBasicKeyStore::AddCScript(const CScript& redeemScript)$/;"	f	class:CBasicKeyStore
AddCScript	../../server/wallet.cpp	/^bool CWallet::AddCScript(const CScript& redeemScript)$/;"	f	class:CWallet
AddCell	../../server/matrix.h	/^		void AddCell(int row, int col, unsigned int val)$/;"	f	class:CTxMatrix
AddCheckpoint	../../server/checkpoints.cpp	/^bool CCheckpoints::AddCheckpoint(CBlockIndex *pindex)$/;"	f	class:CCheckpoints
AddCheckpoint	../../server/checkpoints.cpp	/^bool CCheckpoints::AddCheckpoint(int height, uint256 hash)$/;"	f	class:CCheckpoints
AddExtTx	../../server/txcreator.cpp	/^bool CTxCreator::AddExtTx(CWalletTx *tx, const CScript& scriptPubKey, int64 nTxFee, int64 nValue)$/;"	f	class:CTxCreator
AddInput	../../server/txcreator.cpp	/^bool CTxCreator::AddInput(CWalletTx *tx, unsigned int n, unsigned int seq)$/;"	f	class:CTxCreator
AddInput	../../server/txcreator.cpp	/^bool CTxCreator::AddInput(uint256 hashTx, unsigned int n, unsigned int seq)$/;"	f	class:CTxCreator
AddInput	../../server/txmempool.h	/^    void AddInput(CTransaction prevTx)$/;"	f	class:CPoolTx
AddInvalTx	../../server/txmempool.cpp	/^void CPool::AddInvalTx(CPoolTx& ptx)$/;"	f	class:CPool
AddInventoryKnown	../../server/net.h	/^    void AddInventoryKnown(const CInv& inv)$/;"	f	class:CNode
AddKey	../../server/keystore.cpp	/^bool CBasicKeyStore::AddKey(const DIKey& key)$/;"	f	class:CBasicKeyStore
AddKey	../../server/keystore.cpp	/^bool CBasicKeyStore::AddKey(const ECKey& key)$/;"	f	class:CBasicKeyStore
AddKey	../../server/wallet.cpp	/^bool CWallet::AddKey(const DIKey& key)$/;"	f	class:CWallet
AddKey	../../server/wallet.cpp	/^bool CWallet::AddKey(const ECKey& key)$/;"	f	class:CWallet
AddOutput	../../server/txcreator.cpp	/^bool CTxCreator::AddOutput(CScript scriptPubKey, int64 nValue, bool fInsert)$/;"	f	class:CTxCreator
AddOutput	../../server/txcreator.cpp	/^bool CTxCreator::AddOutput(const CPubKey& pubkey, int64 nValue, bool fInsert)$/;"	f	class:CTxCreator
AddOutput	../../server/txcreator.cpp	/^bool CTxCreator::AddOutput(const CTxDestination& address, int64 nValue, bool fInsert)$/;"	f	class:CTxCreator
AddOverflowTx	../../server/txmempool.cpp	/^bool CPool::AddOverflowTx(CPoolTx& ptx)$/;"	f	class:CPool
AddPendingTx	../../server/txmempool.cpp	/^bool CPool::AddPendingTx(CPoolTx& ptx)$/;"	f	class:CPool
AddRef	../../server/net.h	/^    CNode* AddRef(int64 nTimeout=0)$/;"	f	class:CNode
AddStaleTx	../../server/txmempool.cpp	/^bool CPool::AddStaleTx(CPoolTx& ptx)$/;"	f	class:CPool
AddSupportingTransactions	../../server/wallet.cpp	/^void CWalletTx::AddSupportingTransactions()$/;"	f	class:CWalletTx
AddTimeData	../../server/util.cpp	/^void AddTimeData(const CNetAddr& ip, int64 nTime)$/;"	f
AddToWallet	../../server/wallet.cpp	/^bool CWallet::AddToWallet(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddToWalletIfInvolvingMe	../../server/wallet.cpp	/^bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate, bool fFindBlock)$/;"	f	class:CWallet
AddTx	../../server/txmempool.cpp	/^bool CPool::AddTx(CTransaction& tx, CNode *pfrom, uint160 hColor)$/;"	f	class:CPool
AddTx	../../server/wallettx.cpp	/^bool CWallet::AddTx(const CTransaction& tx, const CBlock* pblock)$/;"	f	class:CWallet
AddTx	../../server/wallettx.cpp	/^bool CWallet::AddTx(const CWalletTx& wtxIn)$/;"	f	class:CWallet
AddTx	../../server/wallettx.cpp	/^bool CWallet::AddTx(const uint256& hTx, const CBlock *pblock)$/;"	f	class:CWallet
AddTxIndex	../../server/txidx.cpp	/^bool CTxDB::AddTxIndex(const CTransaction& tx, const CDiskTxPos& pos, int nHeight)$/;"	f	class:CTxDB
AllowFree	../../server/wallet.h	/^		bool AllowFree(double dPriority)$/;"	f	class:CWallet
ApiItems	../../shapi/shapi_api.h	/^typedef vector<Object> ApiItems;$/;"	t
ApiItems	../../stratum/stratum_api.h	/^typedef vector<Object> ApiItems;$/;"	t
Append	../../server/matrix.cpp	/^void CTxMatrix::Append(int heightIn, uint256 hash)$/;"	f	class:CTxMatrix
AppendBlockFile	../../server/main.cpp	/^FILE* AppendBlockFile(unsigned int& nFileRet)$/;"	f
ApproximateBestSubset	../../server/wallet.cpp	/^static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsigned int> > >vValue, int64 nTotalLower, int64 nTargetValue,$/;"	f	file:
AreInputsSpent	../../server/txmempool.cpp	/^bool CPool::AreInputsSpent(CPoolTx& ptx)$/;"	f	class:CPool
AreInputsStandard	../../server/main.cpp	/^bool CTransaction::AreInputsStandard(int ifaceIndex, const MapPrevTx& mapInputs) const$/;"	f	class:CTransaction
AskFor	../../server/net.h	/^    void AskFor(CInv& inv)$/;"	f	class:CNode
AvailableAccountCoins	../../server/wallet.cpp	/^void CWallet::AvailableAccountCoins(string strAccount, vector<COutput>& vCoins, bool fOnlyConfirmed, uint160 hColor) const$/;"	f	class:CWallet
AvailableAddrCoins	../../server/wallet.cpp	/^void CWallet::AvailableAddrCoins(vector<COutput>& vCoins, const CCoinAddr& filterAddr, int64& nTotalValue, bool fOnlyConfirmed) const$/;"	f	class:CWallet
AvailableCoins	../../server/wallet.cpp	/^void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed)$/;"	f	class:CWallet
BASE58_DEFAULT_PUBKEY_ADDRESS	../../proto/coin_proto.h	39;"	d
BASE58_DEFAULT_SCRIPT_ADDRESS	../../proto/coin_proto.h	40;"	d
BASE58_DEFAULT_SCRIPT_ADDRESS	../../server/base58.h	36;"	d
BASE58_DEFAULT_SECRET_KEY	../../proto/coin_proto.h	41;"	d
BASE58_EXT_PUBLIC_KEY	../../proto/coin_proto.h	172;"	d
BASE58_EXT_PUBLIC_KEY	../../server/coinaddr.h	/^			BASE58_EXT_PUBLIC_KEY,$/;"	e	enum:CCoinAddr::__anon3
BASE58_EXT_SECRET_KEY	../../proto/coin_proto.h	174;"	d
BASE58_EXT_SECRET_KEY	../../server/coinaddr.h	/^			BASE58_EXT_SECRET_KEY,$/;"	e	enum:CCoinAddr::__anon3
BASE58_PUBKEY_ADDRESS	../../proto/coin_proto.h	164;"	d
BASE58_PUBKEY_ADDRESS	../../server/coinaddr.h	/^			BASE58_PUBKEY_ADDRESS,$/;"	e	enum:CCoinAddr::__anon3
BASE58_SCRIPT_ADDRESS	../../proto/coin_proto.h	166;"	d
BASE58_SCRIPT_ADDRESS	../../server/coinaddr.h	/^			BASE58_SCRIPT_ADDRESS,$/;"	e	enum:CCoinAddr::__anon3
BASE58_SCRIPT_ADDRESS2	../../server/coinaddr.h	/^			BASE58_SCRIPT_ADDRESS2,$/;"	e	enum:CCoinAddr::__anon3
BASE58_SCRIPT_ADDRESS_2	../../proto/coin_proto.h	168;"	d
BASE58_SECRET_KEY	../../proto/coin_proto.h	170;"	d
BASE58_SECRET_KEY	../../server/coinaddr.h	/^			BASE58_SECRET_KEY,$/;"	e	enum:CCoinAddr::__anon3
BCMAP_IDLE_TIME	../../blockchain/bc_block.c	34;"	d	file:
BCMAP_LOCK	../../blockchain/bc.h	50;"	d
BCOP_DOWNLOAD	../../server/chain.h	36;"	d
BCOP_EXPORT	../../server/chain.h	35;"	d
BCOP_IMPORT	../../server/chain.h	34;"	d
BCOP_MINER	../../server/chain.h	38;"	d
BCOP_NONE	../../server/chain.h	33;"	d
BCOP_VALIDATE	../../server/chain.h	37;"	d
BC_ARCH_EXTENSION	../../blockchain/bc_arch.c	32;"	d	file:
BC_BLOCKS_PER_JOURNAL	../../blockchain/bc.h	46;"	d
BC_INDEX_EXTENSION	../../blockchain/bc_index.c	33;"	d	file:
BC_MAP_BLOCK_SIZE	../../blockchain/bc_fmap.c	39;"	d	file:
BC_MAP_BLOCK_SIZE	../../blockchain/bc_fmap.c	41;"	d	file:
BC_MAX_NAME_LENGTH	../../blockchain/bc.h	48;"	d
BC_TABLE_EXTENSION	../../blockchain/bc_table.h	42;"	d
BC_TABLE_NULL_POS	../../blockchain/bc_table.h	39;"	d
BC_TABLE_POS_MASK	../../blockchain/bc_table.h	38;"	d
BC_TABLE_SEARCH_POS	../../blockchain/bc_table.h	40;"	d
BC_TABLE_SIZE	../../blockchain/bc_table.h	36;"	d
BIP16Height	../../proto/coin_proto.h	/^	int BIP16Height;$/;"	m	struct:coin_iface_t
BIP30Height	../../proto/coin_proto.h	/^	int BIP30Height;$/;"	m	struct:coin_iface_t
BIP32Hash	../../server/eckey.cpp	/^void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])$/;"	f
BIP32_EXTKEY_SIZE	../../server/eckey.h	/^const unsigned int BIP32_EXTKEY_SIZE = 74;$/;"	v
BIP32_HARDENED_KEY_LIMIT	../../server/wallet.h	/^const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;$/;"	v
BIP34Height	../../proto/coin_proto.h	/^	int BIP34Height;$/;"	m	struct:coin_iface_t
BIP65Height	../../proto/coin_proto.h	/^	int BIP65Height;$/;"	m	struct:coin_iface_t
BIP66Height	../../proto/coin_proto.h	/^	int BIP66Height;$/;"	m	struct:coin_iface_t
BIP9Deployment	../../proto/coin_proto.h	/^struct BIP9Deployment {$/;"	s
BIP9Deployment	../../proto/coin_proto.h	/^typedef struct BIP9Deployment BIP9Deployment;$/;"	t	typeref:struct:BIP9Deployment
BIP9DeploymentInfo	../../server/versionbits.h	/^struct BIP9DeploymentInfo {$/;"	s
BLAKE2S_WORK_CYCLE_TIME	../../stratum/stratum_blake2s.c	33;"	d	file:
BLOCK_ALGO_BLAKE2S	../../server/algobits.h	43;"	d
BLOCK_ALGO_GROESTL	../../server/algobits.h	45;"	d
BLOCK_ALGO_KECCAK	../../server/algobits.h	41;"	d
BLOCK_ALGO_QUBIT	../../server/algobits.h	44;"	d
BLOCK_ALGO_SCRYPT	../../server/algobits.h	39;"	d
BLOCK_ALGO_SHA256D	../../server/algobits.h	40;"	d
BLOCK_ALGO_SKEIN	../../server/algobits.h	46;"	d
BLOCK_ALGO_X11	../../server/algobits.h	42;"	d
BLOCK_DOWNLOAD_WINDOW	../../proto/coin_proto.h	/^static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;$/;"	v
BLOCK_FAILED_CHILD	../../server/block.h	/^    BLOCK_FAILED_CHILD       =   64, \/\/!< descends from failed block$/;"	e	enum:BlockStatus
BLOCK_FAILED_MASK	../../server/block.h	/^    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,$/;"	e	enum:BlockStatus
BLOCK_FAILED_VALID	../../server/block.h	/^    BLOCK_FAILED_VALID       =   32, \/\/!< stage after last reached validness failed$/;"	e	enum:BlockStatus
BLOCK_HAVE_DATA	../../server/block.h	/^    BLOCK_HAVE_DATA          =    8, \/\/!< full block available in blk*.dat$/;"	e	enum:BlockStatus
BLOCK_HAVE_MASK	../../server/block.h	/^    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,$/;"	e	enum:BlockStatus
BLOCK_HAVE_UNDO	../../server/block.h	/^    BLOCK_HAVE_UNDO          =   16, \/\/!< undo data available in rev*.dat$/;"	e	enum:BlockStatus
BLOCK_OPT_WITNESS	../../server/block.h	/^    BLOCK_OPT_WITNESS       =   128, \/\/!< block data in blk*.data was received with a witness-enforcing client$/;"	e	enum:BlockStatus
BLOCK_STALLING_TIMEOUT	../../proto/coin_proto.h	/^static const unsigned int BLOCK_STALLING_TIMEOUT = 2;$/;"	v
BLOCK_VALID_CHAIN	../../server/block.h	/^    BLOCK_VALID_CHAIN        =    4,$/;"	e	enum:BlockStatus
BLOCK_VALID_HEADER	../../server/block.h	/^    BLOCK_VALID_HEADER       =    1,$/;"	e	enum:BlockStatus
BLOCK_VALID_MASK	../../server/block.h	/^    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |$/;"	e	enum:BlockStatus
BLOCK_VALID_SCRIPTS	../../server/block.h	/^    BLOCK_VALID_SCRIPTS      =    5,$/;"	e	enum:BlockStatus
BLOCK_VALID_TRANSACTIONS	../../server/block.h	/^    BLOCK_VALID_TRANSACTIONS =    3,$/;"	e	enum:BlockStatus
BLOCK_VALID_TREE	../../server/block.h	/^    BLOCK_VALID_TREE         =    2,$/;"	e	enum:BlockStatus
BLOCK_VALID_UNKNOWN	../../server/block.h	/^    BLOCK_VALID_UNKNOWN      =    0,$/;"	e	enum:BlockStatus
BLOCK_VERSION	../../stratum/stratum_task.c	35;"	d	file:
BLOOM_TEST	../../server/net.h	103;"	d
BLOOM_UPDATE_ALL	../../server/net.h	/^  BLOOM_UPDATE_ALL = 1,$/;"	e	enum:bloomflags
BLOOM_UPDATE_MASK	../../server/net.h	/^  BLOOM_UPDATE_MASK = 3 $/;"	e	enum:bloomflags
BLOOM_UPDATE_NONE	../../server/net.h	/^  BLOOM_UPDATE_NONE = 0,$/;"	e	enum:bloomflags
BLOOM_UPDATE_P2PUBKEY_ONLY	../../server/net.h	/^  BLOOM_UPDATE_P2PUBKEY_ONLY = 2,$/;"	e	enum:bloomflags
BUILD_DATE	../../server/version.cpp	90;"	d	file:
BUILD_DATE	../../server/version.cpp	92;"	d	file:
BUILD_DESC	../../server/version.cpp	82;"	d	file:
BUILD_DESC	../../server/version.cpp	84;"	d	file:
BUILD_DESC_FROM_COMMIT	../../server/version.cpp	74;"	d	file:
BUILD_DESC_FROM_UNKNOWN	../../server/version.cpp	77;"	d	file:
BackupBlockChain	../../server/block.cpp	/^int BackupBlockChain(CIface *iface, unsigned int maxHeight)$/;"	f
Base58Prefix	../../server/wallet.cpp	/^const cbuff& CWallet::Base58Prefix(int type) const$/;"	f	class:CWallet
Base58Prefix	../../test/testcoin_bip32.cpp	/^static const std::vector<unsigned char>& Base58Prefix(Base58Type type) $/;"	f	file:
Base58Prefix	../../test/testcoin_sip33.cpp	/^static const std::vector<unsigned char>& Base58Prefix(Base58Type type) $/;"	f	file:
Base58Type	../../test/testcoin_bip32.cpp	/^enum Base58Type {$/;"	g	file:
Base58Type	../../test/testcoin_sip33.cpp	/^enum Base58Type {$/;"	g	file:
BeginMessage	../../server/net.h	/^    void BeginMessage(const char* pszCommand)$/;"	f	class:CNode
BeginTime	../../server/versionbits.cpp	/^      int64_t BeginTime(CIface * params) const { return params->vDeployments[id].nStartTime; }$/;"	f	class:__anon9::VersionBitsConditionChecker
BindWallet	../../server/wallet.h	/^			 void BindWallet(CWallet *pwalletIn)$/;"	f	class:CWalletTx
BlockAcceptSpringMatrix	../../server/matrix.cpp	/^bool BlockAcceptSpringMatrix(CIface *iface, CTransaction& tx, bool& fCheck)$/;"	f
BlockAcceptValidateMatrix	../../server/matrix.cpp	/^bool BlockAcceptValidateMatrix(CIface *iface, CTransaction& tx, CBlockIndex *pindex, bool& fCheck)$/;"	f
BlockGenerateSpringMatrix	../../server/matrix.cpp	/^bool BlockGenerateSpringMatrix(CIface *iface, CTransaction& tx, int64& nReward)$/;"	f
BlockGenerateValidateMatrix	../../server/matrix.cpp	/^bool BlockGenerateValidateMatrix(CIface *iface, CTransaction& tx, int64& nReward, uint64_t nBestHeight, uint64_t nCheckHeight)$/;"	f
BlockMerkleBranch	../../server/wit_merkle.cpp	/^std::vector<uint256> BlockMerkleBranch(const CBlock& block, uint32_t position)$/;"	f
BlockMerkleRoot	../../server/wit_merkle.cpp	/^uint256 BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BlockRetractSpringMatrix	../../server/matrix.cpp	/^void BlockRetractSpringMatrix(CIface *iface, CTransaction& tx, CBlockIndex *pindex)$/;"	f
BlockRetractValidateMatrix	../../server/matrix.cpp	/^void BlockRetractValidateMatrix(CIface *iface, const CTransaction& tx, CBlockIndex *pindex)$/;"	f
BlockStatus	../../server/block.h	/^enum BlockStatus {$/;"	g
BlockTransactions	../../server/block_cmpct.h	/^		BlockTransactions() {}$/;"	f	class:BlockTransactions
BlockTransactions	../../server/block_cmpct.h	/^		explicit BlockTransactions(const BlockTransactionsRequest& req) :$/;"	f	class:BlockTransactions
BlockTransactions	../../server/block_cmpct.h	/^class BlockTransactions $/;"	c
BlockTransactionsRequest	../../server/block_cmpct.h	/^class BlockTransactionsRequest $/;"	c
BlockTxCount	../../server/block_cmpct.h	/^		size_t BlockTxCount() const { return shorttxids.size() + prefilledtxn.size(); }$/;"	f	class:CBlockHeaderAndShortTxIDs
BlockVerifyValidateMatrix	../../server/matrix.cpp	/^bool BlockVerifyValidateMatrix(CIface *iface, CTransaction& tx, CBlockIndex *pindex)$/;"	f
BlockWitnessMerkleRoot	../../server/wit_merkle.cpp	/^uint256 BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
BuildMerkleTree	../../server/block_merkle.cpp	/^uint256 CBlock::BuildMerkleTree() const$/;"	f	class:CBlock
BuildSkip	../../server/block.cpp	/^void CBlockIndex::BuildSkip()$/;"	f	class:CBlockIndex
CAccount	../../server/wallet.h	/^		CAccount()$/;"	f	class:CAccount
CAccount	../../server/wallet.h	/^		CAccount(const CAccount& accountIn)$/;"	f	class:CAccount
CAccount	../../server/wallet.h	/^class CAccount$/;"	c
CAccountCache	../../server/account.h	/^		CAccountCache(CWallet *walletIn) { $/;"	f	class:CAccountCache
CAccountCache	../../server/account.h	/^		CAccountCache(CWallet *walletIn, CAccount accountIn, string strAccountIn = "")$/;"	f	class:CAccountCache
CAccountCache	../../server/account.h	/^		CAccountCache(CWallet *walletIn, CPubKey vchPubKeyIn, string strAccountIn = "")$/;"	f	class:CAccountCache
CAccountCache	../../server/account.h	/^class CAccountCache$/;"	c
CAccountingEntry	../../server/wallet.h	/^		CAccountingEntry()$/;"	f	class:CAccountingEntry
CAccountingEntry	../../server/wallet.h	/^class CAccountingEntry$/;"	c
CAmount	../../server/coin.h	/^typedef int64 CAmount;$/;"	t
CAmount	../../server/txfeerate.h	/^typedef int64 CAmount;$/;"	t
CBase58Data	../../server/base58.h	/^		CBase58Data()$/;"	f	class:CBase58Data
CBase58Data	../../server/base58.h	/^class CBase58Data$/;"	c
CBasicKeyStore	../../server/keystore.h	/^class CBasicKeyStore : public CKeyStore$/;"	c
CBitcoinExtKey	../../test/testcoin_bip32.cpp	/^typedef CBitcoinExtKeyBase<ECExtKey, BIP32_EXTKEY_SIZE, EXT_SECRET_KEY> CBitcoinExtKey;$/;"	t	file:
CBitcoinExtKeyBase	../../test/testcoin_bip32.cpp	/^		CBitcoinExtKeyBase() {}$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	../../test/testcoin_bip32.cpp	/^		CBitcoinExtKeyBase(const K &key) {$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	../../test/testcoin_bip32.cpp	/^		CBitcoinExtKeyBase(const std::string& strBase58c) {$/;"	f	class:CBitcoinExtKeyBase
CBitcoinExtKeyBase	../../test/testcoin_bip32.cpp	/^template<typename K, int Size, Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data$/;"	c	file:
CBitcoinExtPubKey	../../test/testcoin_bip32.cpp	/^typedef CBitcoinExtKeyBase<ECExtPubKey, BIP32_EXTKEY_SIZE, EXT_PUBLIC_KEY> CBitcoinExtPubKey;$/;"	t	file:
CBlock	../../server/block.h	/^    CBlock()$/;"	f	class:CBlock
CBlock	../../server/block.h	/^    CBlock(const CBlock& in_block)$/;"	f	class:CBlock
CBlock	../../server/block.h	/^    CBlock(const CBlockHeader &header)$/;"	f	class:CBlock
CBlock	../../server/block.h	/^class CBlock : public CBlockHeader$/;"	c
CBlockChain	../../blockchain/bc.h	/^typedef struct bc_t CBlockChain;$/;"	t	typeref:struct:bc_t
CBlockHeader	../../server/block.h	/^    CBlockHeader()$/;"	f	class:CBlockHeader
CBlockHeader	../../server/block.h	/^class CBlockHeader$/;"	c
CBlockHeaderAndShortTxIDs	../../server/block_cmpct.cpp	/^CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	../../server/block_cmpct.h	/^		CBlockHeaderAndShortTxIDs() {}$/;"	f	class:CBlockHeaderAndShortTxIDs
CBlockHeaderAndShortTxIDs	../../server/block_cmpct.h	/^class CBlockHeaderAndShortTxIDs $/;"	c
CBlockIndex	../../server/block.h	/^    CBlockIndex()$/;"	f	class:CBlockIndex
CBlockIndex	../../server/block.h	/^    CBlockIndex(CBlockHeader& block)$/;"	f	class:CBlockIndex
CBlockIndex	../../server/block.h	/^class CBlockIndex$/;"	c
CBlockIndexWorkComparator	../../server/block.h	/^struct CBlockIndexWorkComparator$/;"	s
CBlockLocator	../../server/block.h	/^		CBlockLocator() { }$/;"	f	class:CBlockLocator
CBlockLocator	../../server/block.h	/^		explicit CBlockLocator(const std::vector<uint256>& vHaveIn) : vHave(vHaveIn) {}$/;"	f	class:CBlockLocator
CBlockLocator	../../server/block.h	/^class CBlockLocator$/;"	c
CBlockPolicyEstimator	../../server/txfeerate.cpp	/^CBlockPolicyEstimator::CBlockPolicyEstimator(int ifaceIndexIn, const CFeeRate& _minRelayFee) : nBestSeenHeight(0)$/;"	f	class:CBlockPolicyEstimator
CBlockPolicyEstimator	../../server/txfeerate.h	/^class CBlockPolicyEstimator$/;"	c
CBloomFilter	../../server/bloom.cpp	/^CBloomFilter::CBloomFilter(int ifaceIndexIn, unsigned int nElements, double nFPRate, unsigned int nTweakIn, unsigned char nFlagsIn) :$/;"	f	class:CBloomFilter
CBloomFilter	../../server/net.h	/^    CBloomFilter(int ifaceIndexIn)$/;"	f	class:CBloomFilter
CBloomFilter	../../server/net.h	/^class CBloomFilter$/;"	c
CCheckpoints	../../server/checkpoints.h	/^		CCheckpoints(int ifaceIndexIn)$/;"	f	class:CCheckpoints
CCheckpoints	../../server/checkpoints.h	/^		CCheckpoints(int ifaceIndexIn, MapCheckpoints mapIn)$/;"	f	class:CCheckpoints
CCheckpoints	../../server/checkpoints.h	/^class CCheckpoints$/;"	c
CCoinAddr	../../server/coinaddr.h	/^    CCoinAddr()$/;"	f	class:CCoinAddr
CCoinAddr	../../server/coinaddr.h	/^    CCoinAddr(int ifaceIndexIn)$/;"	f	class:CCoinAddr
CCoinAddr	../../server/coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const CScript& script)$/;"	f	class:CCoinAddr
CCoinAddr	../../server/coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const CTxDestination &dest)$/;"	f	class:CCoinAddr
CCoinAddr	../../server/coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const char* pszAddress)$/;"	f	class:CCoinAddr
CCoinAddr	../../server/coinaddr.h	/^    CCoinAddr(int ifaceIndexIn, const std::string& strAddress)$/;"	f	class:CCoinAddr
CCoinAddr	../../server/coinaddr.h	/^class CCoinAddr : public CBase58Data$/;"	c
CCoinAddrVisitor	../../server/coinaddr.h	/^    CCoinAddrVisitor(CCoinAddr *addrIn) : addr(addrIn) { }$/;"	f	class:CCoinAddrVisitor
CCoinAddrVisitor	../../server/coinaddr.h	/^class CCoinAddrVisitor : public boost::static_visitor<bool>$/;"	c
CCoinSecret	../../server/base58.h	/^		CCoinSecret()$/;"	f	class:CCoinSecret
CCoinSecret	../../server/base58.h	/^		CCoinSecret(int ifaceIndex, const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CCoinSecret
CCoinSecret	../../server/base58.h	/^class CCoinSecret : public CBase58Data$/;"	c
CCrypter	../../server/crypter.h	/^    CCrypter()$/;"	f	class:CCrypter
CCrypter	../../server/crypter.h	/^class CCrypter$/;"	c
CDB	../../server/txidx.cpp	/^CDB::CDB(const char *pszFile, const char* pszMode) :$/;"	f	class:CDB
CDB	../../server/txidx.h	/^class CDB$/;"	c
CDBEnv	../../server/txidx.cpp	/^CDBEnv::CDBEnv() : dbenv(0)$/;"	f	class:CDBEnv
CDBEnv	../../server/txidx.h	/^class CDBEnv$/;"	c
CDiskBlockIndex	../../server/block.h	/^    CDiskBlockIndex()$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	../../server/block.h	/^    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex)$/;"	f	class:CDiskBlockIndex
CDiskBlockIndex	../../server/block.h	/^class CDiskBlockIndex : public CBlockIndex$/;"	c
CDiskTxPos	../../server/block.h	/^    CDiskTxPos()$/;"	f	class:CDiskTxPos
CDiskTxPos	../../server/block.h	/^    CDiskTxPos(unsigned int nFileIn, unsigned int nBlockPosIn, unsigned int nTxPosIn)$/;"	f	class:CDiskTxPos
CDiskTxPos	../../server/block.h	/^class CDiskTxPos$/;"	c
CENT	../../proto/conversion.h	/^static const int64 CENT = 1000000;$/;"	v
CFeeRate	../../server/txfeerate.cpp	/^CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nBytes_)$/;"	f	class:CFeeRate
CFeeRate	../../server/txfeerate.h	/^    CFeeRate()$/;"	f	class:CFeeRate
CFeeRate	../../server/txfeerate.h	/^    CFeeRate(const CFeeRate& other)$/;"	f	class:CFeeRate
CFeeRate	../../server/txfeerate.h	/^    explicit CFeeRate(const CAmount& _nCoinPerK) $/;"	f	class:CFeeRate
CFeeRate	../../server/txfeerate.h	/^class CFeeRate$/;"	c
CHKIP_HTML_TEMPLATE	../../unet/unet_local.c	36;"	d	file:
CHKIP_IP_TAG	../../unet/unet_local.c	/^static const char *CHKIP_IP_TAG = "Current IP Address: ";$/;"	v	file:
CIface	../../proto/coin_proto.h	/^typedef struct coin_iface_t CIface;$/;"	t	typeref:struct:coin_iface_t
CInPoint	../../server/block.h	/^    CInPoint() { SetNull(); }$/;"	f	class:CInPoint
CInPoint	../../server/block.h	/^    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }$/;"	f	class:CInPoint
CInPoint	../../server/block.h	/^class CInPoint$/;"	c
CInit	../../server/util.cpp	/^    CInit()$/;"	f	class:CInit
CInit	../../server/util.cpp	/^class CInit$/;"	c	file:
CInv	../../server/protocol.cpp	/^CInv::CInv()$/;"	f	class:CInv
CInv	../../server/protocol.cpp	/^CInv::CInv(int ifaceIndexIn, const std::string& strType, const uint256& hashIn)$/;"	f	class:CInv
CInv	../../server/protocol.cpp	/^CInv::CInv(int ifaceIndexIn, int typeIn, const uint256& hashIn)$/;"	f	class:CInv
CKey	../../server/key.h	/^    CKey()$/;"	f	class:CKey
CKey	../../server/key.h	/^    CKey(const CKey& b)$/;"	f	class:CKey
CKey	../../server/key.h	/^class CKey : public CKeyMetadata$/;"	c
CKeyID	../../server/key.h	/^    CKeyID() : uint160(0) { }$/;"	f	class:CKeyID
CKeyID	../../server/key.h	/^    CKeyID(const uint160 &in) : uint160(in) { }$/;"	f	class:CKeyID
CKeyID	../../server/key.h	/^class CKeyID : public uint160$/;"	c
CKeyMetadata	../../server/key.h	/^		CKeyMetadata()$/;"	f	class:CKeyMetadata
CKeyMetadata	../../server/key.h	/^		explicit CKeyMetadata(int64_t nCreateTime_)$/;"	f	class:CKeyMetadata
CKeyMetadata	../../server/key.h	/^class CKeyMetadata$/;"	c
CKeyStore	../../server/keystore.h	/^class CKeyStore$/;"	c
CKeyStoreIsMineVisitor	../../server/script.cpp	/^    CKeyStoreIsMineVisitor(const CKeyStore *keystoreIn) : keystore(keystoreIn) { }$/;"	f	class:CKeyStoreIsMineVisitor
CKeyStoreIsMineVisitor	../../server/script.cpp	/^class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>$/;"	c	file:
CKeyingMaterial	../../server/crypter.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;$/;"	t
CLIENT_VERSION_SUFFIX	../../server/version.cpp	43;"	d	file:
CMasterKey	../../server/crypter.h	/^    CMasterKey()$/;"	f	class:CMasterKey
CMasterKey	../../server/crypter.h	/^class CMasterKey$/;"	c
CMerkleBlock	../../server/bloom.cpp	/^CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)$/;"	f	class:CMerkleBlock
CMerkleBlock	../../server/bloom.h	/^class CMerkleBlock$/;"	c
CMerkleTx	../../server/main.h	/^    CMerkleTx()$/;"	f	class:CMerkleTx
CMerkleTx	../../server/main.h	/^    CMerkleTx(const CTransaction& txIn) : CTransaction(txIn)$/;"	f	class:CMerkleTx
CMerkleTx	../../server/main.h	/^class CMerkleTx : public CTransaction$/;"	c
CMessageHeader	../../server/protocol.cpp	/^CMessageHeader::CMessageHeader()$/;"	f	class:CMessageHeader
CMessageHeader	../../server/protocol.cpp	/^CMessageHeader::CMessageHeader(int ifaceIndexIn, const char* pszCommand, unsigned int nMessageSizeIn)$/;"	f	class:CMessageHeader
CNoDestination	../../server/script.h	/^class CNoDestination {$/;"	c
CNode	../../server/net.h	/^    CNode(int ifaceIndexIn, unsigned int hSocketIn, CAddress addrIn, std::string addrNameIn = "", bool fInboundIn=false) : vSend(SER_NETWORK, MIN_PROTO_VERSION), vRecv(SER_NETWORK, MIN_PROTO_VERSION)$/;"	f	class:CNode
CNode	../../server/net.h	/^class CNode$/;"	c
CNodeStats	../../server/net.h	/^class CNodeStats$/;"	c
COIN	../../proto/conversion.h	/^static const int64 COIN = 100000000;$/;"	v
COINF	../../proto/coin_proto.h	158;"	d
COINF_DL_SCAN	../../proto/coin_proto.h	138;"	d
COINF_DL_SYNC	../../proto/coin_proto.h	139;"	d
COINF_PEER_SCAN	../../proto/coin_proto.h	142;"	d
COINF_PEER_SYNC	../../proto/coin_proto.h	143;"	d
COINF_VALIDATE_SCAN	../../proto/coin_proto.h	144;"	d
COINF_VALIDATE_SYNC	../../proto/coin_proto.h	145;"	d
COINF_WALLET_SCAN	../../proto/coin_proto.h	140;"	d
COINF_WALLET_SYNC	../../proto/coin_proto.h	141;"	d
COIN_IFACE_VERSION	../../proto/coin_proto.h	43;"	d
COIN_SERVICES	../../proto/coin_proto.h	110;"	d
COLORCoinAddr	../../server/coinaddr.h	/^    COLORCoinAddr() : CCoinAddr(COLOR_COIN_IFACE)$/;"	f	class:COLORCoinAddr
COLORCoinAddr	../../server/coinaddr.h	/^    COLORCoinAddr(const CTxDestination &dest) : CCoinAddr(COLOR_COIN_IFACE)$/;"	f	class:COLORCoinAddr
COLORCoinAddr	../../server/coinaddr.h	/^    COLORCoinAddr(const std::string& strAddress) : CCoinAddr(COLOR_COIN_IFACE)$/;"	f	class:COLORCoinAddr
COLORCoinAddr	../../server/coinaddr.h	/^class COLORCoinAddr : public CCoinAddr$/;"	c
COLOR_COIN	../../proto/color_proto.h	64;"	d
COLOR_COINBASE_MATURITY	../../proto/color_proto.h	/^static const int COLOR_COINBASE_MATURITY = 90;$/;"	v
COLOR_COIN_DAEMON_PORT	../../proto/color_proto.h	36;"	d
COLOR_COIN_IFACE	../../proto/coin_proto.h	133;"	d
COLOR_DEFAULT_BYTES_PER_SIGOP	../../proto/color_proto.h	77;"	d
COLOR_MAX_BLOCK_SIZE	../../proto/color_proto.h	69;"	d
COLOR_MAX_DRIFT_TIME	../../proto/color_proto.h	54;"	d
COLOR_MAX_FREE_TX_SIZE	../../proto/color_proto.h	80;"	d
COLOR_MAX_GETADDR	../../proto/color_proto.h	39;"	d
COLOR_MAX_MONEY	../../proto/color_proto.h	/^static const int64 COLOR_MAX_MONEY = 722388 * COLOR_COIN; \/* ~ 0.7mil max @ height 1.44mil *\/$/;"	v
COLOR_MAX_ORPHAN_TRANSACTIONS	../../proto/color_proto.h	41;"	d
COLOR_MAX_SCRIPT_ELEMENT_SIZE	../../proto/color_proto.h	51;"	d
COLOR_MAX_SCRIPT_SIZE	../../proto/color_proto.h	49;"	d
COLOR_MAX_SIGOPS	../../proto/color_proto.h	47;"	d
COLOR_MAX_STANDARD_TX_SIGOP_COST	../../proto/color_proto.h	75;"	d
COLOR_MAX_STANDARD_TX_WEIGHT	../../proto/color_proto.h	73;"	d
COLOR_MAX_TRANSACTION_WEIGHT	../../proto/color_proto.h	71;"	d
COLOR_MAX_TX_FEE	../../proto/color_proto.h	/^static const int64 COLOR_MAX_TX_FEE = 1000 * COLOR_COIN;$/;"	v
COLOR_MIN_INPUT	../../proto/color_proto.h	/^static const int64 COLOR_MIN_INPUT = 1;$/;"	v
COLOR_MIN_RELAY_TX_FEE	../../proto/color_proto.h	/^static const int64 COLOR_MIN_RELAY_TX_FEE = 1000;$/;"	v
COLOR_MIN_TX_FEE	../../proto/color_proto.h	/^static const int64 COLOR_MIN_TX_FEE = 1000;$/;"	v
COLOR_PROTOCOL_VERSION	../../proto/color_proto.h	/^static const int COLOR_PROTOCOL_VERSION = 2000000;$/;"	v
COLOR_VERSION_BUILD	../../proto/color_proto.h	33;"	d
COLOR_VERSION_MAJOR	../../proto/color_proto.h	30;"	d
COLOR_VERSION_MINOR	../../proto/color_proto.h	31;"	d
COLOR_VERSION_REVISION	../../proto/color_proto.h	32;"	d
COLOR_WITNESS_SCALE_FACTOR	../../proto/color_proto.h	/^static const int COLOR_WITNESS_SCALE_FACTOR = SCALE_FACTOR;$/;"	v
COMPRESSED_PUBLIC_KEY_SIZE	../../server/eckey.cpp	/^static const unsigned int COMPRESSED_PUBLIC_KEY_SIZE  = 33;$/;"	v	file:
CONSENSUS_VERSIONBITS_H	../../server/versionbits.h	2;"	d
COutPoint	../../server/block.h	/^    COutPoint() { SetNull(); }$/;"	f	class:COutPoint
COutPoint	../../server/block.h	/^    COutPoint(uint256 hashIn, unsigned int nIn) { hash = hashIn; n = nIn; }$/;"	f	class:COutPoint
COutPoint	../../server/block.h	/^class COutPoint$/;"	c
COutput	../../server/wallet.h	/^		COutput(const CWalletTx *txIn, int iIn, int nDepthIn)$/;"	f	class:COutput
COutput	../../server/wallet.h	/^class COutput$/;"	c
CPUMINER_WORKER	../../stratum/stratum_task.c	42;"	d	file:
CPartialMerkleTree	../../server/bloom.cpp	/^CPartialMerkleTree::CPartialMerkleTree() : nTransactions(0), fBad(true) {}$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	../../server/bloom.cpp	/^CPartialMerkleTree::CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) : nTransactions(vTxid.size()), fBad(false) {$/;"	f	class:CPartialMerkleTree
CPartialMerkleTree	../../server/bloom.h	/^class CPartialMerkleTree$/;"	c
CPool	../../server/txmempool.h	/^    CPool(int ifaceIndexIn)$/;"	f	class:CPool
CPool	../../server/txmempool.h	/^class CPool : public CTxMemPool$/;"	c
CPoolTx	../../server/txmempool.h	/^    CPoolTx()$/;"	f	class:CPoolTx
CPoolTx	../../server/txmempool.h	/^    CPoolTx(const CPoolTx& ptxIn)$/;"	f	class:CPoolTx
CPoolTx	../../server/txmempool.h	/^    CPoolTx(const CTransaction& txIn)$/;"	f	class:CPoolTx
CPoolTx	../../server/txmempool.h	/^class CPoolTx$/;"	c
CPrivKey	../../server/key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;$/;"	t
CPubKey	../../server/key.h	/^		CPubKey()$/;"	f	class:CPubKey
CPubKey	../../server/key.h	/^		CPubKey(const std::vector<unsigned char> &vchPubKeyIn) : vchPubKey(vchPubKeyIn) { }$/;"	f	class:CPubKey
CPubKey	../../server/key.h	/^class CPubKey $/;"	c
CRequestTracker	../../server/net.h	/^    explicit CRequestTracker(void (*fnIn)(void*, CDataStream&)=NULL, void* param1In=NULL)$/;"	f	class:CRequestTracker
CRequestTracker	../../server/net.h	/^class CRequestTracker$/;"	c
CScript	../../server/script.h	/^    CScript() { }$/;"	f	class:CScript
CScript	../../server/script.h	/^    CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }$/;"	f	class:CScript
CScript	../../server/script.h	/^    CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	../../server/script.h	/^    CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(const CBigNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(const CScriptNum& b) { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(const uint256& b) { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(int b)            { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(int64 b)          { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(long b)           { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(opcodetype b)     { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(short b)          { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(signed char b)    { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(uint64 b)         { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(unsigned char b)  { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(unsigned int b)   { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(unsigned long b)  { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^    explicit CScript(unsigned short b) { operator<<(b); }$/;"	f	class:CScript
CScript	../../server/script.h	/^class CScript : public std::vector<unsigned char>$/;"	c
CScriptID	../../server/key.h	/^    CScriptID() : uint160(0) { }$/;"	f	class:CScriptID
CScriptID	../../server/key.h	/^    CScriptID(const uint160 &in) : uint160(in) { }$/;"	f	class:CScriptID
CScriptID	../../server/key.h	/^class CScriptID : public uint160$/;"	c
CScriptID	../../server/script.cpp	/^CScriptID::CScriptID(const CScript& in) : uint160(Hash160(cbuff(in.begin(), in.end()))) {}$/;"	f	class:CScriptID
CScriptNum	../../server/script.h	/^    explicit CScriptNum(const int64_t& n)$/;"	f	class:CScriptNum
CScriptNum	../../server/script.h	/^    explicit CScriptNum(const std::vector<unsigned char>& vch, bool fRequireMinimal,$/;"	f	class:CScriptNum
CScriptNum	../../server/script.h	/^class CScriptNum$/;"	c
CScriptVisitor	../../server/script.cpp	/^    CScriptVisitor(CScript *scriptin) { script = scriptin; }$/;"	f	class:CScriptVisitor
CScriptVisitor	../../server/script.cpp	/^class CScriptVisitor : public boost::static_visitor<bool>$/;"	c	file:
CScriptWitness	../../server/block.h	/^    CScriptWitness() { }$/;"	f	struct:CScriptWitness
CScriptWitness	../../server/block.h	/^struct CScriptWitness$/;"	s
CSecret	../../server/key.h	/^typedef std::vector<unsigned char, secure_allocator<unsigned char> > CSecret;$/;"	t
CSignature	../../server/txsignature.h	/^		CSignature(int ifaceIndexIn, CTransaction *txIn, unsigned int nIn, int nHashTypeIn=SIGHASH_ALL)$/;"	f	class:CSignature
CSignature	../../server/txsignature.h	/^class CSignature$/;"	c
CTransaction	../../server/block.h	/^		CTransaction(const CAltTx& tx)$/;"	f	class:CTransaction
CTransaction	../../server/block.h	/^    CTransaction()$/;"	f	class:CTransaction
CTransaction	../../server/block.h	/^    CTransaction(const CTransaction& tx)$/;"	f	class:CTransaction
CTransaction	../../server/block.h	/^class CTransaction : public CTransactionCore$/;"	c
CTransactionCore	../../server/block.h	/^    CTransactionCore()$/;"	f	class:CTransactionCore
CTransactionCore	../../server/block.h	/^class CTransactionCore$/;"	c
CTxBatchCreator	../../server/txcreator.h	/^    CTxBatchCreator(CWallet *wallet, string strAccountIn, CScript scriptPubIn, int64 nValue) : CTxCreator(wallet, strAccountIn)$/;"	f	class:CTxBatchCreator
CTxBatchCreator	../../server/txcreator.h	/^class CTxBatchCreator : public CTxCreator$/;"	c
CTxCreator	../../server/txcreator.h	/^    CTxCreator(CWallet *wallet)$/;"	f	class:CTxCreator
CTxCreator	../../server/txcreator.h	/^    CTxCreator(CWallet *wallet, string strAccountIn) : CWalletTx(wallet)$/;"	f	class:CTxCreator
CTxCreator	../../server/txcreator.h	/^    CTxCreator(CWallet* wallet, const CTransaction& txIn) : CWalletTx(wallet, txIn)$/;"	f	class:CTxCreator
CTxCreator	../../server/txcreator.h	/^class CTxCreator : public CWalletTx$/;"	c
CTxDB	../../server/txidx.h	/^    CTxDB(const char *fname, int index, const char* pszMode="r+") : CDB(fname, pszMode) { ifaceIndex = index; }$/;"	f	class:CTxDB
CTxDB	../../server/txidx.h	/^class CTxDB : public CDB$/;"	c
CTxDestination	../../server/script.h	/^typedef boost::variant<CNoDestination, CKeyID, CScriptID, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessV14ScriptHash, WitnessV14KeyHash, WitnessUnknown> CTxDestination;$/;"	t
CTxIn	../../server/block.h	/^    CTxIn()$/;"	f	class:CTxIn
CTxIn	../../server/block.h	/^    CTxIn(uint256 hashPrevTx, unsigned int nOut, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=SEQUENCE_FINAL)$/;"	f	class:CTxIn
CTxIn	../../server/block.h	/^    explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), unsigned int nSequenceIn=SEQUENCE_FINAL)$/;"	f	class:CTxIn
CTxIn	../../server/block.h	/^class CTxIn$/;"	c
CTxInWitness	../../server/block.h	/^    CTxInWitness() { }$/;"	f	class:CTxInWitness
CTxInWitness	../../server/block.h	/^class CTxInWitness$/;"	c
CTxIndex	../../server/block.h	/^    CTxIndex()$/;"	f	class:CTxIndex
CTxIndex	../../server/block.h	/^    CTxIndex(const CDiskTxPos& posIn, unsigned int nOutputs)$/;"	f	class:CTxIndex
CTxIndex	../../server/block.h	/^class CTxIndex$/;"	c
CTxMatrix	../../server/matrix.h	/^		CTxMatrix()$/;"	f	class:CTxMatrix
CTxMatrix	../../server/matrix.h	/^		CTxMatrix(const CTxMatrix& matrix)$/;"	f	class:CTxMatrix
CTxMatrix	../../server/matrix.h	/^class CTxMatrix$/;"	c
CTxMemPool	../../server/txmempool.h	/^class CTxMemPool$/;"	c
CTxOut	../../server/block.h	/^		CTxOut()$/;"	f	class:CTxOut
CTxOut	../../server/block.h	/^		CTxOut(int64 nValueIn, CScript scriptPubKeyIn)$/;"	f	class:CTxOut
CTxOut	../../server/block.h	/^class CTxOut$/;"	c
CTxWitness	../../server/block.h	/^class CTxWitness$/;"	c
CUTEST_VERSION	../../test/CuTest.h	53;"	d
CU_ALLOC	../../test/CuTest.h	60;"	d
CU_TEST_H	../../test/CuTest.h	44;"	d
CValidateState	../../server/net.h	/^class CValidateState$/;"	c
CWallet	../../server/wallet.h	/^		CWallet(int index)$/;"	f	class:CWallet
CWallet	../../server/wallet.h	/^		CWallet(int index, std::string strWalletFileIn)$/;"	f	class:CWallet
CWallet	../../server/wallet.h	/^class CWallet : public CBasicKeyStore$/;"	c
CWalletDB	../../server/walletdb.h	/^    CWalletDB(std::string strFilename, const char* pszMode="r+") : CDB(strFilename.c_str(), pszMode)$/;"	f	class:CWalletDB
CWalletDB	../../server/walletdb.h	/^class CWalletDB : public CDB$/;"	c
CWalletKey	../../server/wallet.h	/^		CWalletKey(int64 nExpires=0)$/;"	f	class:CWalletKey
CWalletKey	../../server/wallet.h	/^class CWalletKey$/;"	c
CWalletTx	../../server/wallet.h	/^		CWalletTx()$/;"	f	class:CWalletTx
CWalletTx	../../server/wallet.h	/^		CWalletTx(CWallet *pwalletIn, const CTransaction& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	../../server/wallet.h	/^		CWalletTx(CWallet *pwalletIn, const CTransaction& txIn, mapval_t mapValue) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	../../server/wallet.h	/^		CWalletTx(CWallet* pwalletIn)$/;"	f	class:CWalletTx
CWalletTx	../../server/wallet.h	/^		CWalletTx(CWallet* pwalletIn, const CMerkleTx& txIn) : CMerkleTx(txIn)$/;"	f	class:CWalletTx
CWalletTx	../../server/wallet.h	/^class CWalletTx : public CMerkleTx$/;"	c
CalcHash	../../server/bloom.cpp	/^uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {$/;"	f	class:CPartialMerkleTree
CalcTreeWidth	../../server/bloom.h	/^    unsigned int CalcTreeWidth(int height) {$/;"	f	class:CPartialMerkleTree
CalculateDependencyMetric	../../server/txmempool.cpp	/^void CPool::CalculateDependencyMetric(CPoolTx& ptx)$/;"	f	class:CPool
CalculateFee	../../server/txcreator.cpp	/^int64 CTxCreator::CalculateFee()$/;"	f	class:CTxCreator
CalculateFee	../../server/txmempool.cpp	/^void CPool::CalculateFee(CPoolTx& ptx)$/;"	f	class:CPool
CalculateFee	../../server/wallet.cpp	/^int64 CWallet::CalculateFee(CWalletTx& tx, int64 nMinFee, int confTarget)$/;"	f	class:CWallet
CalculateLimits	../../server/txmempool.cpp	/^void CPool::CalculateLimits(CPoolTx& ptx)$/;"	f	class:CPool
CalculateModifiedSize	../../server/txmempool.cpp	/^void CPoolTx::CalculateModifiedSize()$/;"	f	class:CPoolTx
CalculateSequenceLocks	../../server/block.cpp	/^std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
CanSupportFeature	../../server/wallet.h	/^		bool CanSupportFeature(enum WalletFeature wf) { return true; }$/;"	f	class:CWallet
CaseInsensitiveEqual	../../test/testcoin_block.cpp	1969;"	d	file:
CastToBigNum	../../server/script.cpp	/^CBigNum CastToBigNum(const valtype& vch)$/;"	f
CastToBool	../../server/script.cpp	/^bool CastToBool(const valtype& vch)$/;"	f
Ch	../../test/testcoin_algo.cpp	69;"	d	file:
ChainCode	../../server/key.h	/^typedef uint256 ChainCode;$/;"	t
ChainOp	../../server/chain.h	/^typedef struct ChainOp$/;"	s
ChainOp	../../server/chain.h	/^} ChainOp;$/;"	t	typeref:struct:ChainOp
CheckBlock	../../server/checkpoints.cpp	/^bool CCheckpoints::CheckBlock(int nHeight, const uint256& hash)$/;"	f	class:CCheckpoints
CheckBlock	../../server/validation.cpp	/^bool CheckBlock(CBlock *block)$/;"	f
CheckBlockHeader	../../server/validation.cpp	/^bool CheckBlockHeader(CBlockHeader *pblock)$/;"	f
CheckFinal	../../server/txmempool.cpp	/^bool CPoolTx::CheckFinal(CIface *iface) const$/;"	f	class:CPoolTx
CheckFinalTx	../../server/block.cpp	/^bool CheckFinalTx(CIface *iface, const CTransaction& tx, CBlockIndex *pindexPrev, int flags)$/;"	f
CheckIndex	../../server/block.h	/^    bool CheckIndex() const$/;"	f	class:CBlockIndex
CheckSequenceLocks	../../server/block.cpp	/^bool CheckSequenceLocks(CIface *iface, const CTransaction &tx, int flags)$/;"	f
CheckSig	../../server/txsignature.cpp	/^bool CSignature::CheckSig(cbuff vchSig, cbuff vchPubKey, CScript scriptCode, int sigver)$/;"	f	class:CSignature
CheckTransaction	../../server/block.cpp	/^bool CTransaction::CheckTransaction(int ifaceIndex)$/;"	f	class:CTransaction
CheckTransactionInputs	../../server/block.cpp	/^bool CBlock::CheckTransactionInputs(int ifaceIndex)$/;"	f	class:CBlock
CheckTransactionInputs	../../server/block.cpp	/^bool CTransaction::CheckTransactionInputs(int ifaceIndex)$/;"	f	class:CTransaction
CheckWork	../../server/main.cpp	/^bool CheckWork(CBlock* pblock, CWallet& wallet)$/;"	f
CheckpointLSN	../../server/txidx.cpp	/^void CDBEnv::CheckpointLSN(std::string strFile)$/;"	f	class:CDBEnv
CleanKey	../../server/crypter.h	/^    void CleanKey()$/;"	f	class:CCrypter
Clear	../../server/versionbits.cpp	/^void VersionBitsCache::Clear()$/;"	f	class:VersionBitsCache
ClearBloomFilter	../../server/net.h	/^    void ClearBloomFilter()$/;"	f	class:CNode
ClearCurrent	../../server/txfeerate.cpp	/^void TxConfirmStats::ClearCurrent(unsigned int nBlockHeight)$/;"	f	class:TxConfirmStats
ClearInputs	../../server/txmempool.h	/^    void ClearInputs()$/;"	f	class:CPoolTx
ClientConnectInputs	../../server/block.cpp	/^bool CTransaction::ClientConnectInputs(int ifaceIndex)$/;"	f	class:CTransaction
Close	../../server/txidx.cpp	/^void CDB::Close()$/;"	f	class:CDB
Close	../../server/txidx.cpp	/^void CDBEnv::Close()$/;"	f	class:CDBEnv
CloseBlockChain	../../server/block.cpp	/^void CloseBlockChain(CIface *iface)$/;"	f
CloseBlockChains	../../server/block.cpp	/^void CloseBlockChains(void)$/;"	f
CloseDb	../../server/txidx.cpp	/^void CDBEnv::CloseDb(const string& strFile)$/;"	f	class:CDBEnv
CoinSet	../../test/testcoin_coin.cpp	/^typedef set<pair<const CWalletTx*,unsigned int> > CoinSet;$/;"	t	file:
CombineMultisig	../../server/script.cpp	/^static CScript CombineMultisig(int ifaceIndex, CScript scriptPubKey, const CTransaction& txTo, unsigned int nIn, const vector<valtype>& vSolutions, vector<valtype>& sigs1, vector<valtype>& sigs2)$/;"	f	file:
Commit	../../server/txmempool.cpp	/^bool CPool::Commit(CBlock& block)$/;"	f	class:CPool
CompareCells	../../server/matrix.h	/^		bool CompareCells(const CTxMatrix& b) const$/;"	f	class:CTxMatrix
CompareTo	../../server/base58.h	/^		int CompareTo(const CBase58Data& b58) const$/;"	f	class:CBase58Data
CompareValueOnly	../../server/wallet.cpp	/^struct CompareValueOnly$/;"	s	file:
ComputeMerkleBranch	../../server/wit_merkle.cpp	/^std::vector<uint256> ComputeMerkleBranch(const std::vector<uint256>& leaves, uint32_t position) {$/;"	f
ComputeMerkleRoot	../../server/wit_merkle.cpp	/^uint256 ComputeMerkleRoot(const std::vector<uint256>& leaves, bool* mutated) {$/;"	f
ComputeMerkleRootFromBranch	../../server/wit_merkle.cpp	/^uint256 ComputeMerkleRootFromBranch(const uint256& leaf, const std::vector<uint256>& vMerkleBranch, uint32_t nIndex) {$/;"	f
Condition	../../server/versionbits.cpp	/^      bool Condition(const CBlockIndex* pindex, CIface * params) const$/;"	f	class:__anon9::VersionBitsConditionChecker
ConnectInputs	../../server/coin.cpp	/^bool CTransaction::ConnectInputs(int ifaceIndex, const CBlockIndex* pindexBlock, tx_map& mapOutput, map<uint256, CTransaction> mapTx, int& nSigOps, int64& nFees, bool fVerifySig, bool fVerifyInputs, bool fRequireInputs)$/;"	f	class:CTransaction
ContainsTx	../../server/txidx.cpp	/^bool CTxDB::ContainsTx(uint256 hash)$/;"	f	class:CTxDB
ContextualCheckBlock	../../server/validation.cpp	/^bool ContextualCheckBlock(CBlock *pblock, CBlockIndex *pindexPrev)$/;"	f
ContextualCheckBlockHeader	../../server/validation.cpp	/^bool ContextualCheckBlockHeader(CIface *iface, const CBlockHeader& block, CBlockIndex *pindexPrev)$/;"	f
ConvertBits	../../server/coinaddr.cpp	/^bool ConvertBits(O& out, I it, I end) $/;"	f
CountWitnessSigOps	../../server/block.cpp	/^size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags)$/;"	f
CreateAlias	../../server/block.cpp	/^CAlias *CTransaction::CreateAlias(std::string name, int type)$/;"	f	class:CTransaction
CreateAltChain	../../server/block.cpp	/^CAltChain *CTransaction::CreateAltChain()$/;"	f	class:CTransaction
CreateAsset	../../server/block.cpp	/^CAsset *CTransaction::CreateAsset(string strAssetName, string strAssetHash)$/;"	f	class:CTransaction
CreateBatchTx	../../server/txcreator.cpp	/^bool CTxBatchCreator::CreateBatchTx()$/;"	f	class:CTxBatchCreator
CreateBlockIndex	../../server/validation.cpp	/^CBlockIndex *CreateBlockIndex(CIface *iface, CBlockHeader& block)$/;"	f
CreateBlockTemplate	../../server/block.cpp	/^CBlock *CreateBlockTemplate(CIface *iface)$/;"	f
CreateCert	../../server/block.cpp	/^CCert *CTransaction::CreateCert(int ifaceIndex, string strTitle, CCoinAddr& addr, string hexSeed, int64 nLicenseFee)$/;"	f	class:CTransaction
CreateContext	../../server/block.cpp	/^CContext *CTransaction::CreateContext()$/;"	f	class:CTransaction
CreateExec	../../server/block.cpp	/^CExec *CTransaction::CreateExec()$/;"	f	class:CTransaction
CreateIdent	../../server/block.cpp	/^CIdent *CTransaction::CreateIdent(CIdent *ident)$/;"	f	class:CTransaction
CreateIdent	../../server/block.cpp	/^CIdent *CTransaction::CreateIdent(int ifaceIndex, CCoinAddr& addr)$/;"	f	class:CTransaction
CreateLicense	../../server/block.cpp	/^CCert *CTransaction::CreateLicense(CCert *cert)$/;"	f	class:CTransaction
CreateMoneyTx	../../server/wallet.cpp	/^bool CreateMoneyTx(CIface *iface, CWalletTx& wtxNew, vector<COutput>& vecRecv, vector<CTxOut>& vecSend, CScript scriptPubKey)$/;"	f
CreateNewAddr	../../server/account.cpp	/^bool CAccountCache::CreateNewAddr(CTxDestination& addrRet, int type, int flags)$/;"	f	class:CAccountCache
CreateNewPubKey	../../server/account.cpp	/^bool CAccountCache::CreateNewPubKey(CPubKey& addrRet, int flags)$/;"	f	class:CAccountCache
CreateOffer	../../server/block.cpp	/^COffer *CTransaction::CreateOffer()$/;"	f	class:CTransaction
CreatePidFile	../../server/util.cpp	/^void CreatePidFile(const boost::filesystem::path &path, pid_t pid)$/;"	f
CreateSignature	../../server/txsignature.cpp	/^bool CSignature::CreateSignature(cbuff& vchSig, const CKeyID& address, const CScript& scriptCode, int sigversion)$/;"	f	class:CSignature
CreateTransactionWithInputTx	../../server/wallet.cpp	/^bool CreateTransactionWithInputTx(CIface *iface, string strAccount, const vector<pair<CScript, int64> >& vecSend, CWalletTx& wtxIn, int nTxOut, CWalletTx& wtxNew, int64 nTxFee)$/;"	f
CreateValidateNotaryTx	../../server/matrix.cpp	/^bool CreateValidateNotaryTx(CIface *iface, const CTransaction& txPrev, int nPrevOut, CTransaction& tx, vector<CPubKey> kSend)$/;"	f
CryptedKeyMap	../../server/keystore.h	/^typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;$/;"	t
CuAssert	../../test/CuTest.h	123;"	d
CuAssertDblEquals	../../test/CuTest.h	130;"	d
CuAssertDblEquals_LineMsg	../../test/CuTest.c	/^void CuAssertDblEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, $/;"	f
CuAssertDblEquals_Msg	../../test/CuTest.h	131;"	d
CuAssertIntEquals	../../test/CuTest.h	128;"	d
CuAssertIntEquals_LineMsg	../../test/CuTest.c	/^void CuAssertIntEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, $/;"	f
CuAssertIntEquals_Msg	../../test/CuTest.h	129;"	d
CuAssertPtrEquals	../../test/CuTest.h	132;"	d
CuAssertPtrEquals_LineMsg	../../test/CuTest.c	/^void CuAssertPtrEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, $/;"	f
CuAssertPtrEquals_Msg	../../test/CuTest.h	133;"	d
CuAssertPtrNotNull	../../test/CuTest.h	135;"	d
CuAssertPtrNotNullMsg	../../test/CuTest.h	136;"	d
CuAssertStrEquals	../../test/CuTest.h	126;"	d
CuAssertStrEquals_LineMsg	../../test/CuTest.c	/^void CuAssertStrEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, $/;"	f
CuAssertStrEquals_Msg	../../test/CuTest.h	127;"	d
CuAssertTrue	../../test/CuTest.h	124;"	d
CuAssert_Line	../../test/CuTest.c	/^void CuAssert_Line(CuTest* tc, const char* file, int line, const char* message, int condition)$/;"	f
CuFail	../../test/CuTest.h	122;"	d
CuFailInternal	../../test/CuTest.c	/^static void CuFailInternal(CuTest* tc, const char* file, int line, CuString* string)$/;"	f	file:
CuFail_Line	../../test/CuTest.c	/^void CuFail_Line(CuTest* tc, const char* file, int line, const char* message2, const char* message)$/;"	f
CuStrAlloc	../../test/CuTest.c	/^char* CuStrAlloc(int size)$/;"	f
CuStrCopy	../../test/CuTest.c	/^char* CuStrCopy(const char* old)$/;"	f
CuString	../../test/CuTest.h	/^} CuString;$/;"	t	typeref:struct:__anon10
CuStringAppend	../../test/CuTest.c	/^void CuStringAppend(CuString* str, const char* text)$/;"	f
CuStringAppendChar	../../test/CuTest.c	/^void CuStringAppendChar(CuString* str, char ch)$/;"	f
CuStringAppendFormat	../../test/CuTest.c	/^void CuStringAppendFormat(CuString* str, const char* format, ...)$/;"	f
CuStringDelete	../../test/CuTest.c	/^void CuStringDelete(CuString *str)$/;"	f
CuStringInit	../../test/CuTest.c	/^void CuStringInit(CuString* str)$/;"	f
CuStringInsert	../../test/CuTest.c	/^void CuStringInsert(CuString* str, const char* text, int pos)$/;"	f
CuStringNew	../../test/CuTest.c	/^CuString* CuStringNew(void)$/;"	f
CuStringResize	../../test/CuTest.c	/^void CuStringResize(CuString* str, int newSize)$/;"	f
CuSuite	../../test/CuTest.h	/^} CuSuite;$/;"	t	typeref:struct:__anon11
CuSuiteAdd	../../test/CuTest.c	/^void CuSuiteAdd(CuSuite* testSuite, CuTest *testCase)$/;"	f
CuSuiteAddSuite	../../test/CuTest.c	/^void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2)$/;"	f
CuSuiteDelete	../../test/CuTest.c	/^void CuSuiteDelete(CuSuite *testSuite)$/;"	f
CuSuiteDetails	../../test/CuTest.c	/^void CuSuiteDetails(CuSuite* testSuite, CuString* details)$/;"	f
CuSuiteInit	../../test/CuTest.c	/^void CuSuiteInit(CuSuite* testSuite)$/;"	f
CuSuiteNew	../../test/CuTest.c	/^CuSuite* CuSuiteNew(void)$/;"	f
CuSuiteRun	../../test/CuTest.c	/^void CuSuiteRun(CuSuite* testSuite)$/;"	f
CuSuiteSummary	../../test/CuTest.c	/^void CuSuiteSummary(CuSuite* testSuite, CuString* summary)$/;"	f
CuTest	../../test/CuTest.h	/^struct CuTest$/;"	s
CuTest	../../test/CuTest.h	/^typedef struct CuTest CuTest;$/;"	t	typeref:struct:CuTest
CuTestDelete	../../test/CuTest.c	/^void CuTestDelete(CuTest *t)$/;"	f
CuTestInit	../../test/CuTest.c	/^void CuTestInit(CuTest* t, const char* name, TestFunction function)$/;"	f
CuTestNew	../../test/CuTest.c	/^CuTest* CuTestNew(const char* name, TestFunction function)$/;"	f
CuTestRun	../../test/CuTest.c	/^void CuTestRun(CuTest* tc)$/;"	f
DBErrors	../../server/walletdb.h	/^enum DBErrors$/;"	g
DB_CORRUPT	../../server/walletdb.h	/^    DB_CORRUPT,$/;"	e	enum:DBErrors
DB_LOAD_FAIL	../../server/walletdb.h	/^    DB_LOAD_FAIL,$/;"	e	enum:DBErrors
DB_LOAD_OK	../../server/walletdb.h	/^    DB_LOAD_OK,$/;"	e	enum:DBErrors
DB_NEED_REWRITE	../../server/walletdb.h	/^    DB_NEED_REWRITE$/;"	e	enum:DBErrors
DB_TOO_NEW	../../server/walletdb.h	/^    DB_TOO_NEW,$/;"	e	enum:DBErrors
DEFAULT_DECAY	../../server/txfeerate.h	/^static const double DEFAULT_DECAY = .998;$/;"	v
DEFAULT_MAX_BLOCK_SIZE	../../proto/coin_proto.h	66;"	d
DEFAULT_MIN_RELAY_TX_FEE	../../proto/coin_proto.h	98;"	d
DEFAULT_OFFER_LIFESPAN	../../shapi/shapi_api.cpp	43;"	d	file:
DEFAULT_OFFER_LIFESPAN	../../stratum/stratum_api.cpp	44;"	d	file:
DEFAULT_PARAM_LIFESPAN	../../server/block.cpp	49;"	d	file:
DEFAULT_WORK_DIFFICULTY	../../stratum/stratum_protocol.c	33;"	d	file:
DEPLOYMENT_ALGO	../../proto/coin_proto.h	/^    DEPLOYMENT_ALGO,$/;"	e	enum:DeploymentPos
DEPLOYMENT_BOLO	../../proto/coin_proto.h	/^    DEPLOYMENT_BOLO,$/;"	e	enum:DeploymentPos
DEPLOYMENT_CSV	../../proto/coin_proto.h	/^    DEPLOYMENT_CSV, \/\/ Deployment of BIP68, BIP112, and BIP113.$/;"	e	enum:DeploymentPos
DEPLOYMENT_PARAM	../../proto/coin_proto.h	/^    DEPLOYMENT_PARAM,$/;"	e	enum:DeploymentPos
DEPLOYMENT_RESERVED_0	../../proto/coin_proto.h	/^    DEPLOYMENT_RESERVED_0,$/;"	e	enum:DeploymentPos
DEPLOYMENT_RESERVED_1	../../proto/coin_proto.h	/^    DEPLOYMENT_RESERVED_1,$/;"	e	enum:DeploymentPos
DEPLOYMENT_RESERVED_2	../../proto/coin_proto.h	/^    DEPLOYMENT_RESERVED_2,$/;"	e	enum:DeploymentPos
DEPLOYMENT_SEGWIT	../../proto/coin_proto.h	/^    DEPLOYMENT_SEGWIT, \/\/ Deployment of BIP141, BIP143, and BIP147.$/;"	e	enum:DeploymentPos
DEPLOYMENT_TESTDUMMY	../../proto/coin_proto.h	/^    DEPLOYMENT_TESTDUMMY,$/;"	e	enum:DeploymentPos
DIExtKey	../../server/dikey.h	/^struct DIExtKey$/;"	s
DIExtPubKey	../../server/dikey.h	/^struct DIExtPubKey $/;"	s
DIKey	../../server/dikey.h	/^    DIKey()$/;"	f	class:DIKey
DIKey	../../server/dikey.h	/^    DIKey(CSecret secret)$/;"	f	class:DIKey
DIKey	../../server/dikey.h	/^    DIKey(const DIKey& b)$/;"	f	class:DIKey
DIKey	../../server/dikey.h	/^class DIKey : public CKey$/;"	c
DIKeyMap	../../server/keystore.h	/^typedef std::map<CKeyID, DIKey> DIKeyMap;$/;"	t
DILITHIUM_PRIVATE_KEY_SIZE	../../server/dikey.h	/^		static const unsigned int DILITHIUM_PRIVATE_KEY_SIZE = 3504;$/;"	m	class:DIKey
DILITHIUM_PUBLIC_KEY_SIZE	../../server/dikey.h	/^		static const unsigned int DILITHIUM_PUBLIC_KEY_SIZE = 1472; $/;"	m	class:DIKey
DILITHIUM_SECRET_SIZE	../../server/dikey.h	/^		static const unsigned int DILITHIUM_SECRET_SIZE = 96; $/;"	m	class:DIKey
DILITHIUM_SIGNATURE_SIZE	../../server/dikey.h	/^		static const unsigned int DILITHIUM_SIGNATURE_SIZE = 2701;$/;"	m	class:DIKey
DILITHIUM_VERSION	../../server/dikey.h	52;"	d
DUST_RELAY_TX_FEE	../../proto/coin_proto.h	101;"	d
Debug	../../server/util.cpp	/^int Debug(const char* pszFormat, ...)$/;"	f
Decode	../../server/eckey.cpp	/^void ECExtKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE])$/;"	f	class:ECExtKey
Decode	../../server/eckey.cpp	/^void ECExtPubKey::Decode(const unsigned char code[BIP32_EXTKEY_SIZE])$/;"	f	class:ECExtPubKey
DecodeBase32	../../server/util.cpp	/^string DecodeBase32(const string& str)$/;"	f
DecodeBase32	../../server/util.cpp	/^vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)$/;"	f
DecodeBase58	../../server/base58.cpp	/^bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58	../../server/base58.h	/^inline bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	../../server/base58.h	/^inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase58Check	../../server/base58.h	/^inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)$/;"	f
DecodeBase64	../../server/util.cpp	/^string DecodeBase64(const string& str)$/;"	f
DecodeBase64	../../server/util.cpp	/^vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)$/;"	f
DecodeMatrixHash	../../server/wallet.cpp	/^bool DecodeMatrixHash(const CScript& script, int& mode, uint160& hash)$/;"	f
DecodeMnemonic	../../server/mnemonic.cpp	/^const string DecodeMnemonic(const string_list& words)$/;"	f
DecodeMnemonicSecret	../../server/mnemonic.cpp	/^bool DecodeMnemonicSecret(int ifaceIndex, const string phrase, CCoinSecret& addr)$/;"	f
DecodeOP_N	../../server/script.h	/^    static int DecodeOP_N(opcodetype opcode)$/;"	f	class:CScript
Decrypt	../../server/crypter.cpp	/^bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)$/;"	f	class:CCrypter
DecryptSecret	../../server/crypter.cpp	/^bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CSecret& vchPlaintext)$/;"	f
DelAddressBookName	../../server/wallet.cpp	/^bool CWallet::DelAddressBookName(const CTxDestination& address)$/;"	f	class:CWallet
DeploymentPos	../../proto/coin_proto.h	/^enum DeploymentPos$/;"	g
Derive	../../server/dikey.cpp	/^bool DIExtKey::Derive(DIExtKey &out, unsigned int _nChild) const $/;"	f	class:DIExtKey
Derive	../../server/dikey.cpp	/^bool DIExtPubKey::Derive(DIExtPubKey& outPubKey, unsigned int nChild) const$/;"	f	class:DIExtPubKey
Derive	../../server/dikey.cpp	/^bool DIKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const $/;"	f	class:DIKey
Derive	../../server/eckey.cpp	/^bool ECExtKey::Derive(ECExtKey &out, unsigned int _nChild) const $/;"	f	class:ECExtKey
Derive	../../server/eckey.cpp	/^bool ECExtPubKey::Derive(ECExtPubKey& outPubKey, unsigned int nChild) const$/;"	f	class:ECExtPubKey
Derive	../../server/eckey.cpp	/^bool ECKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const $/;"	f	class:ECKey
DeriveCert	../../server/block.cpp	/^CCert *CTransaction::DeriveCert(int ifaceIndex, string strTitle, CCoinAddr& addr, CCert *chain, string hexSeed, int64 nLicenseFee)$/;"	f	class:CTransaction
DeriveNewDIKey	../../server/wallet.cpp	/^bool CWallet::DeriveNewDIKey(CAccount *hdChain, DIKey& secret, bool internal)$/;"	f	class:CWallet
DeriveNewECKey	../../server/wallet.cpp	/^bool CWallet::DeriveNewECKey(CAccount *hdChain, ECKey& secret, bool internal)$/;"	f	class:CWallet
DisconnectInputs	../../server/coin.cpp	/^bool CTransaction::DisconnectInputs(int ifaceIndex)$/;"	f	class:CTransaction
ECExtKey	../../server/eckey.h	/^struct ECExtKey$/;"	s
ECExtPubKey	../../server/eckey.h	/^struct ECExtPubKey $/;"	s
ECKey	../../server/eckey.h	/^    ECKey()$/;"	f	class:ECKey
ECKey	../../server/eckey.h	/^    ECKey(CSecret secret, bool fCompressed = true)$/;"	f	class:ECKey
ECKey	../../server/eckey.h	/^    ECKey(const ECKey& b)$/;"	f	class:ECKey
ECKey	../../server/eckey.h	/^class ECKey : public CKey$/;"	c
ECKeyMap	../../server/keystore.h	/^typedef std::map<CKeyID, ECKey> ECKeyMap;$/;"	t
EMC2CoinAddr	../../server/coinaddr.h	/^    EMC2CoinAddr() : CCoinAddr(EMC2_COIN_IFACE)$/;"	f	class:EMC2CoinAddr
EMC2CoinAddr	../../server/coinaddr.h	/^    EMC2CoinAddr(const CTxDestination &dest) : CCoinAddr(EMC2_COIN_IFACE)$/;"	f	class:EMC2CoinAddr
EMC2CoinAddr	../../server/coinaddr.h	/^    EMC2CoinAddr(const std::string& strAddress) : CCoinAddr(EMC2_COIN_IFACE)$/;"	f	class:EMC2CoinAddr
EMC2CoinAddr	../../server/coinaddr.h	/^class EMC2CoinAddr : public CCoinAddr$/;"	c
EMC2_COIN	../../proto/emc2_proto.h	54;"	d
EMC2_COINBASE_MATURITY	../../proto/emc2_proto.h	/^static const int EMC2_COINBASE_MATURITY = 100;$/;"	v
EMC2_COIN_DAEMON_PORT	../../proto/emc2_proto.h	34;"	d
EMC2_COIN_IFACE	../../proto/coin_proto.h	124;"	d
EMC2_DEFAULT_BYTES_PER_SIGOP	../../proto/emc2_proto.h	59;"	d
EMC2_MAX_BLOCK_SERIALIZED_SIZE	../../proto/emc2_proto.h	/^static const unsigned int EMC2_MAX_BLOCK_SERIALIZED_SIZE = 4000000;$/;"	v
EMC2_MAX_BLOCK_SIZE	../../proto/emc2_proto.h	57;"	d
EMC2_MAX_BLOCK_WEIGHT	../../proto/emc2_proto.h	/^static const unsigned int EMC2_MAX_BLOCK_WEIGHT = 4000000;$/;"	v
EMC2_MAX_DRIFT_TIME	../../proto/emc2_proto.h	50;"	d
EMC2_MAX_FREE_TX_SIZE	../../proto/emc2_proto.h	65;"	d
EMC2_MAX_GETADDR	../../proto/emc2_proto.h	36;"	d
EMC2_MAX_MONEY	../../proto/emc2_proto.h	/^static const int64 EMC2_MAX_MONEY = 298937393 * EMC2_COIN;$/;"	v
EMC2_MAX_ORPHAN_TRANSACTIONS	../../proto/emc2_proto.h	38;"	d
EMC2_MAX_SCRIPT_ELEMENT_SIZE	../../proto/emc2_proto.h	47;"	d
EMC2_MAX_SCRIPT_SIZE	../../proto/emc2_proto.h	45;"	d
EMC2_MAX_SIGOPS	../../proto/emc2_proto.h	42;"	d
EMC2_MAX_STANDARD_TX_SIGOP_COST	../../proto/emc2_proto.h	62;"	d
EMC2_MAX_STANDARD_TX_WEIGHT	../../proto/emc2_proto.h	61;"	d
EMC2_MAX_TRANSACTION_WEIGHT	../../proto/emc2_proto.h	40;"	d
EMC2_MAX_TX_FEE	../../proto/emc2_proto.h	/^static const int64 EMC2_MAX_TX_FEE = 0.1 * EMC2_COIN;$/;"	v
EMC2_MIN_INPUT	../../proto/emc2_proto.h	/^static const int64 EMC2_MIN_INPUT = 29400;$/;"	v
EMC2_MIN_RELAY_TX_FEE	../../proto/emc2_proto.h	/^static const int64 EMC2_MIN_RELAY_TX_FEE = 100000;$/;"	v
EMC2_MIN_TX_FEE	../../proto/emc2_proto.h	/^static const int64 EMC2_MIN_TX_FEE = 100000;$/;"	v
EMC2_PROTOCOL_VERSION	../../proto/emc2_proto.h	/^static const int EMC2_PROTOCOL_VERSION = 70015;$/;"	v
EMC2_SEED_LIST_SIZE	../../unet/unet_seed.h	19;"	d
EMC2_VERSION_BUILD	../../proto/emc2_proto.h	32;"	d
EMC2_VERSION_MAJOR	../../proto/emc2_proto.h	29;"	d
EMC2_VERSION_MINOR	../../proto/emc2_proto.h	30;"	d
EMC2_VERSION_REVISION	../../proto/emc2_proto.h	31;"	d
EMC2_WITNESS_SCALE_FACTOR	../../proto/emc2_proto.h	/^static const int EMC2_WITNESS_SCALE_FACTOR = SCALE_FACTOR;$/;"	v
EXT_PUBLIC_KEY	../../test/testcoin_bip32.cpp	/^	EXT_PUBLIC_KEY,$/;"	e	enum:Base58Type	file:
EXT_PUBLIC_KEY	../../test/testcoin_sip33.cpp	/^	EXT_PUBLIC_KEY,$/;"	e	enum:Base58Type	file:
EXT_SECRET_KEY	../../test/testcoin_bip32.cpp	/^	EXT_SECRET_KEY,$/;"	e	enum:Base58Type	file:
EXT_SECRET_KEY	../../test/testcoin_sip33.cpp	/^	EXT_SECRET_KEY,$/;"	e	enum:Base58Type	file:
Encode	../../server/eckey.cpp	/^void ECExtKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const $/;"	f	class:ECExtKey
Encode	../../server/eckey.cpp	/^void ECExtPubKey::Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const $/;"	f	class:ECExtPubKey
EncodeBase32	../../server/util.cpp	/^string EncodeBase32(const string& str)$/;"	f
EncodeBase32	../../server/util.cpp	/^string EncodeBase32(const unsigned char* pch, size_t len)$/;"	f
EncodeBase58	../../server/base58.cpp	/^std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)$/;"	f
EncodeBase58	../../server/base58.h	/^inline std::string EncodeBase58(const std::vector<unsigned char>& vch)$/;"	f
EncodeBase58Check	../../server/base58.h	/^inline std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)$/;"	f
EncodeBase64	../../server/util.cpp	/^string EncodeBase64(const string& str)$/;"	f
EncodeBase64	../../server/util.cpp	/^string EncodeBase64(const unsigned char* pch, size_t len)$/;"	f
EncodeMnemonic	../../server/mnemonic.cpp	/^string_list EncodeMnemonic(string& seed)$/;"	f
EncodeMnemonicSecret	../../server/mnemonic.cpp	/^const string EncodeMnemonicSecret(CCoinSecret& secret)$/;"	f
EncodeOP_N	../../server/script.h	/^    static opcodetype EncodeOP_N(int n)$/;"	f	class:CScript
Encrypt	../../server/crypter.cpp	/^bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)$/;"	f	class:CCrypter
EncryptSecret	../../server/crypter.cpp	/^bool EncryptSecret(CKeyingMaterial& vMasterKey, const CSecret &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)$/;"	f
EndMessage	../../server/net.h	/^    void EndMessage()$/;"	f	class:CNode
EndMessageAbortIfEmpty	../../server/net.h	/^    void EndMessageAbortIfEmpty()$/;"	f	class:CNode
EndTime	../../server/versionbits.cpp	/^      int64_t EndTime(CIface * params) const { return params->vDeployments[id].nTimeout; }$/;"	f	class:__anon9::VersionBitsConditionChecker
EnvShutdown	../../server/txidx.cpp	/^void CDBEnv::EnvShutdown()$/;"	f	class:CDBEnv
Erase	../../server/txidx.h	/^      bool Erase(const K& key)$/;"	f	class:CDB
EraseArchTx	../../server/wallettx.cpp	/^bool CWallet::EraseArchTx(uint256 hash) const$/;"	f	class:CWallet
EraseCoins	../../server/coin.cpp	/^bool CTransaction::EraseCoins(int ifaceIndex)$/;"	f	class:CTransaction
EraseFromWallet	../../server/wallet.cpp	/^bool CWallet::EraseFromWallet(uint256 hash)$/;"	f	class:CWallet
EraseName	../../server/walletdb.cpp	/^bool CWalletDB::EraseName(const string& strAddress)$/;"	f	class:CWalletDB
EraseSetting	../../server/walletdb.h	/^    bool EraseSetting(const std::string& strKey)$/;"	f	class:CWalletDB
EraseTx	../../server/block.cpp	/^bool CTransaction::EraseTx(int ifaceIndex)$/;"	f	class:CTransaction
EraseTx	../../server/walletdb.h	/^    bool EraseTx(uint256 hash)$/;"	f	class:CWalletDB
EraseTxCoins	../../server/coin.cpp	/^bool EraseTxCoins(CIface *iface, uint256 hash)$/;"	f
EraseTxIndex	../../server/txidx.cpp	/^bool CTxDB::EraseTxIndex(const CTransaction& tx)$/;"	f	class:CTxDB
EraseWalletTx	../../server/wallettx.cpp	/^void CWallet::EraseWalletTx(const uint256& hash) const$/;"	f	class:CWallet
EstimateMedianVal	../../server/txfeerate.cpp	/^double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,$/;"	f	class:TxConfirmStats
EvalAltProofScript	../../server/script.cpp	/^bool EvalAltProofScript(uint160 hCoin, uint256 hTx)$/;"	f
EvalScript	../../server/script.cpp	/^bool EvalScript(CSignature& sig, cstack_t& stack, const CScript& script, unsigned int sigver, int flags)$/;"	f
EvaluateSequenceLocks	../../server/block.cpp	/^bool EvaluateSequenceLocks(const CBlockIndex& block, std::pair<int, int64_t> lockPair)$/;"	f
Exists	../../server/txidx.h	/^      bool Exists(const K& key)$/;"	f	class:CDB
ExitTimeout	../../server/init.cpp	/^void ExitTimeout(void* parg)$/;"	f
ExtractDestination	../../server/coinaddr.cpp	/^bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)$/;"	f
ExtractDestinationKey	../../server/wallet.cpp	/^bool ExtractDestinationKey(CWallet *wallet, const CTxDestination& dest, CKeyID& keyid)$/;"	f
ExtractDestinations	../../server/coinaddr.cpp	/^bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)$/;"	f
ExtractMatches	../../server/bloom.cpp	/^uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch)$/;"	f	class:CPartialMerkleTree
ExtractValidateCoinbaseDestination	../../server/matrix.cpp	/^static bool ExtractValidateCoinbaseDestination(CWallet *wallet, const CTransaction& tx, CPubKey& pubkey)$/;"	f	file:
FEATURE_BASE	../../server/wallet.h	/^	FEATURE_BASE = 10500, \/\/ the earliest version new wallets supports (only useful for getinfo's clientversion output)$/;"	e	enum:WalletFeature
FEATURE_COMPRPUBKEY	../../server/wallet.h	/^	FEATURE_COMPRPUBKEY = 60000, \/\/ compressed public keys$/;"	e	enum:WalletFeature
FEATURE_LATEST	../../server/wallet.h	/^	FEATURE_LATEST = 60000$/;"	e	enum:WalletFeature
FEATURE_WALLETCRYPT	../../server/wallet.h	/^	FEATURE_WALLETCRYPT = 40000, \/\/ wallet encryption$/;"	e	enum:WalletFeature
FEE_SPACING	../../server/txfeerate.h	/^static const double FEE_SPACING = 1.1;$/;"	v
FeeFilterRounder	../../server/txfeerate.cpp	/^FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)$/;"	f	class:FeeFilterRounder
FeeFilterRounder	../../server/txfeerate.h	/^class FeeFilterRounder$/;"	c
FetchInputs	../../server/txmempool.h	/^    bool FetchInputs(uint256 hash, tx_cache& cacheRet)$/;"	f	class:CPool
FileCommit	../../server/util.cpp	/^void FileCommit(FILE *fileout)$/;"	f
FillBlock	../../server/block_cmpct.cpp	/^ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {$/;"	f	class:PartiallyDownloadedBlock
FillInputs	../../server/txmempool.cpp	/^bool CPool::FillInputs(CPoolTx& ptx)$/;"	f	class:CPool
FillInputs	../../server/wallet.cpp	/^bool CWallet::FillInputs(const CTransaction& tx, tx_cache& inputs, bool fAllowSpent)$/;"	f	class:CWallet
FillShortTxIDSelector	../../server/block_cmpct.cpp	/^void CBlockHeaderAndShortTxIDs::FillShortTxIDSelector() const {$/;"	f	class:CBlockHeaderAndShortTxIDs
Find	../../server/script.h	/^    int Find(opcodetype op) const$/;"	f	class:CScript
FindAndDelete	../../server/script.h	/^    int FindAndDelete(const CScript& b)$/;"	f	class:CScript
FindNextBlocksToDownload	../../server/chain.cpp	/^static bool FindNextBlocksToDownload(CIface *iface, CNode *pfrom, unsigned int count, vector<CBlockIndex*>& vBlocks)$/;"	f	file:
Flush	../../server/txidx.cpp	/^void CDBEnv::Flush(bool fShutdown)$/;"	f	class:CDBEnv
FormatException	../../server/util.cpp	/^static std::string FormatException(std::exception* pex, const char* pszThread)$/;"	f	file:
FormatFullVersion	../../server/util.cpp	/^string FormatFullVersion()$/;"	f
FormatHashBlocks	../../server/main.cpp	/^int FormatHashBlocks(void* pbuffer, unsigned int len)$/;"	f
FormatHashBuffers	../../server/main.cpp	/^void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)$/;"	f
FormatMoney	../../server/coin.cpp	/^string FormatMoney(CAmount n)$/;"	f
FormatSubVersion	../../server/util.cpp	/^std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)$/;"	f
FormatVersion	../../server/util.cpp	/^string FormatVersion(int nVersion)$/;"	f
FreeBlockTable	../../server/block.cpp	/^void FreeBlockTable(CIface *iface)$/;"	f
GIT_ARCHIVE	../../server/version.cpp	66;"	d	file:
GIT_COMMIT_DATE	../../server/version.cpp	69;"	d	file:
GIT_COMMIT_ID	../../server/version.cpp	68;"	d	file:
GL_BESTCHAIN	../../server/global.cpp	34;"	d	file:
GL_VERSION	../../server/global.cpp	33;"	d	file:
GMF_BLOCK	../../server/block.h	/^    GMF_BLOCK,$/;"	e	enum:GetMinFee_mode
GMF_RELAY	../../server/block.h	/^    GMF_RELAY,$/;"	e	enum:GetMinFee_mode
GMF_SEND	../../server/block.h	/^    GMF_SEND,$/;"	e	enum:GetMinFee_mode
GNULIB_NAMESPACE	../../server/main.h	29;"	d
Generate	../../server/txcreator.cpp	/^bool CTxBatchCreator::Generate()$/;"	f	class:CTxBatchCreator
Generate	../../server/txcreator.cpp	/^bool CTxCreator::Generate()$/;"	f	class:CTxCreator
GenerateExec	../../server/block.cpp	/^CExecCall *CTransaction::GenerateExec(const CExec& execIn)$/;"	f	class:CTransaction
GenerateNewDIKey	../../server/wallet.cpp	/^bool CWallet::GenerateNewDIKey(CPubKey& pubkeyRet, int nFlag)$/;"	f	class:CWallet
GenerateNewECKey	../../server/wallet.cpp	/^bool CWallet::GenerateNewECKey(CPubKey& pubkeyRet, bool fCompressed, int nFlag)$/;"	f	class:CWallet
GenerateNewECKey	../../server/wallet.h	/^		CPubKey GenerateNewECKey(bool fCompressed = true, int nFlag = 0)$/;"	f	class:CWallet
GenerateOffer	../../server/block.cpp	/^COffer *CTransaction::GenerateOffer(COffer *offerIn)$/;"	f	class:CTransaction
GenerateSpringMatrix	../../server/matrix.cpp	/^CTxMatrix *CTransaction::GenerateSpringMatrix(int ifaceIndex, CIdent& ident)$/;"	f	class:CTransaction
GenerateValidateMatrix	../../server/block.cpp	/^CTxMatrix *CTransaction::GenerateValidateMatrix(int ifaceIndex, CBlockIndex *pindex)$/;"	f	class:CTransaction
GenerateValidateScript	../../server/matrix.cpp	/^CScriptID GenerateValidateScript(CWallet *wallet, bool& fConsensus, CScript& script, vector<CPubKey> kSend)$/;"	f
Get	../../server/coinaddr.cpp	/^CTxDestination CCoinAddr::Get() const $/;"	f	class:CCoinAddr
Get	../../server/shlib.h	/^    shpeer_t *Get()$/;"	f	class:SHPeer
GetAccount	../../server/wallet.cpp	/^CAccountCache *CWallet::GetAccount(string strAccount)$/;"	f	class:CWallet
GetAccountAddress	../../server/wallet.cpp	/^CCoinAddr GetAccountAddress(CWallet *wallet, string strAccount)$/;"	f
GetAccountBalance	../../server/wallet.cpp	/^int64 GetAccountBalance(int ifaceIndex, const string& strAccount, int nMinDepth)$/;"	f
GetAccountCreditDebit	../../server/walletdb.cpp	/^int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)$/;"	f	class:CWalletDB
GetAccountPubKey	../../test/testcoin_block.cpp	/^static CPubKey GetAccountPubKey(CWallet *wallet, string strAccount, bool fNew = false)$/;"	f	file:
GetActiveColorTx	../../server/txmempool.cpp	/^vector<CTransaction> CPool::GetActiveColorTx(const uint160& hColor)$/;"	f	class:CPool
GetActiveHash	../../server/txmempool.cpp	/^vector<uint256> CPool::GetActiveHash()$/;"	f	class:CPool
GetActiveTotal	../../server/txmempool.cpp	/^int CPool::GetActiveTotal()$/;"	f	class:CPool
GetActiveTx	../../server/txmempool.cpp	/^vector<CTransaction> CPool::GetActiveTx()$/;"	f	class:CPool
GetActiveWeight	../../server/txmempool.h	/^    int64 GetActiveWeight()$/;"	f	class:CPool
GetAddr	../../server/account.cpp	/^CCoinAddr CAccountCache::GetAddr(int type)$/;"	f	class:CAccountCache
GetAddrDestination	../../server/account.cpp	/^void GetAddrDestination(int ifaceIndex, const CKeyID& keyid, vector<CTxDestination>& vDest, int nFlag)$/;"	f
GetAddrDestination	../../server/account.h	/^		void GetAddrDestination(const CKeyID& keyid, vector<CTxDestination>& vDest, int nFlag = 0)$/;"	f	class:CAccountCache
GetAdjustedTime	../../server/util.cpp	/^int64 GetAdjustedTime()$/;"	f
GetAlgoBits	../../server/algobits.cpp	/^int32_t GetAlgoBits(int alg)$/;"	f
GetAlgoName	../../server/algobits.cpp	/^const char *GetAlgoName(int alg)$/;"	f
GetAlgoNameStr	../../server/algobits.cpp	/^string GetAlgoNameStr(int alg)$/;"	f
GetAlgoWorkFactor	../../server/algobits.cpp	/^uint32_t GetAlgoWorkFactor(int alg)$/;"	f
GetAlias	../../server/block.h	/^    CAlias *GetAlias()$/;"	f	class:CTransaction
GetAltBlockHeader	../../server/block.h	/^		CAltBlock GetAltBlockHeader() const$/;"	f	class:CBlock
GetAltChain	../../server/block.h	/^		CAltChain *GetAltChain() const$/;"	f	class:CTransaction
GetAmounts	../../server/wallet.cpp	/^void CWalletTx::GetAmounts(int ifaceIndex, int64& nGeneratedImmature, int64& nGeneratedMature) const$/;"	f	class:CWalletTx
GetAmounts	../../server/wallet.cpp	/^void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived, list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const$/;"	f	class:CWalletTx
GetAncestor	../../server/block.cpp	/^CBlockIndex* CBlockIndex::GetAncestor(int height)$/;"	f	class:CBlockIndex
GetAncestor	../../server/block.cpp	/^const CBlockIndex* CBlockIndex::GetAncestor(int height) const$/;"	f	class:CBlockIndex
GetArchBlockByHash	../../server/block.cpp	/^CBlock *GetArchBlockByHash(CIface *iface, const uint256 hash)$/;"	f
GetArg	../../server/util.cpp	/^int64 GetArg(const std::string& strArg, int64 nDefault)$/;"	f
GetArg	../../server/util.cpp	/^std::string GetArg(const std::string& strArg, const std::string& strDefault)$/;"	f
GetAsset	../../server/block.h	/^		CAsset *GetAsset()$/;"	f	class:CTransaction
GetAvailableCredit	../../server/wallet.h	/^			 int64 GetAvailableCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetBalance	../../server/wallet.cpp	/^int64 CWallet::GetBalance() const$/;"	f	class:CWallet
GetBestBlockChain	../../server/block.cpp	/^uint256 GetBestBlockChain(CIface *iface)$/;"	f
GetBestBlockIndex	../../server/block.cpp	/^CBlockIndex *GetBestBlockIndex(CIface *iface)$/;"	f
GetBestBlockIndex	../../server/block.cpp	/^CBlockIndex *GetBestBlockIndex(int ifaceIndex)$/;"	f
GetBestHeight	../../server/block.cpp	/^int GetBestHeight(CIface *iface)$/;"	f
GetBestHeight	../../server/block.cpp	/^int GetBestHeight(int ifaceIndex)$/;"	f
GetBitsDifficulty	../../stratum/stratum_miner.cpp	/^static double GetBitsDifficulty(unsigned int nBits)$/;"	f	file:
GetBlankBlock	../../server/block.cpp	/^CBlock *GetBlankBlock(CIface *iface)$/;"	f
GetBlockBitsDifficulty	../../server/algobits.cpp	/^double GetBlockBitsDifficulty(unsigned int nBits, unsigned int nVersion)$/;"	f
GetBlockByHash	../../server/block.cpp	/^CBlock *GetBlockByHash(CIface *iface, const uint256 hash)$/;"	f
GetBlockByHeight	../../server/block.cpp	/^CBlock *GetBlockByHeight(CIface *iface, int nHeight)$/;"	f
GetBlockByTx	../../server/block.cpp	/^CBlock *GetBlockByTx(CIface *iface, const uint256 hash)$/;"	f
GetBlockChain	../../blockchain/bc_block.c	/^bc_t *GetBlockChain(CIface *iface)$/;"	f
GetBlockCoinChain	../../blockchain/bc_block.c	/^bc_t *GetBlockCoinChain(CIface *iface)$/;"	f
GetBlockHash	../../server/block.h	/^    uint256 GetBlockHash() const$/;"	f	class:CBlockIndex
GetBlockHash	../../server/block.h	/^    uint256 GetBlockHash() const$/;"	f	class:CDiskBlockIndex
GetBlockHeader	../../server/block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlock
GetBlockHeader	../../server/block.h	/^    CBlockHeader GetBlockHeader() const$/;"	f	class:CBlockIndex
GetBlockIndexByHash	../../server/block.cpp	/^CBlockIndex *GetBlockIndexByHash(int ifaceIndex, const uint256 hash)$/;"	f
GetBlockIndexByHeight	../../server/block.cpp	/^CBlockIndex *GetBlockIndexByHeight(int ifaceIndex, unsigned int nHeight)$/;"	f
GetBlockIndexByTx	../../server/block.cpp	/^CBlockIndex *GetBlockIndexByTx(CIface *iface, const uint256 hash)$/;"	f
GetBlockIndexDepth	../../shapi/shapi_api.cpp	/^static CBlockIndex *GetBlockIndexDepth(int ifaceIndex, int depth, uint160 hColor)$/;"	f	file:
GetBlockIndexDepth	../../stratum/stratum_api.cpp	/^static CBlockIndex *GetBlockIndexDepth(int ifaceIndex, int depth, uint160 hColor)$/;"	f	file:
GetBlockScriptFlags	../../server/block.cpp	/^unsigned int GetBlockScriptFlags(CIface *iface, const CBlockIndex* pindex)$/;"	f
GetBlockTable	../../server/block.cpp	/^blkidx_t *GetBlockTable(int ifaceIndex)$/;"	f
GetBlockTime	../../server/block.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockHeader
GetBlockTime	../../server/block.h	/^    int64 GetBlockTime() const$/;"	f	class:CBlockIndex
GetBlockTxChain	../../blockchain/bc_block.c	/^bc_t *GetBlockTxChain(CIface *iface)$/;"	f
GetBlockWork	../../server/block.cpp	/^CBigNum CBlockIndex::GetBlockWork(bool fUseAlgo) const$/;"	f	class:CBlockIndex
GetBlocksToMaturity	../../server/wallet.cpp	/^int CMerkleTx::GetBlocksToMaturity(int ifaceIndex) const$/;"	f	class:CMerkleTx
GetBloomFilter	../../server/net.h	/^    CBloomFilter *GetBloomFilter()$/;"	f	class:CNode
GetBoolArg	../../server/util.cpp	/^bool GetBoolArg(const std::string& strArg, bool fDefault)$/;"	f
GetCScript	../../server/keystore.cpp	/^bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const$/;"	f	class:CBasicKeyStore
GetCell	../../server/matrix.h	/^		unsigned int GetCell(int row, int col)$/;"	f	class:CTxMatrix
GetCertHash	../../server/account.cpp	/^uint160 CAccountCache::GetCertHash() const$/;"	f	class:CAccountCache
GetCertificate	../../server/block.h	/^    CCert *GetCertificate()$/;"	f	class:CTransaction
GetChain	../../server/hdkey.cpp	/^cbuff HDPrivKey::GetChain() const$/;"	f	class:HDPrivKey
GetChain	../../server/hdkey.h	/^    cbuff GetChain() const$/;"	f	class:HDMasterPrivKey
GetChainHex	../../server/hdkey.cpp	/^string HDPrivKey::GetChainHex()$/;"	f	class:HDPrivKey
GetChange	../../server/wallet.h	/^			 int64 GetChange() const$/;"	f	class:CWalletTx
GetChange	../../server/wallet.h	/^		int64 GetChange(const CTransaction& tx) const$/;"	f	class:CWallet
GetChange	../../server/wallet.h	/^		int64 GetChange(const CTxOut& txout) const$/;"	f	class:CWallet
GetChangeAddr	../../server/txcreator.cpp	/^CCoinAddr CTxCreator::GetChangeAddr()$/;"	f	class:CTxCreator
GetChangeAddr	../../server/wallet.cpp	/^CCoinAddr CWallet::GetChangeAddr(string strAccount)$/;"	f	class:CWallet
GetClientName	../../server/version.cpp	/^std::string GetClientName(CIface *iface)$/;"	f
GetCoin	../../proto/coin_proto.c	/^coin_iface_t *GetCoin(const char *name)$/;"	f
GetCoinAddr	../../server/wallet.cpp	/^bool GetCoinAddr(CWallet *wallet, CCoinAddr& addrAccount, string& strAccount)$/;"	f
GetCoinAddr	../../server/wallet.cpp	/^bool GetCoinAddr(CWallet *wallet, string strAddress, CCoinAddr& addrAccount)$/;"	f
GetCoinAddrAlias	../../server/wallet.cpp	/^bool GetCoinAddrAlias(CWallet *wallet, string strAlias, CCoinAddr& addrAccount)$/;"	f
GetCoinAttr	../../proto/coin_proto.c	/^int GetCoinAttr(const char *name, char *attr)$/;"	f
GetCoinByHash	../../server/coin.cpp	/^CIface *GetCoinByHash(uint160 hash)$/;"	f
GetCoinByIndex	../../proto/coin_proto.c	/^coin_iface_t *GetCoinByIndex(int index)$/;"	f
GetCoinHash	../../server/coin.cpp	/^uint160 GetCoinHash(string name)$/;"	f
GetCoinIndex	../../proto/coin_proto.c	/^int GetCoinIndex(coin_iface_t *iface)$/;"	f
GetCoinbaseFlags	../../server/block.cpp	/^CScript GetCoinbaseFlags(int ifaceIndex)$/;"	f
GetColor	../../server/txmempool.h	/^		uint160 GetColor()$/;"	f	class:CPoolTx
GetColor	../../server/wallet.h	/^			 uint160 GetColor() const$/;"	f	class:CWalletTx
GetCommand	../../server/protocol.cpp	/^std::string CInv::GetCommand() const$/;"	f	class:CInv
GetCommand	../../server/protocol.cpp	/^std::string CMessageHeader::GetCommand() const$/;"	f	class:CMessageHeader
GetCommitBranches	../../server/block.cpp	/^static bool GetCommitBranches(CBlockIndex *pbest, CBlockIndex *tip, CBlockIndex *pindexNew, vector<CBlockIndex*>& vConnect, vector<CBlockIndex*>& vDisconnect)$/;"	f	file:
GetConfigFile	../../server/util.cpp	/^boost::filesystem::path GetConfigFile()$/;"	f
GetContext	../../server/block.h	/^    CContext *GetContext()$/;"	f	class:CTransaction
GetCredit	../../server/wallet.h	/^			 int64 GetCredit(bool fUseCache=true) const$/;"	f	class:CWalletTx
GetCredit	../../server/wallet.h	/^		int64 GetCredit(const CTransaction& tx)$/;"	f	class:CWallet
GetCredit	../../server/wallet.h	/^		int64 GetCredit(const CTxOut& txout)$/;"	f	class:CWallet
GetCursor	../../server/txidx.h	/^    Dbc* GetCursor()$/;"	f	class:CDB
GetDIKey	../../server/keystore.cpp	/^bool CBasicKeyStore::GetDIKey(const CKeyID &address, DIKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetDataDir	../../server/util.cpp	/^const boost::filesystem::path &GetDataDir(bool fNetSpecific)$/;"	f
GetDebit	../../server/wallet.cpp	/^int64 CWallet::GetDebit(const CTxIn &txin)$/;"	f	class:CWallet
GetDebit	../../server/wallet.h	/^			 int64 GetDebit() const$/;"	f	class:CWalletTx
GetDebit	../../server/wallet.h	/^		int64 GetDebit(const CTransaction& tx)$/;"	f	class:CWallet
GetDefaultAddr	../../server/account.cpp	/^CCoinAddr CAccountCache::GetDefaultAddr()$/;"	f	class:CAccountCache
GetDefaultDataDir	../../server/util.cpp	/^boost::filesystem::path GetDefaultDataDir()$/;"	f
GetDepthInMainChain	../../server/block.cpp	/^int CTransaction::GetDepthInMainChain(int ifaceIndex, CBlockIndex* &pindexRet) const$/;"	f	class:CTransaction
GetDepthInMainChain	../../server/block.h	/^    int GetDepthInMainChain(int ifaceIndex) const { CBlockIndex *pindexRet; return GetDepthInMainChain(ifaceIndex, pindexRet); }$/;"	f	class:CTransaction
GetDepthInMainChain	../../server/main.h	/^    int GetDepthInMainChain(int ifaceIndex) const {$/;"	f	class:CMerkleTx
GetDepthInMainChain	../../server/wallet.cpp	/^int CMerkleTx::GetDepthInMainChain(int ifaceIndex, CBlockIndex* &pindexRet) const$/;"	f	class:CMerkleTx
GetDetach	../../server/txidx.h	/^    bool GetDetach() { return fDetachDB; }$/;"	f	class:CDBEnv
GetDifficulty	../../server/chain.cpp	/^double GetDifficulty(unsigned int nBits, unsigned int nVersion)$/;"	f
GetECKey	../../server/keystore.cpp	/^bool CBasicKeyStore::GetECKey(const CKeyID &address, ECKey &keyOut) const$/;"	f	class:CBasicKeyStore
GetError	../../server/txcreator.h	/^    string GetError()$/;"	f	class:CTxCreator
GetExec	../../server/block.h	/^		CExec *GetExec() const$/;"	f	class:CTransaction
GetExecAddr	../../server/wallet.cpp	/^CCoinAddr CWallet::GetExecAddr(string strAccount)$/;"	f	class:CWallet
GetExecCall	../../server/block.h	/^		CExecCall *GetExecCall() const$/;"	f	class:CTransaction
GetExecCheckpoint	../../server/block.h	/^		CExecCheckpoint *GetExecCheckpoint() const$/;"	f	class:CTransaction
GetExtAddr	../../server/wallet.cpp	/^CCoinAddr CWallet::GetExtAddr(string strAccount)$/;"	f	class:CWallet
GetFee	../../server/txfeerate.cpp	/^CAmount CFeeRate::GetFee(size_t nBytes_) const$/;"	f	class:CFeeRate
GetFee	../../server/txmempool.cpp	/^bool CPool::GetFee(uint256 hash, int64& nFee)$/;"	f	class:CPool
GetFee	../../server/txmempool.h	/^    int64 GetFee()$/;"	f	class:CPoolTx
GetFeeEstimator	../../server/txfeerate.cpp	/^CBlockPolicyEstimator *GetFeeEstimator(CIface *iface)$/;"	f
GetFeeEstimator	../../server/txfeerate.cpp	/^CBlockPolicyEstimator *GetFeeEstimator(int ifaceIndex)$/;"	f
GetFeePerK	../../server/txfeerate.h	/^    CAmount GetFeePerK() const { return GetFee(1000); }$/;"	f	class:CFeeRate
GetFeePriority	../../server/txmempool.h	/^    double GetFeePriority()$/;"	f	class:CPoolTx
GetFilesize	../../server/util.cpp	/^int GetFilesize(FILE* file)$/;"	f
GetFlagString	../../server/key.h	/^		const string GetFlagString() const$/;"	f	class:CKeyMetadata
GetFlags	../../server/block.h	/^		unsigned int GetFlags() const$/;"	f	class:CTransactionCore
GetFlags	../../server/net.h	/^    int GetFlags()$/;"	f	class:CBloomFilter
GetGenesisBlockHash	../../server/block.cpp	/^uint256 GetGenesisBlockHash(int ifaceIndex)$/;"	f
GetGenesisBlockIndex	../../server/block.cpp	/^CBlockIndex *GetGenesisBlockIndex(CIface *iface)$/;"	f
GetHash	../../server/block.h	/^		uint256 GetHash() const$/;"	f	class:CTxOut
GetHash	../../server/block.h	/^    uint256 GetHash() const$/;"	f	class:CBlockHeader
GetHash	../../server/block.h	/^    uint256 GetHash() const$/;"	f	class:CTransaction
GetHash	../../server/key.h	/^		uint256 GetHash() const {$/;"	f	class:CPubKey
GetHash	../../server/matrix.h	/^		const uint160 GetHash()$/;"	f	class:CTxMatrix
GetHash	../../server/txmempool.h	/^    const uint256& GetHash() const$/;"	f	class:CPoolTx
GetHeight	../../server/matrix.h	/^		unsigned int GetHeight()$/;"	f	class:CTxMatrix
GetHeight	../../server/txmempool.h	/^    unsigned int GetHeight()$/;"	f	class:CPoolTx
GetHex	../../server/hdkey.cpp	/^string HDPrivKey::GetHex()$/;"	f	class:HDPrivKey
GetID	../../server/key.h	/^			CKeyID GetID() const {$/;"	f	class:CPubKey
GetID	../../server/script.h	/^    CScriptID GetID() const$/;"	f	class:CScript
GetIface	../../server/txmempool.h	/^    CIface *GetIface()$/;"	f	class:CPool
GetIface	../../server/txsignature.h	/^		CIface *GetIface()$/;"	f	class:CSignature
GetImmatureBalance	../../server/wallet.cpp	/^int64 CWallet::GetImmatureBalance()$/;"	f	class:CWallet
GetInitialBlockValue	../../server/block.cpp	/^int64 GetInitialBlockValue(int nHeight, int64 nFees)$/;"	f
GetInputs	../../server/txmempool.h	/^    tx_cache& GetInputs()$/;"	f	class:CPoolTx
GetKey	../../server/keystore.cpp	/^CKey *CBasicKeyStore::GetKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
GetKey	../../server/shlib.h	/^    shkey_t *GetKey()$/;"	f	class:SHPeer
GetKey	../../test/testcoin_bip32.cpp	/^		K GetKey() {$/;"	f	class:CBitcoinExtKeyBase
GetKeyID	../../server/coinaddr.cpp	/^bool CCoinAddr::GetKeyID(CKeyID &keyID) const$/;"	f	class:CCoinAddr
GetKeyMetadata	../../server/keystore.cpp	/^CKeyMetadata *CBasicKeyStore::GetKeyMetadata(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
GetKeys	../../server/keystore.h	/^    void GetKeys(std::set<CKeyID> &setAddress) const$/;"	f	class:CBasicKeyStore
GetLastBlockIndexForAlgo	../../server/block.cpp	/^const CBlockIndex* GetLastBlockIndexForAlgo(const CBlockIndex* pindex, int algo)$/;"	f
GetLastCheckpoint	../../server/checkpoints.cpp	/^CBlockIndex* CCheckpoints::GetLastCheckpoint()$/;"	f	class:CCheckpoints
GetLegacySigOpCount	../../server/main.cpp	/^CTransaction::GetLegacySigOpCount() const$/;"	f	class:CTransaction
GetLocator	../../server/wallet.cpp	/^CBlockLocator CWallet::GetLocator(CBlockIndex *pindex)$/;"	f	class:CWallet
GetLocatorIndex	../../server/wallet.cpp	/^CBlockIndex *CWallet::GetLocatorIndex(const CBlockLocator& loc)$/;"	f	class:CWallet
GetMasterPubKey	../../server/hdkey.cpp	/^HDPubKey HDPrivKey::GetMasterPubKey() const$/;"	f	class:HDPrivKey
GetMatrix	../../server/block.h	/^    CTxMatrix *GetMatrix()$/;"	f	class:CTransaction
GetMatrixOrigin	../../server/matrix.cpp	/^shgeo_t *GetMatrixOrigin(CTransaction& tx)$/;"	f
GetMaxConfirms	../../server/txfeerate.h	/^    unsigned int GetMaxConfirms() { return confAvg.size(); }$/;"	f	class:TxConfirmStats
GetMaxQueueMem	../../server/txmempool.h	/^    size_t GetMaxQueueMem()$/;"	f	class:CPool
GetMaxSigOpCost	../../server/txmempool.cpp	/^int64_t CPool::GetMaxSigOpCost()$/;"	f	class:CPool
GetMaxWeight	../../server/txmempool.cpp	/^int64_t CPool::GetMaxWeight()$/;"	f	class:CPool
GetMedianTime	../../server/block.h	/^    int64 GetMedianTime() const$/;"	f	class:CBlockIndex
GetMedianTimePast	../../server/block.h	/^    int64 GetMedianTimePast() const$/;"	f	class:CBlockIndex
GetMergedAddr	../../server/account.cpp	/^bool CAccountCache::GetMergedAddr(cbuff tag, CCoinAddr& addr)$/;"	f	class:CAccountCache
GetMergedAddr	../../server/account.h	/^		bool GetMergedAddr(const char *tag, CCoinAddr& addr)$/;"	f	class:CAccountCache
GetMergedAddress	../../server/wallet.cpp	/^bool CWallet::GetMergedAddress(string strAccount, const char *tag, CCoinAddr& addrRet)$/;"	f	class:CWallet
GetMergedPubKey	../../server/account.cpp	/^bool CAccountCache::GetMergedPubKey(cbuff tag, CPubKey& pubkey)$/;"	f	class:CAccountCache
GetMergedPubKey	../../server/account.h	/^		bool GetMergedPubKey(const char *tag, CPubKey& pubkey)$/;"	f	class:CAccountCache
GetMergedPubKey	../../server/wallet.cpp	/^bool CWallet::GetMergedPubKey(string strAccount, const char *tag, CPubKey& pubkey)$/;"	f	class:CWallet
GetMethod	../../server/key.h	/^		int GetMethod() const$/;"	f	class:CKey
GetMethod	../../server/key.h	/^		int GetMethod() const$/;"	f	class:CPubKey
GetMinFee	../../server/txfeerate.cpp	/^CFeeRate CBlockPolicyEstimator::GetMinFee(size_t sizelimit)$/;"	f	class:CBlockPolicyEstimator
GetMinFee_mode	../../server/block.h	/^enum GetMinFee_mode$/;"	g
GetMode	../../server/net.h	/^    int GetMode()$/;"	f	class:CBloomFilter
GetModifiedSize	../../server/txmempool.h	/^    int64 GetModifiedSize()$/;"	f	class:CPoolTx
GetMsgMap	../../server/netmsg.cpp	/^netmsg_map *GetMsgMap(int ifaceIndex)$/;"	f
GetNotaryAddr	../../server/wallet.cpp	/^CCoinAddr CWallet::GetNotaryAddr(string strAccount)$/;"	f	class:CWallet
GetNotorizedBlockHash	../../server/checkpoints.h	/^		const uint256 GetNotorizedBlockHash()$/;"	f	class:CCheckpoints
GetNotorizedBlockHeight	../../server/checkpoints.h	/^		const unsigned int GetNotorizedBlockHeight()$/;"	f	class:CCheckpoints
GetObjectInt	../../shapi/shapi_api.cpp	/^static unsigned int GetObjectInt(Object obj, string cmp_name)$/;"	f	file:
GetObjectInt	../../stratum/stratum_api.cpp	/^static unsigned int GetObjectInt(Object obj, string cmp_name)$/;"	f	file:
GetOffer	../../server/block.h	/^    COffer *GetOffer() const$/;"	f	class:CTransaction
GetOp	../../server/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet) const$/;"	f	class:CScript
GetOp	../../server/script.h	/^    bool GetOp(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet) const$/;"	f	class:CScript
GetOp	../../server/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet)$/;"	f	class:CScript
GetOp	../../server/script.h	/^    bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)$/;"	f	class:CScript
GetOp2	../../server/script.h	/^    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const$/;"	f	class:CScript
GetOpName	../../server/script.cpp	/^const char* GetOpName(opcodetype opcode)$/;"	f
GetOutput	../../server/txmempool.cpp	/^bool CPoolTx::GetOutput(const CTxIn& input, CTxOut& retOut)$/;"	f	class:CPoolTx
GetOutputFor	../../server/main.cpp	/^bool CTransaction::GetOutputFor(const CTxIn& input, tx_cache& inputs, CTxOut& retOut)$/;"	f	class:CTransaction
GetOutputFor	../../server/main.cpp	/^const CTxOut& CTransaction::GetOutputFor(const CTxIn& input, const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetOutputsForAccount	../../stratum/stratum_api.cpp	/^bool GetOutputsForAccount(CWallet *wallet, string strAccount, vector<CTxDestination>& addr_list)$/;"	f
GetOutputsHash	../../server/script.cpp	/^uint256 GetOutputsHash(const CTransaction& txTo) {$/;"	f
GetOutputsHash	../../server/txsignature.cpp	/^static uint256 GetOutputsHash(const CTransaction& txTo) {$/;"	f	file:
GetOverflowTx	../../server/txmempool.cpp	/^vector<CTransaction> CPool::GetOverflowTx()$/;"	f	class:CPool
GetOverflowTxSize	../../server/txmempool.h	/^    int64 GetOverflowTxSize()$/;"	f	class:CPool
GetP2SHSigOpCount	../../server/main.cpp	/^unsigned int CTransaction::GetP2SHSigOpCount(const MapPrevTx& inputs) const$/;"	f	class:CTransaction
GetParam	../../server/block.h	/^		CParam *GetParam() const$/;"	f	class:CTransaction
GetPidFile	../../server/util.cpp	/^boost::filesystem::path GetPidFile()$/;"	f
GetPoWHash	../../server/block.cpp	/^uint256 CBlockHeader::GetPoWHash() const$/;"	f	class:CBlockHeader
GetPoolTx	../../server/txmempool.h	/^    CPoolTx *GetPoolTx(uint256 hash)$/;"	f	class:CPool
GetPrevoutHash	../../server/script.cpp	/^uint256 GetPrevoutHash(const CTransaction& txTo) {$/;"	f
GetPrevoutHash	../../server/txsignature.cpp	/^static uint256 GetPrevoutHash(const CTransaction& txTo) {$/;"	f	file:
GetPrimaryAddr	../../server/account.cpp	/^bool CAccountCache::GetPrimaryAddr(int type, CTxDestination& addrRet)$/;"	f	class:CAccountCache
GetPrimaryAddr	../../server/wallet.cpp	/^CCoinAddr CWallet::GetPrimaryAddr(string strAccount)$/;"	f	class:CWallet
GetPrimaryPubKey	../../server/account.cpp	/^bool CAccountCache::GetPrimaryPubKey(int type, CPubKey& pubkeyRet)$/;"	f	class:CAccountCache
GetPrimaryPubKey	../../server/wallet.cpp	/^CPubKey CWallet::GetPrimaryPubKey(string strAccount)$/;"	f	class:CWallet
GetPriority	../../server/txcreator.cpp	/^double CTxCreator::GetPriority(int64 nBytes)$/;"	f	class:CTxCreator
GetPriority	../../server/txmempool.cpp	/^double CPoolTx::GetPriority(unsigned int currentHeight) const$/;"	f	class:CPoolTx
GetPriority	../../server/wallet.cpp	/^double CWallet::GetPriority(const CTransaction& tx, tx_cache& inputs)$/;"	f	class:CWallet
GetPrivKey	../../server/dikey.cpp	/^CPrivKey DIKey::GetPrivKey() const$/;"	f	class:DIKey
GetPrivKey	../../server/eckey.cpp	/^CPrivKey ECKey::GetPrivKey() const$/;"	f	class:ECKey
GetPubKey	../../server/dikey.cpp	/^CPubKey DIKey::GetPubKey() const$/;"	f	class:DIKey
GetPubKey	../../server/eckey.cpp	/^CPubKey ECKey::GetPubKey() const$/;"	f	class:ECKey
GetPubKey	../../server/hdkey.cpp	/^CPubKey HDPrivKey::GetPubKey() const$/;"	f	class:HDPrivKey
GetPubKey	../../server/keystore.cpp	/^bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const$/;"	f	class:CKeyStore
GetPubKeyMode	../../server/account.cpp	/^int GetPubKeyMode(const char *tag)$/;"	f
GetPubKeyTag	../../server/account.cpp	/^static const char *GetPubKeyTag(int type)$/;"	f	file:
GetPubKeyVersion	../../server/coinaddr.cpp	/^int CCoinAddr::GetPubKeyVersion() const $/;"	f	class:CCoinAddr
GetRand	../../server/util.cpp	/^uint64 GetRand(uint64 nMax)$/;"	f
GetRandHash	../../server/util.cpp	/^uint256 GetRandHash()$/;"	f
GetRandInt	../../server/util.cpp	/^int GetRandInt(int nMax)$/;"	f
GetRecvAddr	../../server/wallet.cpp	/^CCoinAddr CWallet::GetRecvAddr(string strAccount)$/;"	f	class:CWallet
GetRefCount	../../server/net.h	/^    int GetRefCount()$/;"	f	class:CNode
GetReferenceHash	../../server/matrix.h	/^		uint160 GetReferenceHash()$/;"	f	class:CTxMatrix
GetRequestCount	../../server/wallet.cpp	/^int CWalletTx::GetRequestCount() const$/;"	f	class:CWalletTx
GetScript	../../server/coinaddr.cpp	/^CScript CCoinAddr::GetScript()$/;"	f	class:CCoinAddr
GetScriptForDestination	../../server/script.cpp	/^CScript GetScriptForDestination(const CTxDestination& dest)$/;"	f
GetScriptForWitness	../../server/coinaddr.cpp	/^CScript GetScriptForWitness(const CScript& redeemscript, int nVer)$/;"	f
GetScriptID	../../server/coinaddr.cpp	/^bool CCoinAddr::GetScriptID(CScriptID& scriptID) const $/;"	f	class:CCoinAddr
GetScriptVersion	../../server/coinaddr.cpp	/^int CCoinAddr::GetScriptVersion() const$/;"	f	class:CCoinAddr
GetSecret	../../server/base58.h	/^		CSecret GetSecret(bool &fCompressedOut)$/;"	f	class:CCoinSecret
GetSecret	../../server/key.h	/^    CSecret GetSecret(bool &fCompressed) const$/;"	f	class:CKey
GetSecret	../../server/keystore.h	/^    virtual bool GetSecret(const CKeyID &address, CSecret& vchSecret, bool &fCompressed) const$/;"	f	class:CKeyStore
GetSendTxObj	../../stratum/stratum_api.cpp	/^Object GetSendTxObj(CWallet *wallet, CWalletTx& wtx, CScript& scriptPub, tx_cache& inputs)$/;"	f
GetSequenceHash	../../server/script.cpp	/^uint256 GetSequenceHash(const CTransaction& txTo) {$/;"	f
GetSequenceHash	../../server/txsignature.cpp	/^static uint256 GetSequenceHash(const CTransaction& txTo) {$/;"	f	file:
GetSerializedSize	../../server/txcreator.cpp	/^size_t CTxCreator::GetSerializedSize()$/;"	f	class:CTxCreator
GetShortID	../../server/block_cmpct.cpp	/^uint64_t CBlockHeaderAndShortTxIDs::GetShortID(const uint256& txhash) const {$/;"	f	class:CBlockHeaderAndShortTxIDs
GetSigOpCost	../../server/block.cpp	/^int64_t CTransaction::GetSigOpCost(MapPrevTx& mapInputs, int flags)$/;"	f	class:CTransaction
GetSigOpCost	../../server/block.cpp	/^int64_t CTransaction::GetSigOpCost(tx_cache& mapInputs, int flags)$/;"	f	class:CTransaction
GetSigOpCount	../../server/script.cpp	/^unsigned int CScript::GetSigOpCount(bool fAccurate) const$/;"	f	class:CScript
GetSigOpCount	../../server/script.cpp	/^unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const$/;"	f	class:CScript
GetSize	../../server/matrix.h	/^		unsigned int GetSize()$/;"	f	class:CTxMatrix
GetSkipHeight	../../server/block.cpp	/^static int GetSkipHeight(int height) $/;"	f	file:
GetSpecialFolderPath	../../server/util.cpp	/^boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate)$/;"	f
GetStaleTxSize	../../server/txmempool.h	/^    int64 GetStaleTxSize()$/;"	f	class:CPool
GetStamp	../../server/txmempool.h	/^    time_t GetStamp()$/;"	f	class:CPoolTx
GetStateFor	../../server/versionbits.cpp	/^ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex *pindexPrev, CIface *params, DeploymentPos pos) const$/;"	f	class:AbstractThresholdConditionChecker
GetTime	../../server/util.cpp	/^int64 GetTime()$/;"	f
GetTotalBlocksEstimate	../../server/checkpoints.cpp	/^int CCheckpoints::GetTotalBlocksEstimate()$/;"	f	class:CCheckpoints
GetTransaction	../../server/block.cpp	/^bool GetTransaction(CIface *iface, const uint256 &hash, CTransaction &tx, uint256 *hashBlock)$/;"	f
GetTransaction	../../server/wallet.cpp	/^bool CWallet::GetTransaction(const uint256 &hashTx, CWalletTx& wtx)$/;"	f	class:CWallet
GetTx	../../server/block.cpp	/^const CTransaction *CBlock::GetTx(uint256 hash)$/;"	f	class:CBlock
GetTx	../../server/txmempool.cpp	/^bool CPool::GetTx(uint256 hash, CTransaction& retTx, int flags)$/;"	f	class:CPool
GetTx	../../server/txmempool.h	/^    CTransaction& GetTx()$/;"	f	class:CPoolTx
GetTx	../../server/wallettx.cpp	/^CWalletTx& CWallet::GetTx(const uint256& hTx)$/;"	f	class:CWallet
GetTxFee	../../server/wallet.cpp	/^int64 GetTxFee(int ifaceIndex, CTransaction tx)$/;"	f
GetTxList	../../server/txcreator.h	/^    vector<CWalletTx>& GetTxList()$/;"	f	class:CTxBatchCreator
GetTxMemPool	../../server/txmempool.cpp	/^CTxMemPool *GetTxMemPool(CIface *iface)$/;"	f
GetTxSize	../../server/txmempool.h	/^    int64 GetTxSize()$/;"	f	class:CPoolTx
GetTxTime	../../server/wallet.cpp	/^int64 CWalletTx::GetTxTime() const$/;"	f	class:CWalletTx
GetTxnOutputType	../../server/script.cpp	/^const char* GetTxnOutputType(txnouttype t)$/;"	f
GetType	../../server/matrix.h	/^		unsigned int GetType()$/;"	f	class:CTxMatrix
GetUnconfirmedBalance	../../server/wallet.cpp	/^int64 CWallet::GetUnconfirmedBalance() const$/;"	f	class:CWallet
GetValidIndexSet	../../server/block.cpp	/^ValidIndexSet *GetValidIndexSet(int ifaceIndex)$/;"	f
GetValidateNotaries	../../server/matrix.cpp	/^bool GetValidateNotaries(CWallet *wallet, vector<CPubKey>& kSend, uint256 hMatrixTx = 0)$/;"	f
GetValueIn	../../server/main.cpp	/^int64 CTransaction::GetValueIn(const MapPrevTx& inputs)$/;"	f	class:CTransaction
GetValueIn	../../server/main.cpp	/^int64 CTransaction::GetValueIn(tx_cache& inputs)$/;"	f	class:CTransaction
GetValueOut	../../server/block.h	/^    int64 GetValueOut() const$/;"	f	class:CTransaction
GetVersion	../../server/base58.h	/^		const cbuff& GetVersion() const$/;"	f	class:CBase58Data
GetVersion	../../server/block.h	/^		int GetVersion() const$/;"	f	class:CTransactionCore
GetVersionAlgo	../../server/algobits.cpp	/^int GetVersionAlgo(unsigned int nVersion)$/;"	f
GetVersionBitsCache	../../server/versionbits.cpp	/^VersionBitsCache *GetVersionBitsCache(CIface *iface)$/;"	f
GetVirtualTransactionSize	../../server/wallet.h	/^		unsigned int GetVirtualTransactionSize(const CTransaction& tx)$/;"	f	class:CWallet
GetVirtualTransactionSize	../../server/wallet.h	/^		unsigned int GetVirtualTransactionSize(int64 nWeight)$/;"	f	class:CWallet
GetWallet	../../server/wallet.cpp	/^CWallet *GetWallet(CIface *iface)$/;"	f
GetWallet	../../server/wallet.cpp	/^CWallet *GetWallet(int iface_idx)$/;"	f
GetWalletFile	../../server/wallet.cpp	/^bool GetWalletFile(CWallet* pwallet, string &strWalletFileOut)$/;"	f
GetWalletTxChain	../../blockchain/bc_block.c	/^bc_t *GetWalletTxChain(CIface *iface)$/;"	f
GetWarnings	../../server/main.cpp	/^string GetWarnings(int ifaceIndex, string strFor)$/;"	f
GetWeight	../../server/txmempool.h	/^    int64 GetWeight()$/;"	f	class:CPoolTx
GetWitness	../../server/coinaddr.cpp	/^CTxDestination CCoinAddr::GetWitness(int output_type) const $/;"	f	class:CCoinAddr
GetWitnessCommitmentIndex	../../server/block.cpp	/^int GetWitnessCommitmentIndex(const CBlock& block)$/;"	f
GetWitnessHash	../../server/block.h	/^    uint256 GetWitnessHash() const$/;"	f	class:CTransaction
HDMasterPrivKey	../../server/hdkey.h	/^    HDMasterPrivKey() : HDPrivKey()$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	../../server/hdkey.h	/^    HDMasterPrivKey(CSecret secretIn, cbuff vchChainIn)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	../../server/hdkey.h	/^    HDMasterPrivKey(ECKey seed_key)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	../../server/hdkey.h	/^    HDMasterPrivKey(HDMasterPrivKey& b)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	../../server/hdkey.h	/^    HDMasterPrivKey(cbuff seedIn)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	../../server/hdkey.h	/^    HDMasterPrivKey(cbuff vchKeyIn, cbuff vchChainIn)$/;"	f	class:HDMasterPrivKey
HDMasterPrivKey	../../server/hdkey.h	/^class HDMasterPrivKey : public HDPrivKey$/;"	c
HDPrivKey	../../server/hdkey.h	/^    HDPrivKey()$/;"	f	class:HDPrivKey
HDPrivKey	../../server/hdkey.h	/^    HDPrivKey(CSecret secret, bool fCompressed)$/;"	f	class:HDPrivKey
HDPrivKey	../../server/hdkey.h	/^    HDPrivKey(const HDPrivKey& b)$/;"	f	class:HDPrivKey
HDPrivKey	../../server/hdkey.h	/^    HDPrivKey(const HDPrivKey& parent, cbuff vchKeyIn, cbuff vchChainIn, int indexIn)$/;"	f	class:HDPrivKey
HDPrivKey	../../server/hdkey.h	/^class HDPrivKey : public ECKey$/;"	c
HDPubKey	../../server/hdkey.h	/^    HDPubKey()$/;"	f	class:HDPubKey
HDPubKey	../../server/hdkey.h	/^    HDPubKey(cbuff vchPubKeyIn)$/;"	f	class:HDPubKey
HDPubKey	../../server/hdkey.h	/^    HDPubKey(cbuff vchPubKeyIn, cbuff vchChainIn)$/;"	f	class:HDPubKey
HDPubKey	../../server/hdkey.h	/^    HDPubKey(cbuff vchPubKeyIn, cbuff vchChainIn, int depthIn, int indexIn)$/;"	f	class:HDPubKey
HDPubKey	../../server/hdkey.h	/^    HDPubKey(const HDPubKey& b)$/;"	f	class:HDPubKey
HDPubKey	../../server/hdkey.h	/^class HDPubKey : public CPubKey$/;"	c
HEADER_PREFIX	../../proto/coin_proto.h	160;"	d
HTTPF_DISABLE	../../stratum/stratum_http.h	33;"	d
HUGE_STRING_LEN	../../test/CuTest.h	62;"	d
HandleSIGHUP	../../server/init.cpp	/^void HandleSIGHUP(int)$/;"	f
HandleSIGTERM	../../server/init.cpp	/^void HandleSIGTERM(int)$/;"	f
HasAlgoConsensus	../../server/chain.cpp	/^bool HasAlgoConsensus(CIface *iface, CBlockIndex *pindexLast)$/;"	f
HasArchTx	../../server/wallettx.cpp	/^bool CWallet::HasArchTx(uint256 hash) const$/;"	f	class:CWallet
HasBlockHash	../../server/block.cpp	/^bool HasBlockHash(CIface *iface, uint256 hash)$/;"	f
HasTx	../../server/wallettx.cpp	/^bool CWallet::HasTx(const uint256 hTx) const$/;"	f	class:CWallet
HasTxCoins	../../server/coin.cpp	/^bool HasTxCoins(CIface *iface, uint256 hash)$/;"	f
Hash	../../server/bloom.cpp	/^inline unsigned int CBloomFilter::Hash(unsigned int nHashNum, const std::vector<unsigned char>& vDataToHash) const$/;"	f	class:CBloomFilter
HashList	../../server/block.h	/^typedef std::vector<uint256> HashList;$/;"	t
HaveCScript	../../server/keystore.cpp	/^bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const$/;"	f	class:CBasicKeyStore
HaveInput	../../server/txcreator.cpp	/^bool CTxCreator::HaveInput(CWalletTx *tx, unsigned int n)$/;"	f	class:CTxCreator
HaveInput	../../server/txcreator.cpp	/^bool CTxCreator::HaveInput(const CPubKey& pubKey)$/;"	f	class:CTxCreator
HaveInput	../../server/txcreator.cpp	/^bool CTxCreator::HaveInput(const CTxDestination& input)$/;"	f	class:CTxCreator
HaveKey	../../server/keystore.h	/^    bool HaveKey(const CKeyID &address) const$/;"	f	class:CBasicKeyStore
HaveKeys	../../server/script.cpp	/^unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)$/;"	f
HaveOutput	../../server/txcreator.cpp	/^bool CTxCreator::HaveOutput(const CPubKey& pubKey)$/;"	f	class:CTxCreator
HaveOutput	../../server/txcreator.cpp	/^bool CTxCreator::HaveOutput(const CTxDestination& input)$/;"	f	class:CTxCreator
HaveTx	../../server/txmempool.h	/^    bool HaveTx(uint256 hash)$/;"	f	class:CPool
HexBits	../../shapi/shapi_api.cpp	/^static std::string HexBits(unsigned int nBits)$/;"	f	file:
HexBits	../../stratum/stratum_api.cpp	/^static std::string HexBits(unsigned int nBits)$/;"	f	file:
HexBits	../../stratum/stratum_miner.cpp	/^static std::string HexBits(unsigned int nBits)$/;"	f	file:
INF_FEERATE	../../server/txfeerate.h	240;"	d
INF_PRIORITY	../../server/txfeerate.h	243;"	d
INIT_SECP256K1	../../server/eckey.cpp	/^void INIT_SECP256K1(void)$/;"	f
INIT_UNET_PEER_SCAN_SIZE	../../unet/unet_peerdb.c	29;"	d	file:
IS_ACCOUNT	../../server/account.cpp	58;"	d	file:
IndexOfExtOutput	../../server/wallet.cpp	/^int IndexOfExtOutput(const CTransaction& tx)$/;"	f
Init	../../server/block.cpp	/^void CTransaction::Init(const CTransaction& tx)$/;"	f	class:CTransaction
Init	../../server/hdkey.h	/^    void Init(const HDMasterPrivKey& b)$/;"	f	class:HDMasterPrivKey
Init	../../server/hdkey.h	/^    void Init(const HDPrivKey& b)$/;"	f	class:HDPrivKey
Init	../../server/hdkey.h	/^    void Init(const HDPubKey& b)$/;"	f	class:HDPubKey
Init	../../server/key.h	/^		void Init(const CKey& b)$/;"	f	class:CKey
Init	../../server/key.h	/^		void Init(const CKeyMetadata& b)$/;"	f	class:CKeyMetadata
Init	../../server/main.h	/^    void Init()$/;"	f	class:CMerkleTx
Init	../../server/matrix.h	/^		void Init(const CTxMatrix& b)$/;"	f	class:CTxMatrix
Init	../../server/txcreator.h	/^    void Init(CWallet *wallet)$/;"	f	class:CTxCreator
Init	../../server/txmempool.h	/^    void Init(const CPoolTx& b)$/;"	f	class:CPoolTx
Init	../../server/txmempool.h	/^    void Init(const CTransaction& txIn)$/;"	f	class:CPoolTx
Init	../../server/wallet.h	/^		void Init(CWallet *pwalletIn)$/;"	f	class:CWalletTx
Init	../../server/wallet.h	/^		void Init(const CAccount& b)$/;"	f	class:CAccount
InitCells	../../server/matrix.h	/^		void InitCells(const CTxMatrix& b)$/;"	f	class:CTxMatrix
InitChainExport	../../server/chain.cpp	/^int InitChainExport(int ifaceIndex, const char *path, int min, int max)$/;"	f
InitChainImport	../../server/chain.cpp	/^int InitChainImport(int ifaceIndex, const char *path, int offset)$/;"	f
InitCoinHash	../../server/coin.cpp	/^static void InitCoinHash()$/;"	f	file:
InitData	../../server/block_cmpct.cpp	/^ReadStatus PartiallyDownloadedBlock::InitData(const CBlockHeaderAndShortTxIDs& cmpctblock, const std::vector<std::pair<uint256, CTransactionRef>>& extra_txn) {$/;"	f	class:PartiallyDownloadedBlock
InitError	../../server/init.cpp	/^bool static InitError(const std::string &str)$/;"	f	file:
InitServiceBlockEvent	../../server/chain.cpp	/^int InitServiceBlockEvent(int ifaceIndex, uint64_t nHeight)$/;"	f
InitServiceMinerEvent	../../server/chain.cpp	/^int InitServiceMinerEvent(int ifaceIndex, uint64_t nIncr)$/;"	f
InitServiceValidateEvent	../../server/chain.cpp	/^void InitServiceValidateEvent(CWallet *wallet, uint64_t nHeight)$/;"	f
InitServiceWalletEvent	../../server/chain.cpp	/^void InitServiceWalletEvent(CWallet *wallet, uint64_t nHeight)$/;"	f
InitSpent	../../server/wallet.cpp	/^void CWallet::InitSpent(CWalletTx& wtx)$/;"	f	class:CWallet
InitWarning	../../server/init.cpp	/^bool static InitWarning(const std::string &str)$/;"	f	file:
Initialize	../../server/txfeerate.cpp	/^void TxConfirmStats::Initialize(std::vector<double>& defaultBuckets, unsigned int maxConfirms, double _decay, std::string _dataTypeString)$/;"	f	class:TxConfirmStats
InsertBlockIndex	../../server/txidx.cpp	/^CBlockIndex *InsertBlockIndex(blkidx_t *blockIndex, uint256 hash)$/;"	f
InsertValidateNotary	../../server/matrix.cpp	/^void InsertValidateNotary(CWallet *wallet, const CTransaction& tx)$/;"	f
InterpretNegativeSetting	../../server/util.cpp	/^static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)$/;"	f	file:
Invalidate	../../server/key.h	/^		void Invalidate()$/;"	f	class:CPubKey
Inventory	../../server/wallet.h	/^		void Inventory(const uint256 &hash)$/;"	f	class:CWallet
InvertLowestOne	../../server/block.cpp	/^int static inline InvertLowestOne(int n) { return n & (n - 1); }$/;"	f	file:
IsAccountValid	../../server/wallet.cpp	/^bool IsAccountValid(CIface *iface, std::string strAccount)$/;"	f
IsAddrUsed	../../server/account.cpp	/^bool CAccountCache::IsAddrUsed(const CCoinAddr& addr)$/;"	f	class:CAccountCache
IsAddrUsed	../../server/account.cpp	/^bool CAccountCache::IsAddrUsed(const CPubKey& vchPubKey)$/;"	f	class:CAccountCache
IsAlgoBitsMask	../../server/algobits.cpp	/^bool IsAlgoBitsMask(unsigned int nVersion)$/;"	f
IsChange	../../server/wallet.cpp	/^bool CWallet::IsChange(const CTxOut& txout) const$/;"	f	class:CWallet
IsCoinBase	../../server/block.h	/^    bool IsCoinBase() const$/;"	f	class:CTransaction
IsCompressed	../../server/key.h	/^		bool IsCompressed() const$/;"	f	class:CPubKey
IsCompressed	../../server/key.h	/^    bool IsCompressed() const$/;"	f	class:CKey
IsConfirmed	../../server/wallet.cpp	/^bool CWalletTx::IsConfirmed() const$/;"	f	class:CWalletTx
IsDependent	../../server/txmempool.cpp	/^bool CPoolTx::IsDependent(const CPoolTx& ptx) const$/;"	f	class:CPoolTx
IsDilithium	../../server/key.h	/^		bool IsDilithium() const$/;"	f	class:CKey
IsDilithium	../../server/key.h	/^		bool IsDilithium() const$/;"	f	class:CPubKey
IsEmpty	../../server/block.h	/^    bool IsEmpty() const { return vtxinwit.empty(); }$/;"	f	class:CTxWitness
IsExpired	../../server/txmempool.h	/^    bool IsExpired(time_t span)$/;"	f	class:CPoolTx
IsFinal	../../server/block.cpp	/^bool CTransaction::IsFinal(int ifaceIndex, int nBlockHeight, int64 nBlockTime) const$/;"	f	class:CTransaction
IsFinal	../../server/block.h	/^    bool IsFinal() const$/;"	f	class:CTxIn
IsFlag	../../server/txmempool.h	/^    bool IsFlag(int flag)$/;"	f	class:CPoolTx
IsFromMe	../../server/wallet.h	/^			 bool IsFromMe() const$/;"	f	class:CWalletTx
IsFromMe	../../server/wallet.h	/^		bool IsFromMe(const CTransaction& tx)$/;"	f	class:CWallet
IsHex	../../server/util.cpp	/^bool IsHex(const string& str)$/;"	f
IsInMainChain	../../server/block.cpp	/^bool CBlockIndex::IsInMainChain(int ifaceIndex) const$/;"	f	class:CBlockIndex
IsInMainChain	../../server/main.h	/^    bool IsInMainChain(int ifaceIndex) const { return GetDepthInMainChain(ifaceIndex) > 0; }$/;"	f	class:CMerkleTx
IsInMemoryPool	../../server/block.cpp	/^bool CTransaction::IsInMemoryPool(int ifaceIndex)$/;"	f	class:CTransaction
IsInitialBlockDownload	../../server/block.cpp	/^bool IsInitialBlockDownload(int ifaceIndex)$/;"	f
IsInputTx	../../server/txmempool.cpp	/^bool CPool::IsInputTx(const uint256 hash, int nOut)$/;"	f	class:CPool
IsInvalidTx	../../server/txmempool.h	/^    bool IsInvalidTx(const uint256 hash) const$/;"	f	class:CPool
IsKnownType	../../server/protocol.cpp	/^bool CInv::IsKnownType() const$/;"	f	class:CInv
IsLocal	../../server/txmempool.h	/^    bool IsLocal()$/;"	f	class:CPoolTx
IsMine	../../server/script.cpp	/^bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool fWitnessFlag)$/;"	f
IsMine	../../server/script.cpp	/^bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)$/;"	f
IsMine	../../server/wallet.cpp	/^bool CWallet::IsMine(const CTxIn &txin)$/;"	f	class:CWallet
IsMine	../../server/wallet.h	/^		bool IsMine(const CTransaction& tx)$/;"	f	class:CWallet
IsMine	../../server/wallet.h	/^		bool IsMine(const CTxOut& txout)$/;"	f	class:CWallet
IsNewerThan	../../server/block.h	/^    bool IsNewerThan(const CTransaction& old) const$/;"	f	class:CTransaction
IsNull	../../server/account.h	/^		bool IsNull() const { $/;"	f	class:CAccountCache
IsNull	../../server/block.h	/^		bool IsNull()$/;"	f	class:CTxOut
IsNull	../../server/block.h	/^    bool IsNull() const { return (hash == 0 && n == (unsigned int) -1); }$/;"	f	class:COutPoint
IsNull	../../server/block.h	/^    bool IsNull() const { return (nFile == (unsigned int) -1); }$/;"	f	class:CDiskTxPos
IsNull	../../server/block.h	/^    bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }$/;"	f	class:CInPoint
IsNull	../../server/block.h	/^    bool IsNull() const { return scriptWitness.IsNull(); }$/;"	f	class:CTxInWitness
IsNull	../../server/block.h	/^    bool IsNull() const { return stack.empty(); }$/;"	f	struct:CScriptWitness
IsNull	../../server/block.h	/^    bool IsNull() const$/;"	f	class:CBlock
IsNull	../../server/block.h	/^    bool IsNull() const$/;"	f	class:CBlockHeader
IsNull	../../server/block.h	/^    bool IsNull() const$/;"	f	class:CTransactionCore
IsNull	../../server/block.h	/^    bool IsNull() const$/;"	f	class:CTxWitness
IsNull	../../server/block.h	/^    bool IsNull()$/;"	f	class:CBlockLocator
IsNull	../../server/block.h	/^    bool IsNull()$/;"	f	class:CTxIndex
IsNull	../../server/dikey.cpp	/^bool DIKey::IsNull() const$/;"	f	class:DIKey
IsNull	../../server/eckey.cpp	/^bool ECKey::IsNull() const$/;"	f	class:ECKey
IsNull	../../server/key.h	/^    bool IsNull() const$/;"	f	class:CKey
IsNull	../../server/net.h	/^    bool IsNull()$/;"	f	class:CRequestTracker
IsOutputForAccount	../../stratum/stratum_api.cpp	/^bool IsOutputForAccount(CWallet *wallet, vector<CTxDestination> addr_list, CTxDestination address)$/;"	f
IsPayToScriptHash	../../server/script.cpp	/^bool CScript::IsPayToScriptHash() const$/;"	f	class:CScript
IsPendingTx	../../server/txmempool.h	/^    bool IsPendingTx(const uint256 hash) const$/;"	f	class:CPool
IsPushOnly	../../server/script.h	/^    bool IsPushOnly() const$/;"	f	class:CScript
IsRelevant	../../server/bloom.cpp	/^bool CBloomFilter::IsRelevant(const CTransaction& tx, const uint256& hash, bool fUpdate)$/;"	f	class:CBloomFilter
IsRelevantAndUpdate	../../server/bloom.cpp	/^bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx, const uint256& hash)$/;"	f	class:CBloomFilter
IsScript	../../server/coinaddr.cpp	/^bool CCoinAddr::IsScript() const $/;"	f	class:CCoinAddr
IsSpent	../../server/wallet.h	/^			 bool IsSpent(unsigned int nOut) const$/;"	f	class:CWalletTx
IsStandard	../../server/block.cpp	/^bool CTransaction::IsStandard() const$/;"	f	class:CTransaction
IsStandard	../../server/script.cpp	/^bool IsStandard(const CScript& scriptPubKey)$/;"	f
IsTest	../../server/net.h	/^    bool IsTest()$/;"	f	class:CBloomFilter
IsTxAvailable	../../server/block_cmpct.cpp	/^bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {$/;"	f	class:PartiallyDownloadedBlock
IsValid	../../server/base58.h	/^		bool IsValid() const$/;"	f	class:CCoinSecret
IsValid	../../server/block.h	/^    bool IsValid(int nUpTo = BLOCK_VALID_TRANSACTIONS) const$/;"	f	class:CBlockIndex
IsValid	../../server/coinaddr.cpp	/^bool CCoinAddr::IsValid() const$/;"	f	class:CCoinAddr
IsValid	../../server/dikey.cpp	/^bool DIKey::IsValid()$/;"	f	class:DIKey
IsValid	../../server/eckey.cpp	/^bool ECKey::IsValid()$/;"	f	class:ECKey
IsValid	../../server/hdkey.cpp	/^bool HDPrivKey::IsValid()$/;"	f	class:HDPrivKey
IsValid	../../server/key.h	/^		bool IsValid() const$/;"	f	class:CPubKey
IsValid	../../server/protocol.cpp	/^bool CMessageHeader::IsValid(int ifaceIndex) const$/;"	f	class:CMessageHeader
IsValidKey	../../server/hdkey.cpp	/^bool HDMasterPrivKey::IsValidKey()$/;"	f	class:HDMasterPrivKey
IsValidKey	../../server/hdkey.cpp	/^bool HDPrivKey::IsValidKey()$/;"	f	class:HDPrivKey
IsWithinSizeConstraints	../../server/bloom.cpp	/^bool CBloomFilter::IsWithinSizeConstraints() const$/;"	f	class:CBloomFilter
IsWitnessEnabled	../../server/block.cpp	/^bool IsWitnessEnabled(CIface *iface, const CBlockIndex* pindexPrev)$/;"	f
IsWitnessProgram	../../server/script.cpp	/^bool CScript::IsWitnessProgram(int& version, std::vector<unsigned char>& program) const $/;"	f	class:CScript
KECCAK_WORK_CYCLE_TIME	../../stratum/stratum_keccak.c	34;"	d	file:
LN2	../../server/bloom.cpp	35;"	d	file:
LN2SQUARED	../../server/bloom.cpp	34;"	d	file:
LOCAL_BIND	../../server/net.h	/^    LOCAL_BIND,   \/\/ address explicit bound to$/;"	e	enum:__anon4
LOCAL_HTTP	../../server/net.h	/^    LOCAL_HTTP,   \/\/ address reported by whatismyip.com and similars$/;"	e	enum:__anon4
LOCAL_IF	../../server/net.h	/^    LOCAL_IF,     \/\/ address a local interface listens on$/;"	e	enum:__anon4
LOCAL_IRC	../../server/net.h	/^    LOCAL_IRC,    \/\/ address reported by IRC (deprecated)$/;"	e	enum:__anon4
LOCAL_MANUAL	../../server/net.h	/^    LOCAL_MANUAL, \/\/ address explicitly specified (-externalip=)$/;"	e	enum:__anon4
LOCAL_MAX	../../server/net.h	/^    LOCAL_MAX$/;"	e	enum:__anon4
LOCAL_NONE	../../server/net.h	/^    LOCAL_NONE,   \/\/ unknown$/;"	e	enum:__anon4
LOCAL_UPNP	../../server/net.h	/^    LOCAL_UPNP,   \/\/ address reported by UPnP$/;"	e	enum:__anon4
LOCKTIME_MEDIAN_TIME_PAST	../../server/block.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	../../server/coin.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	../../server/txmempool.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	../../server/validation.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_MEDIAN_TIME_PAST	../../server/wallet.cpp	/^static const unsigned int LOCKTIME_MEDIAN_TIME_PAST = (1 << 1);$/;"	v	file:
LOCKTIME_THRESHOLD	../../server/block.h	/^static const unsigned int LOCKTIME_THRESHOLD = 500000000; $/;"	v
LOCKTIME_VERIFY_SEQUENCE	../../server/block.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	../../server/coin.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	../../server/txmempool.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	../../server/validation.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LOCKTIME_VERIFY_SEQUENCE	../../server/wallet.cpp	/^static const unsigned int LOCKTIME_VERIFY_SEQUENCE = (1 << 0);$/;"	v	file:
LTC_COIN	../../proto/ltc_proto.h	51;"	d
LTC_COINBASE_MATURITY	../../proto/ltc_proto.h	/^static const int LTC_COINBASE_MATURITY = 100;$/;"	v
LTC_COIN_DAEMON_PORT	../../proto/ltc_proto.h	35;"	d
LTC_COIN_IFACE	../../proto/coin_proto.h	127;"	d
LTC_DEFAULT_BYTES_PER_SIGOP	../../proto/ltc_proto.h	61;"	d
LTC_MAX_BLOCK_SIZE	../../proto/ltc_proto.h	53;"	d
LTC_MAX_DRIFT_TIME	../../proto/ltc_proto.h	47;"	d
LTC_MAX_FREE_TX_SIZE	../../proto/ltc_proto.h	64;"	d
LTC_MAX_GETADDR	../../proto/ltc_proto.h	37;"	d
LTC_MAX_MONEY	../../proto/ltc_proto.h	/^static const int64 LTC_MAX_MONEY = 84000000 * LTC_COIN;$/;"	v
LTC_MAX_ORPHAN_TRANSACTIONS	../../proto/ltc_proto.h	39;"	d
LTC_MAX_SCRIPT_ELEMENT_SIZE	../../proto/ltc_proto.h	45;"	d
LTC_MAX_SCRIPT_SIZE	../../proto/ltc_proto.h	43;"	d
LTC_MAX_SIGOPS	../../proto/ltc_proto.h	41;"	d
LTC_MAX_STANDARD_TX_SIGOP_COST	../../proto/ltc_proto.h	59;"	d
LTC_MAX_STANDARD_TX_WEIGHT	../../proto/ltc_proto.h	57;"	d
LTC_MAX_TRANSACTION_WEIGHT	../../proto/ltc_proto.h	55;"	d
LTC_MAX_TX_FEE	../../proto/ltc_proto.h	/^static const int64 LTC_MAX_TX_FEE = 1000 * SHC_COIN;$/;"	v
LTC_MIN_INPUT	../../proto/ltc_proto.h	/^static const int64 LTC_MIN_INPUT = 1;\/\/294;$/;"	v
LTC_MIN_RELAY_TX_FEE	../../proto/ltc_proto.h	/^static const int64 LTC_MIN_RELAY_TX_FEE = 1000;$/;"	v
LTC_MIN_TX_FEE	../../proto/ltc_proto.h	/^static const int64 LTC_MIN_TX_FEE = 10000;$/;"	v
LTC_PROTOCOL_VERSION	../../proto/ltc_proto.h	/^static const int LTC_PROTOCOL_VERSION = 70015;$/;"	v
LTC_VERSION_BUILD	../../proto/ltc_proto.h	33;"	d
LTC_VERSION_MAJOR	../../proto/ltc_proto.h	30;"	d
LTC_VERSION_MINOR	../../proto/ltc_proto.h	31;"	d
LTC_VERSION_REVISION	../../proto/ltc_proto.h	32;"	d
LTC_WITNESS_SCALE_FACTOR	../../proto/ltc_proto.h	/^static const int LTC_WITNESS_SCALE_FACTOR = SCALE_FACTOR;$/;"	v
LastCommonAncestor	../../server/block.cpp	/^CBlockIndex* LastCommonAncestor(CBlockIndex* pa, CBlockIndex* pb) $/;"	f
ListAccountCreditDebit	../../server/walletdb.cpp	/^void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountingEntry>& entries)$/;"	f	class:CWalletDB
LoadCScript	../../server/wallet.h	/^		bool LoadCScript(const CScript& redeemScript) { return CBasicKeyStore::AddCScript(redeemScript); }$/;"	f	class:CWallet
LoadExternalBlockchainFile	../../server/chain.cpp	/^bool LoadExternalBlockchainFile()$/;"	f
LoadKey	../../server/wallet.h	/^		bool LoadKey(const DIKey& key) { return CBasicKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadKey	../../server/wallet.h	/^		bool LoadKey(const ECKey& key) { return CBasicKeyStore::AddKey(key); }$/;"	f	class:CWallet
LoadWallet	../../server/wallet.cpp	/^int CWallet::LoadWallet(bool& fFirstRunRet)$/;"	f	class:CWallet
LoadWallet	../../server/walletdb.cpp	/^int CWalletDB::LoadWallet(CWallet* pwallet)$/;"	f	class:CWalletDB
LogException	../../server/util.cpp	/^void LogException(std::exception* pex, const char* pszThread)$/;"	f
MAX_ACCADDR	../../server/wallet.h	76;"	d
MAX_ALGOBITS	../../server/algobits.h	37;"	d
MAX_API_LIST_ITEMS	../../shapi/shapi_api.cpp	41;"	d	file:
MAX_API_LIST_ITEMS	../../stratum/stratum_api.cpp	42;"	d	file:
MAX_BASE58_TYPES	../../server/coinaddr.h	/^			MAX_BASE58_TYPES$/;"	e	enum:CCoinAddr::__anon3
MAX_BASE58_TYPES	../../test/testcoin_bip32.cpp	/^	MAX_BASE58_TYPES$/;"	e	enum:Base58Type	file:
MAX_BASE58_TYPES	../../test/testcoin_sip33.cpp	/^	MAX_BASE58_TYPES$/;"	e	enum:Base58Type	file:
MAX_BC_MAP_SIZE	../../blockchain/bc_fmap.c	44;"	d	file:
MAX_BLOCKS_IN_TRANSIT_PER_PEER	../../proto/coin_proto.h	/^static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;$/;"	v
MAX_BLOCK_CONFIRMS	../../server/txfeerate.h	/^static const unsigned int MAX_BLOCK_CONFIRMS = 25;$/;"	v
MAX_BLOCK_DOWNLOAD_BATCH	../../server/chain.cpp	42;"	d	file:
MAX_BLOCK_DOWNLOAD_TIME	../../server/block.cpp	47;"	d	file:
MAX_BLOCK_SIGOPS	../../proto/coin_proto.h	55;"	d
MAX_BLOCK_SIGOP_COST	../../proto/coin_proto.h	58;"	d
MAX_BLOCK_SIZE	../../proto/coin_proto.h	64;"	d
MAX_BLOCK_WEIGHT	../../proto/coin_proto.h	69;"	d
MAX_BLOOM_FILTER_SIZE	../../server/bloom.h	/^static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; \/\/ bytes$/;"	v
MAX_COIN_IFACE	../../proto/coin_proto.h	135;"	d
MAX_CONNECT_IDLE_TIME	../../unet/unet.h	90;"	d
MAX_FEERATE	../../server/txfeerate.h	/^static const double MAX_FEERATE = 1e7;$/;"	v
MAX_FREE_TX_SIZE	../../proto/coin_proto.h	113;"	d
MAX_HASH_FUNCS	../../server/bloom.h	/^static const unsigned int MAX_HASH_FUNCS = 50;$/;"	v
MAX_HD_SEED_INDEX	../../server/hdkey.cpp	52;"	d	file:
MAX_HEADERS_RESULTS	../../proto/coin_proto.h	/^static const unsigned int MAX_HEADERS_RESULTS = 2000;$/;"	v
MAX_IDLE_TIME	../../unet/unet.h	91;"	d
MAX_IPADDR_TABLE_SIZE	../../unet/unet_local.c	31;"	d	file:
MAX_MEMPOOL_ACTIVE_SPAN	../../server/txmempool.h	30;"	d
MAX_MEMPOOL_INVAL_SPAN	../../server/txmempool.h	33;"	d
MAX_MEMPOOL_OVERFLOW_SPAN	../../server/txmempool.h	31;"	d
MAX_MEMPOOL_PENDING_SPAN	../../server/txmempool.h	32;"	d
MAX_MEMPOOL_STALE_SPAN	../../server/txmempool.h	34;"	d
MAX_MONEY	../../proto/coin_proto.h	84;"	d
MAX_NONCE_SEQUENCE	../../stratum/stratum_miner.cpp	53;"	d	file:
MAX_NOTARY_TX_VALUE	../../server/matrix.h	/^		static const int MAX_NOTARY_TX_VALUE = 100;$/;"	m	class:CTxMatrix
MAX_OPCODE	../../server/block.cpp	51;"	d	file:
MAX_ORPHAN_TRANSACTIONS	../../proto/coin_proto.h	72;"	d
MAX_PEERDB_TRACK_LIST_SIZE	../../unet/unet_peerdb.c	32;"	d	file:
MAX_PEERDB_TRACK_PRUNE_SIZE	../../unet/unet_peerdb.c	33;"	d	file:
MAX_PRIORITY	../../server/txfeerate.h	/^static const double MAX_PRIORITY = 1e16;$/;"	v
MAX_REWARD_WAIT_TIME	../../stratum/stratum_task.c	38;"	d	file:
MAX_ROUNDS_PER_HOUR	../../shapi/shapi.h	38;"	d
MAX_ROUNDS_PER_HOUR	../../stratum/stratum.h	38;"	d
MAX_ROUND_TIME	../../stratum/stratum_task.c	37;"	d	file:
MAX_SCRIPT_ELEMENT_SIZE	../../proto/coin_proto.h	181;"	d
MAX_SCRIPT_SIZE	../../proto/coin_proto.h	178;"	d
MAX_SERVER_NONCE	../../stratum/stratum_task.c	36;"	d	file:
MAX_SHAPI_MESSAGE_SIZE	../../shapi/shapi.h	44;"	d
MAX_SHAPI_USERS	../../shapi/shapi_user.c	31;"	d	file:
MAX_SOCKET_BUFFER_SIZE	../../unet/unet_close.c	28;"	d	file:
MAX_SPEED_STEP	../../shapi/shapi.h	37;"	d
MAX_SPEED_STEP	../../stratum/stratum.h	37;"	d
MAX_STRATUM_MESSAGE_SIZE	../../stratum/stratum.h	44;"	d
MAX_STRATUM_USERS	../../stratum/stratum_user.c	31;"	d	file:
MAX_TASK_LIFESPAN	../../stratum/stratum_task.h	32;"	d
MAX_TEST_CASES	../../test/CuTest.h	140;"	d
MAX_TRANSACTION_FEE	../../proto/coin_proto.h	81;"	d
MAX_TRANSACTION_WEIGHT	../../proto/coin_proto.h	75;"	d
MAX_TX_FEE	../../proto/coin_proto.h	78;"	d
MAX_TX_SIGOP_COST	../../proto/coin_proto.h	61;"	d
MAX_UNET_COIN_MODES	../../unet/unet.h	47;"	d
MAX_UNET_MODES	../../unet/unet.h	71;"	d
MAX_UNET_PEER_SCAN_SIZE	../../unet/unet_peerdb.c	30;"	d	file:
MAX_USER_FLAGS	../../stratum/stratum_user.c	43;"	d	file:
MAX_USER_WORK_DIFFICULTY	../../shapi/shapi_user.c	40;"	d	file:
MAX_USER_WORK_DIFFICULTY	../../stratum/stratum_user.c	40;"	d	file:
MAX_VERSION_BITS_DEPLOYMENTS	../../proto/coin_proto.h	/^    MAX_VERSION_BITS_DEPLOYMENTS$/;"	e	enum:DeploymentPos
MAX_WORDS	../../server/mnemonic.cpp	35;"	d	file:
META_HD_KEY	../../server/key.h	/^		static const int META_HD_KEY = (1 << 1);$/;"	m	class:CKeyMetadata
META_INTERNAL	../../server/key.h	/^		static const int META_INTERNAL = (1 << 2);$/;"	m	class:CKeyMetadata
META_SEGWIT	../../server/key.h	/^		static const int META_SEGWIT = (1 << 0);$/;"	m	class:CKeyMetadata
MIME_BMP	../../stratum/stratum_http.h	31;"	d
MIME_HTML	../../stratum/stratum_http.h	30;"	d
MIN_FEERATE	../../server/txfeerate.h	/^static const double MIN_FEERATE = 10;$/;"	v
MIN_INPUT_VALUE	../../proto/coin_proto.h	107;"	d
MIN_PRIORITY	../../server/txfeerate.h	/^static const double MIN_PRIORITY = 10;$/;"	v
MIN_RELAY_TX_FEE	../../proto/coin_proto.h	96;"	d
MIN_SHARE_DIFFICULTY	../../shapi/shapi_user.c	34;"	d	file:
MIN_SHARE_DIFFICULTY	../../stratum/stratum_user.c	34;"	d	file:
MIN_SUCCESS_PCT	../../server/txfeerate.h	/^static const double MIN_SUCCESS_PCT = .95;$/;"	v
MIN_TX_FEE	../../proto/coin_proto.h	87;"	d
MIN_TX_FEE_RATE	../../proto/coin_proto.h	90;"	d
MIN_USER_WORK_DIFFICULTY	../../shapi/shapi_user.c	37;"	d	file:
MIN_USER_WORK_DIFFICULTY	../../stratum/stratum_user.c	37;"	d	file:
MIN_VALIDATE_NOTARY_CONSENSUS	../../server/matrix.cpp	35;"	d	file:
MSG_BLOCK	../../server/net.h	/^    MSG_BLOCK,$/;"	e	enum:__anon5
MSG_CMPCT_BLOCK	../../server/net.h	/^    MSG_CMPCT_BLOCK,$/;"	e	enum:__anon5
MSG_DONTWAIT	../../unet/unet.h	85;"	d
MSG_FILTERED_BLOCK	../../server/net.h	/^    MSG_FILTERED_BLOCK, \/* bloom *\/$/;"	e	enum:__anon5
MSG_FILTERED_WITNESS_BLOCK	../../server/net.h	/^    MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG$/;"	e	enum:__anon5
MSG_NOSIGNAL	../../unet/unet.h	84;"	d
MSG_TX	../../server/net.h	/^    MSG_TX = 1, $/;"	e	enum:__anon5
MSG_TYPE_MASK	../../server/net.h	123;"	d
MSG_TYPE_MAX	../../server/net.h	120;"	d
MSG_WITNESS_BLOCK	../../server/net.h	/^    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,$/;"	e	enum:__anon5
MSG_WITNESS_FLAG	../../server/net.h	122;"	d
MSG_WITNESS_TX	../../server/net.h	/^    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,$/;"	e	enum:__anon5
M_SPRING	../../server/matrix.h	/^		static const int M_SPRING = 2;$/;"	m	class:CTxMatrix
M_VALIDATE	../../server/matrix.h	/^		static const int M_VALIDATE = 1;$/;"	m	class:CTxMatrix
Maj	../../test/testcoin_algo.cpp	70;"	d	file:
MakeNewKey	../../server/dikey.cpp	/^void DIKey::MakeNewKey()$/;"	f	class:DIKey
MakeNewKey	../../server/dikey.h	/^    void MakeNewKey(bool fCompressed) \/* CKey *\/$/;"	f	class:DIKey
MakeNewKey	../../server/eckey.cpp	/^void ECKey::MakeNewKey(bool fCompressed)$/;"	f	class:ECKey
MakeNewKey	../../server/hdkey.cpp	/^void HDMasterPrivKey::MakeNewKey(bool fCompressed)$/;"	f	class:HDMasterPrivKey
MakeNewKey	../../server/hdkey.cpp	/^void HDPrivKey::MakeNewKey(bool fCompressed)$/;"	f	class:HDPrivKey
MakeNewKey	../../server/hdkey.h	/^    void MakeNewKey()$/;"	f	class:HDMasterPrivKey
MakeSameSize	../../server/script.cpp	/^void MakeSameSize(valtype& vch1, valtype& vch2)$/;"	f
MapCheckpoints	../../server/checkpoints.h	/^typedef std::map<int, uint256> MapCheckpoints;$/;"	t
MapPrevTx	../../server/block.h	/^typedef std::map<uint256, std::pair<CTxIndex, CTransaction> > MapPrevTx;$/;"	t
MarkDirty	../../server/wallet.cpp	/^void CWallet::MarkDirty()$/;"	f	class:CWallet
MarkDirty	../../server/wallet.h	/^			 void MarkDirty()$/;"	f	class:CWalletTx
MarkSpent	../../server/wallet.h	/^			 void MarkSpent(unsigned int nOut)$/;"	f	class:CWalletTx
Mask	../../server/versionbits.cpp	/^      uint32_t Mask(CIface * params) const { return ((uint32_t)1) << params->vDeployments[id].bit; }$/;"	f	class:__anon9::VersionBitsConditionChecker
MergeKey	../../server/dikey.cpp	/^void DIKey::MergeKey(CKey& childKey, cbuff tag)$/;"	f	class:DIKey
MergeKey	../../server/eckey.cpp	/^void ECKey::MergeKey(CKey& childKey, cbuff tag)$/;"	f	class:ECKey
MerkleComputation	../../server/wit_merkle.cpp	/^static void MerkleComputation(const std::vector<uint256>& leaves, uint256* proot, bool* pmutated, uint32_t branchpos, std::vector<uint256>* pbranch) $/;"	f	file:
MoneyRange	../../server/block.h	/^inline bool MoneyRange(CIface *iface, int64 nValue) $/;"	f
MoneyRange	../../server/block.h	/^inline bool MoneyRange(int ifaceIndex, int64 nValue) $/;"	f
MurmurHash3	../../server/bloom.cpp	/^unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)$/;"	f
NOMINMAX	../../server/util.cpp	54;"	d	file:
NULL_ACCOUNT	../../server/wallet.cpp	/^const string NULL_ACCOUNT = "*";$/;"	v
Neuter	../../server/dikey.cpp	/^DIExtPubKey DIExtKey::Neuter() const $/;"	f	class:DIExtKey
Neuter	../../server/eckey.cpp	/^ECExtPubKey ECExtKey::Neuter() const $/;"	f	class:ECExtKey
NewTx	../../server/txfeerate.cpp	/^unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)$/;"	f	class:TxConfirmStats
NodeList	../../proto/coin_proto.h	/^typedef std::vector<CNode *> NodeList;$/;"	t
OP_0	../../server/script.h	/^    OP_0 = 0x00,$/;"	e	enum:opcodetype
OP_0NOTEQUAL	../../server/script.h	/^    OP_0NOTEQUAL = 0x92,$/;"	e	enum:opcodetype
OP_1	../../server/script.h	/^    OP_1 = 0x51,$/;"	e	enum:opcodetype
OP_10	../../server/script.h	/^    OP_10 = 0x5a,$/;"	e	enum:opcodetype
OP_11	../../server/script.h	/^    OP_11 = 0x5b,$/;"	e	enum:opcodetype
OP_12	../../server/script.h	/^    OP_12 = 0x5c,$/;"	e	enum:opcodetype
OP_13	../../server/script.h	/^    OP_13 = 0x5d,$/;"	e	enum:opcodetype
OP_14	../../server/script.h	/^    OP_14 = 0x5e,$/;"	e	enum:opcodetype
OP_15	../../server/script.h	/^    OP_15 = 0x5f,$/;"	e	enum:opcodetype
OP_16	../../server/script.h	/^    OP_16 = 0x60,$/;"	e	enum:opcodetype
OP_1ADD	../../server/script.h	/^    OP_1ADD = 0x8b,$/;"	e	enum:opcodetype
OP_1NEGATE	../../server/script.h	/^    OP_1NEGATE = 0x4f,$/;"	e	enum:opcodetype
OP_1SUB	../../server/script.h	/^    OP_1SUB = 0x8c,$/;"	e	enum:opcodetype
OP_2	../../server/script.h	/^    OP_2 = 0x52,$/;"	e	enum:opcodetype
OP_2DIV	../../server/script.h	/^    OP_2DIV = 0x8e,$/;"	e	enum:opcodetype
OP_2DROP	../../server/script.h	/^    OP_2DROP = 0x6d,$/;"	e	enum:opcodetype
OP_2DUP	../../server/script.h	/^    OP_2DUP = 0x6e,$/;"	e	enum:opcodetype
OP_2MUL	../../server/script.h	/^    OP_2MUL = 0x8d,$/;"	e	enum:opcodetype
OP_2OVER	../../server/script.h	/^    OP_2OVER = 0x70,$/;"	e	enum:opcodetype
OP_2ROT	../../server/script.h	/^    OP_2ROT = 0x71,$/;"	e	enum:opcodetype
OP_2SWAP	../../server/script.h	/^    OP_2SWAP = 0x72,$/;"	e	enum:opcodetype
OP_3	../../server/script.h	/^    OP_3 = 0x53,$/;"	e	enum:opcodetype
OP_3DUP	../../server/script.h	/^    OP_3DUP = 0x6f,$/;"	e	enum:opcodetype
OP_4	../../server/script.h	/^    OP_4 = 0x54,$/;"	e	enum:opcodetype
OP_5	../../server/script.h	/^    OP_5 = 0x55,$/;"	e	enum:opcodetype
OP_6	../../server/script.h	/^    OP_6 = 0x56,$/;"	e	enum:opcodetype
OP_7	../../server/script.h	/^    OP_7 = 0x57,$/;"	e	enum:opcodetype
OP_8	../../server/script.h	/^    OP_8 = 0x58,$/;"	e	enum:opcodetype
OP_9	../../server/script.h	/^    OP_9 = 0x59,$/;"	e	enum:opcodetype
OP_ABS	../../server/script.h	/^    OP_ABS = 0x90,$/;"	e	enum:opcodetype
OP_ADD	../../server/script.h	/^    OP_ADD = 0x93,$/;"	e	enum:opcodetype
OP_ALIAS	../../server/script.h	/^    OP_ALIAS = 0x0a,$/;"	e	enum:opcodetype
OP_ALTCHAIN	../../server/script.h	/^		OP_ALTCHAIN = 0x04,$/;"	e	enum:opcodetype
OP_AND	../../server/script.h	/^    OP_AND = 0x84,$/;"	e	enum:opcodetype
OP_ASSET	../../server/script.h	/^    OP_ASSET = 0x0f,$/;"	e	enum:opcodetype
OP_BOOLAND	../../server/script.h	/^    OP_BOOLAND = 0x9a,$/;"	e	enum:opcodetype
OP_BOOLOR	../../server/script.h	/^    OP_BOOLOR = 0x9b,$/;"	e	enum:opcodetype
OP_CAT	../../server/script.h	/^    OP_CAT = 0x7e,$/;"	e	enum:opcodetype
OP_CERT	../../server/script.h	/^    OP_CERT=0x0d,$/;"	e	enum:opcodetype
OP_CHANNEL	../../server/script.h	/^    OP_CHANNEL = 0x07,$/;"	e	enum:opcodetype
OP_CHECKALTPROOF	../../server/script.h	/^		OP_CHECKALTPROOF = 0xb7,$/;"	e	enum:opcodetype
OP_CHECKLOCKTIMEVERIFY	../../server/script.h	/^		OP_CHECKLOCKTIMEVERIFY = 0xb1,$/;"	e	enum:opcodetype
OP_CHECKMULTISIG	../../server/script.h	/^    OP_CHECKMULTISIG = 0xae,$/;"	e	enum:opcodetype
OP_CHECKMULTISIGVERIFY	../../server/script.h	/^    OP_CHECKMULTISIGVERIFY = 0xaf,$/;"	e	enum:opcodetype
OP_CHECKSEQUENCEVERIFY	../../server/script.h	/^		OP_CHECKSEQUENCEVERIFY = 0xb2,$/;"	e	enum:opcodetype
OP_CHECKSIG	../../server/script.h	/^    OP_CHECKSIG = 0xac,$/;"	e	enum:opcodetype
OP_CHECKSIGVERIFY	../../server/script.h	/^    OP_CHECKSIGVERIFY = 0xad,$/;"	e	enum:opcodetype
OP_CODESEPARATOR	../../server/script.h	/^    OP_CODESEPARATOR = 0xab,$/;"	e	enum:opcodetype
OP_CONTEXT	../../server/script.h	/^    OP_CONTEXT = 0x05,$/;"	e	enum:opcodetype
OP_DEPTH	../../server/script.h	/^    OP_DEPTH = 0x74,$/;"	e	enum:opcodetype
OP_DIV	../../server/script.h	/^    OP_DIV = 0x96,$/;"	e	enum:opcodetype
OP_DROP	../../server/script.h	/^    OP_DROP = 0x75,$/;"	e	enum:opcodetype
OP_DUP	../../server/script.h	/^    OP_DUP = 0x76,$/;"	e	enum:opcodetype
OP_ELSE	../../server/script.h	/^    OP_ELSE = 0x67,$/;"	e	enum:opcodetype
OP_ENDIF	../../server/script.h	/^    OP_ENDIF = 0x68,$/;"	e	enum:opcodetype
OP_EQUAL	../../server/script.h	/^    OP_EQUAL = 0x87,$/;"	e	enum:opcodetype
OP_EQUALVERIFY	../../server/script.h	/^    OP_EQUALVERIFY = 0x88,$/;"	e	enum:opcodetype
OP_EXEC	../../server/script.h	/^    OP_EXEC = 0x06,$/;"	e	enum:opcodetype
OP_EXT_ACTIVATE	../../server/script.h	/^    OP_EXT_ACTIVATE = 0xf1,$/;"	e	enum:opcodetype
OP_EXT_GENERATE	../../server/script.h	/^    OP_EXT_GENERATE = 0xf4,$/;"	e	enum:opcodetype
OP_EXT_HASH	../../server/script.h	/^    OP_EXT_HASH = 0xfc,$/;"	e	enum:opcodetype
OP_EXT_NEW	../../server/script.h	/^    OP_EXT_NEW = 0xf0,$/;"	e	enum:opcodetype
OP_EXT_NOP8	../../server/script.h	/^		OP_EXT_NOP8 = 0xf8,$/;"	e	enum:opcodetype
OP_EXT_NOP9	../../server/script.h	/^		OP_EXT_NOP9 = 0xf9,$/;"	e	enum:opcodetype
OP_EXT_PAY	../../server/script.h	/^    OP_EXT_PAY = 0xf6,$/;"	e	enum:opcodetype
OP_EXT_REMOVE	../../server/script.h	/^    OP_EXT_REMOVE = 0xf3,$/;"	e	enum:opcodetype
OP_EXT_RESERVED1	../../server/script.h	/^    OP_EXT_RESERVED1 = 0x01,$/;"	e	enum:opcodetype
OP_EXT_RESERVED2	../../server/script.h	/^    OP_EXT_RESERVED2 = 0x02,$/;"	e	enum:opcodetype
OP_EXT_RESERVED8	../../server/script.h	/^    OP_EXT_RESERVED8 = 0x08,$/;"	e	enum:opcodetype
OP_EXT_TRANSFER	../../server/script.h	/^    OP_EXT_TRANSFER = 0xf5,$/;"	e	enum:opcodetype
OP_EXT_UPDATE	../../server/script.h	/^    OP_EXT_UPDATE = 0xf2,$/;"	e	enum:opcodetype
OP_EXT_VALIDATE	../../server/script.h	/^    OP_EXT_VALIDATE = 0xf7,$/;"	e	enum:opcodetype
OP_FALSE	../../server/script.h	/^    OP_FALSE = OP_0,$/;"	e	enum:opcodetype
OP_FROMALTSTACK	../../server/script.h	/^    OP_FROMALTSTACK = 0x6c,$/;"	e	enum:opcodetype
OP_GREATERTHAN	../../server/script.h	/^    OP_GREATERTHAN = 0xa0,$/;"	e	enum:opcodetype
OP_GREATERTHANOREQUAL	../../server/script.h	/^    OP_GREATERTHANOREQUAL = 0xa2,$/;"	e	enum:opcodetype
OP_HASH160	../../server/script.h	/^    OP_HASH160 = 0xa9,$/;"	e	enum:opcodetype
OP_HASH256	../../server/script.h	/^    OP_HASH256 = 0xaa,$/;"	e	enum:opcodetype
OP_IDENT	../../server/script.h	/^    OP_IDENT=0x0c,$/;"	e	enum:opcodetype
OP_IF	../../server/script.h	/^    OP_IF = 0x63,$/;"	e	enum:opcodetype
OP_IFDUP	../../server/script.h	/^    OP_IFDUP = 0x73,$/;"	e	enum:opcodetype
OP_INVALIDOPCODE	../../server/script.h	/^    OP_INVALIDOPCODE = 0xff,$/;"	e	enum:opcodetype
OP_INVERT	../../server/script.h	/^    OP_INVERT = 0x83,$/;"	e	enum:opcodetype
OP_LEFT	../../server/script.h	/^    OP_LEFT = 0x80,$/;"	e	enum:opcodetype
OP_LESSTHAN	../../server/script.h	/^    OP_LESSTHAN = 0x9f,$/;"	e	enum:opcodetype
OP_LESSTHANOREQUAL	../../server/script.h	/^    OP_LESSTHANOREQUAL = 0xa1,$/;"	e	enum:opcodetype
OP_LICENSE	../../server/script.h	/^    OP_LICENSE = 0x0e,$/;"	e	enum:opcodetype
OP_LSHIFT	../../server/script.h	/^    OP_LSHIFT = 0x98,$/;"	e	enum:opcodetype
OP_MATRIX	../../server/script.h	/^    OP_MATRIX = 0x09,$/;"	e	enum:opcodetype
OP_MAX	../../server/script.h	/^    OP_MAX = 0xa4,$/;"	e	enum:opcodetype
OP_MIN	../../server/script.h	/^    OP_MIN = 0xa3,$/;"	e	enum:opcodetype
OP_MOD	../../server/script.h	/^    OP_MOD = 0x97,$/;"	e	enum:opcodetype
OP_MUL	../../server/script.h	/^    OP_MUL = 0x95,$/;"	e	enum:opcodetype
OP_NEGATE	../../server/script.h	/^    OP_NEGATE = 0x8f,$/;"	e	enum:opcodetype
OP_NIP	../../server/script.h	/^    OP_NIP = 0x77,$/;"	e	enum:opcodetype
OP_NOP	../../server/script.h	/^    OP_NOP = 0x61,$/;"	e	enum:opcodetype
OP_NOP1	../../server/script.h	/^		OP_NOP1 = 0xb0,$/;"	e	enum:opcodetype
OP_NOP10	../../server/script.h	/^    OP_NOP10 = 0xb9,$/;"	e	enum:opcodetype
OP_NOP2	../../server/script.h	/^		OP_NOP2 = OP_CHECKLOCKTIMEVERIFY,$/;"	e	enum:opcodetype
OP_NOP3	../../server/script.h	/^		OP_NOP3 = OP_CHECKSEQUENCEVERIFY,$/;"	e	enum:opcodetype
OP_NOP4	../../server/script.h	/^    OP_NOP4 = 0xb3,$/;"	e	enum:opcodetype
OP_NOP5	../../server/script.h	/^    OP_NOP5 = 0xb4,$/;"	e	enum:opcodetype
OP_NOP6	../../server/script.h	/^    OP_NOP6 = 0xb5,$/;"	e	enum:opcodetype
OP_NOP7	../../server/script.h	/^    OP_NOP7 = 0xb6,$/;"	e	enum:opcodetype
OP_NOP8	../../server/script.h	/^		OP_NOP8 = OP_CHECKALTPROOF,$/;"	e	enum:opcodetype
OP_NOP9	../../server/script.h	/^    OP_NOP9 = 0xb8,$/;"	e	enum:opcodetype
OP_NOT	../../server/script.h	/^    OP_NOT = 0x91,$/;"	e	enum:opcodetype
OP_NOTIF	../../server/script.h	/^    OP_NOTIF = 0x64,$/;"	e	enum:opcodetype
OP_NUMEQUAL	../../server/script.h	/^    OP_NUMEQUAL = 0x9c,$/;"	e	enum:opcodetype
OP_NUMEQUALVERIFY	../../server/script.h	/^    OP_NUMEQUALVERIFY = 0x9d,$/;"	e	enum:opcodetype
OP_NUMNOTEQUAL	../../server/script.h	/^    OP_NUMNOTEQUAL = 0x9e,$/;"	e	enum:opcodetype
OP_OFFER	../../server/script.h	/^    OP_OFFER=0x0b,$/;"	e	enum:opcodetype
OP_OR	../../server/script.h	/^    OP_OR = 0x85,$/;"	e	enum:opcodetype
OP_OVER	../../server/script.h	/^    OP_OVER = 0x78,$/;"	e	enum:opcodetype
OP_PARAM	../../server/script.h	/^		OP_PARAM = 0x03,$/;"	e	enum:opcodetype
OP_PICK	../../server/script.h	/^    OP_PICK = 0x79,$/;"	e	enum:opcodetype
OP_PUBKEY	../../server/script.h	/^    OP_PUBKEY = 0xfe,$/;"	e	enum:opcodetype
OP_PUBKEYHASH	../../server/script.h	/^    OP_PUBKEYHASH = 0xfd,$/;"	e	enum:opcodetype
OP_PUBKEYS	../../server/script.h	/^    OP_PUBKEYS = 0xfb,$/;"	e	enum:opcodetype
OP_PUSHDATA1	../../server/script.h	/^    OP_PUSHDATA1 = 0x4c,$/;"	e	enum:opcodetype
OP_PUSHDATA2	../../server/script.h	/^    OP_PUSHDATA2 = 0x4d,$/;"	e	enum:opcodetype
OP_PUSHDATA4	../../server/script.h	/^    OP_PUSHDATA4 = 0x4e,$/;"	e	enum:opcodetype
OP_RESERVED	../../server/script.h	/^    OP_RESERVED = 0x50,$/;"	e	enum:opcodetype
OP_RESERVED1	../../server/script.h	/^    OP_RESERVED1 = 0x89,$/;"	e	enum:opcodetype
OP_RESERVED2	../../server/script.h	/^    OP_RESERVED2 = 0x8a,$/;"	e	enum:opcodetype
OP_RETURN	../../server/script.h	/^    OP_RETURN = 0x6a,$/;"	e	enum:opcodetype
OP_RIGHT	../../server/script.h	/^    OP_RIGHT = 0x81,$/;"	e	enum:opcodetype
OP_RIPEMD160	../../server/script.h	/^    OP_RIPEMD160 = 0xa6,$/;"	e	enum:opcodetype
OP_ROLL	../../server/script.h	/^    OP_ROLL = 0x7a,$/;"	e	enum:opcodetype
OP_ROT	../../server/script.h	/^    OP_ROT = 0x7b,$/;"	e	enum:opcodetype
OP_RSHIFT	../../server/script.h	/^    OP_RSHIFT = 0x99,$/;"	e	enum:opcodetype
OP_SHA1	../../server/script.h	/^    OP_SHA1 = 0xa7,$/;"	e	enum:opcodetype
OP_SHA256	../../server/script.h	/^    OP_SHA256 = 0xa8,$/;"	e	enum:opcodetype
OP_SIZE	../../server/script.h	/^    OP_SIZE = 0x82,$/;"	e	enum:opcodetype
OP_SMALLINTEGER	../../server/script.h	/^    OP_SMALLINTEGER = 0xfa,$/;"	e	enum:opcodetype
OP_SUB	../../server/script.h	/^    OP_SUB = 0x94,$/;"	e	enum:opcodetype
OP_SUBSTR	../../server/script.h	/^    OP_SUBSTR = 0x7f,$/;"	e	enum:opcodetype
OP_SWAP	../../server/script.h	/^    OP_SWAP = 0x7c,$/;"	e	enum:opcodetype
OP_TOALTSTACK	../../server/script.h	/^    OP_TOALTSTACK = 0x6b,$/;"	e	enum:opcodetype
OP_TRUE	../../server/script.h	/^    OP_TRUE=OP_1,$/;"	e	enum:opcodetype
OP_TUCK	../../server/script.h	/^    OP_TUCK = 0x7d,$/;"	e	enum:opcodetype
OP_VER	../../server/script.h	/^    OP_VER = 0x62,$/;"	e	enum:opcodetype
OP_VERIF	../../server/script.h	/^    OP_VERIF = 0x65,$/;"	e	enum:opcodetype
OP_VERIFY	../../server/script.h	/^    OP_VERIFY = 0x69,$/;"	e	enum:opcodetype
OP_VERNOTIF	../../server/script.h	/^    OP_VERNOTIF = 0x66,$/;"	e	enum:opcodetype
OP_WITHIN	../../server/script.h	/^    OP_WITHIN = 0xa5,$/;"	e	enum:opcodetype
OP_XOR	../../server/script.h	/^    OP_XOR = 0x86,$/;"	e	enum:opcodetype
OUTPUT_TYPE_BECH32	../../server/coinaddr.h	38;"	d
OUTPUT_TYPE_DILITHIUM	../../server/coinaddr.h	39;"	d
OUTPUT_TYPE_LEGACY	../../server/coinaddr.h	36;"	d
OUTPUT_TYPE_NONE	../../server/coinaddr.h	35;"	d
OUTPUT_TYPE_P2SH_SEGWIT	../../server/coinaddr.h	37;"	d
Open	../../server/txidx.cpp	/^bool CDBEnv::Open(boost::filesystem::path pathEnv_)$/;"	f	class:CDBEnv
OpenBlockFile	../../server/main.cpp	/^FILE* OpenBlockFile(unsigned int nFile, unsigned int nBlockPos, const char* pszMode)$/;"	f
POOL_ACTIVE	../../server/txmempool.h	37;"	d
POOL_DEPENDENCY	../../server/txmempool.h	48;"	d
POOL_FEE_LOW	../../server/txmempool.h	43;"	d
POOL_INVALID	../../server/txmempool.h	40;"	d
POOL_NOT_FINAL	../../server/txmempool.h	44;"	d
POOL_NO_INPUT	../../server/txmempool.h	46;"	d
POOL_OVERFLOW	../../server/txmempool.h	39;"	d
POOL_PENDING	../../server/txmempool.h	38;"	d
POOL_PEND_TX	../../server/txmempool.h	45;"	d
POOL_SOFT_LIMIT	../../server/txmempool.h	47;"	d
POOL_STALE	../../server/txmempool.h	41;"	d
POST_BLOCK_TIME	../../stratum/stratum_task.c	40;"	d	file:
PRI_SPACING	../../server/txfeerate.h	/^static const double PRI_SPACING = 2;$/;"	v
PUBKEY_ADDRESS	../../test/testcoin_bip32.cpp	/^	PUBKEY_ADDRESS,$/;"	e	enum:Base58Type	file:
PUBKEY_ADDRESS	../../test/testcoin_sip33.cpp	/^	PUBKEY_ADDRESS,$/;"	e	enum:Base58Type	file:
PUBKEY_C_ADDRESS	../../server/coinaddr.h	/^			PUBKEY_C_ADDRESS = 29,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_E_ADDRESS	../../server/coinaddr.h	/^			PUBKEY_E_ADDRESS = 33,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_G_ADDRESS	../../server/coinaddr.h	/^			PUBKEY_G_ADDRESS = 38,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_L_ADDRESS	../../server/coinaddr.h	/^			PUBKEY_L_ADDRESS = 48,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_S_ADDRESS	../../server/coinaddr.h	/^			PUBKEY_S_ADDRESS = 62,$/;"	e	enum:CCoinAddr::__anon2
PUBKEY_T_ADDRESS	../../server/coinaddr.h	/^			PUBKEY_T_ADDRESS = 65,$/;"	e	enum:CCoinAddr::__anon2
ParseHex	../../server/util.cpp	/^vector<unsigned char> ParseHex(const char* psz)$/;"	f
ParseHex	../../server/util.cpp	/^vector<unsigned char> ParseHex(const string& str)$/;"	f
ParseMoney	../../server/coin.cpp	/^bool ParseMoney(const char* pszIn, CAmount& nRet)$/;"	f
ParseMoney	../../server/coin.cpp	/^bool ParseMoney(const string& str, CAmount& nRet)$/;"	f
ParseParameters	../../server/util.cpp	/^void ParseParameters(int argc, const char* const argv[])$/;"	f
ParseString	../../server/util.cpp	/^void ParseString(const string& str, char c, vector<string>& v)$/;"	f
PartiallyDownloadedBlock	../../server/block_cmpct.h	/^		explicit PartiallyDownloadedBlock(CTxMemPool* poolIn) : pool(poolIn) {}$/;"	f	class:PartiallyDownloadedBlock
PartiallyDownloadedBlock	../../server/block_cmpct.h	/^class PartiallyDownloadedBlock $/;"	c
PayOffer	../../server/block.cpp	/^COffer *CTransaction::PayOffer(COffer *accept)$/;"	f	class:CTransaction
PerformBlockChainOperation	../../server/chain.cpp	/^void PerformBlockChainOperation(int ifaceIndex)$/;"	f
Period	../../server/versionbits.cpp	/^      int Period(CIface * params) const { return params->nMinerConfirmationWindow; }$/;"	f	class:__anon9::VersionBitsConditionChecker
PopTx	../../server/txmempool.cpp	/^bool CPool::PopTx(const CTransaction& tx, CPoolTx& ptx)$/;"	f	class:CPool
PrefilledTransaction	../../server/block_cmpct.h	/^struct PrefilledTransaction $/;"	s
PrintException	../../server/util.cpp	/^void PrintException(std::exception* pex, const char* pszThread)$/;"	f
PrintExceptionContinue	../../server/util.cpp	/^void PrintExceptionContinue(std::exception* pex, const char* pszThread)$/;"	f
PrintHex	../../server/script.h	/^    void PrintHex() const$/;"	f	class:CScript
PrintWallet	../../server/wallet.cpp	/^void CWallet::PrintWallet(const CBlock& block)$/;"	f	class:CWallet
ProcessBlock	../../server/block.cpp	/^bool ProcessBlock(CNode* pfrom, CBlock* pblock)$/;"	f
ProcessBlockAvailability	../../server/chain.cpp	/^void ProcessBlockAvailability(int ifaceIndex, CNode *pfrom)$/;"	f
ProcessNewBlockHeaders	../../server/validation.cpp	/^bool ProcessNewBlockHeaders(CIface *iface, std::vector<CBlockHeader>& headers, CBlockIndex** ppindex)$/;"	f
ProcessValidateMatrixNotaryTx	../../server/matrix.cpp	/^bool ProcessValidateMatrixNotaryTx(CIface *iface, const CTransaction& tx)$/;"	f
PurgeActiveTx	../../server/txmempool.cpp	/^void CPool::PurgeActiveTx()$/;"	f	class:CPool
PurgeOverflowTx	../../server/txmempool.cpp	/^void CPool::PurgeOverflowTx()$/;"	f	class:CPool
PurgePendingTx	../../server/txmempool.cpp	/^void CPool::PurgePendingTx()$/;"	f	class:CPool
PushAddress	../../server/net.h	/^    void PushAddress(const CAddress& addr)$/;"	f	class:CNode
PushAll	../../server/script.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushAll	../../server/txsignature.cpp	/^static CScript PushAll(const vector<valtype>& values)$/;"	f	file:
PushBlockHash	../../server/net.h	/^		void PushBlockHash(const uint256 &hash)$/;"	f	class:CNode
PushInventory	../../server/net.h	/^    void PushInventory(const CInv& inv)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8)$/;"	f	class:CNode
PushMessage	../../server/net.h	/^    void PushMessage(const char* pszCommand, const T1& a1, const T2& a2, const T3& a3, const T4& a4, const T5& a5, const T6& a6, const T7& a7, const T8& a8, const T9& a9)$/;"	f	class:CNode
PushReject	../../server/net.h	/^		void PushReject(std::string mode, uint256 hash, int err_code, std::string err_text)$/;"	f	class:CNode
PushRequest	../../server/net.h	/^    void PushRequest(const char* pszCommand, const T1& a1, const T2& a2,$/;"	f	class:CNode
PushRequest	../../server/net.h	/^    void PushRequest(const char* pszCommand, const T1& a1,$/;"	f	class:CNode
PushRequest	../../server/net.h	/^    void PushRequest(const char* pszCommand,$/;"	f	class:CNode
RANDOM_REPEATS	../../test/testcoin_coin.cpp	20;"	d	file:
READ_STATUS_CHECKBLOCK_FAILED	../../server/block_cmpct.h	/^    READ_STATUS_CHECKBLOCK_FAILED, \/\/ Used only by FillBlock to indicate a$/;"	e	enum:ReadStatus_t
READ_STATUS_FAILED	../../server/block_cmpct.h	/^    READ_STATUS_FAILED, \/\/ Failed to process object$/;"	e	enum:ReadStatus_t
READ_STATUS_INVALID	../../server/block_cmpct.h	/^    READ_STATUS_INVALID, \/\/ Invalid object, peer is sending bogus$/;"	e	enum:ReadStatus_t
READ_STATUS_OK	../../server/block_cmpct.h	/^    READ_STATUS_OK,$/;"	e	enum:ReadStatus_t
REJECT_CHECKPOINT	../../server/net.h	/^static const unsigned char REJECT_CHECKPOINT = 0x43;$/;"	v
REJECT_DUPLICATE	../../server/net.h	/^static const unsigned char REJECT_DUPLICATE = 0x12;$/;"	v
REJECT_INSUFFICIENTFEE	../../server/net.h	/^static const unsigned char REJECT_INSUFFICIENTFEE = 0x42;$/;"	v
REJECT_INVALID	../../server/net.h	/^static const unsigned char REJECT_INVALID = 0x10;$/;"	v
REJECT_MALFORMED	../../server/net.h	/^static const unsigned char REJECT_MALFORMED = 0x01;$/;"	v
REJECT_NONSTANDARD	../../server/net.h	/^static const unsigned char REJECT_NONSTANDARD = 0x40;$/;"	v
REJECT_OBSOLETE	../../server/net.h	/^static const unsigned char REJECT_OBSOLETE = 0x11;$/;"	v
RND	../../test/testcoin_algo.cpp	78;"	d	file:
RNDr	../../test/testcoin_algo.cpp	87;"	d	file:
ROLLING_FEE_HALFLIFE	../../server/txfeerate.cpp	58;"	d	file:
ROTL32	../../server/bloom.cpp	/^inline uint32_t ROTL32 ( uint32_t x, int8_t r )$/;"	f
ROTR	../../test/testcoin_algo.cpp	71;"	d	file:
RPC_AUTH_FREQ	../../shapi/shapi.h	41;"	d
RPC_AUTH_FREQ	../../stratum/stratum.h	41;"	d
RUN_TESTS	../../test/testcoin_coin.cpp	16;"	d	file:
RaiseValidity	../../server/block.h	/^    bool RaiseValidity(int nUpTo)$/;"	f	class:CBlockIndex
RandAddSeed	../../server/util.cpp	/^void RandAddSeed()$/;"	f
Raw	../../server/hdkey.h	/^    cbuff Raw() const$/;"	f	class:HDPrivKey
Raw	../../server/key.h	/^		std::vector<unsigned char> Raw() const $/;"	f	class:CPubKey
Read	../../server/txidx.h	/^      bool Read(const K& key, T& value)$/;"	f	class:CDB
ReadAccount	../../server/walletdb.cpp	/^bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)$/;"	f	class:CWalletDB
ReadArchTx	../../server/wallettx.cpp	/^bool CWallet::ReadArchTx(uint256 hash, CWalletTx& wtx) const$/;"	f	class:CWallet
ReadAtCursor	../../server/txidx.h	/^    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)$/;"	f	class:CDB
ReadBestBlock	../../server/walletdb.h	/^    bool ReadBestBlock(CBlockLocator& locator)$/;"	f	class:CWalletDB
ReadBestChain	../../server/global.cpp	/^uint256 ReadBestChain(CIface *iface)$/;"	f
ReadCScript	../../server/walletdb.h	/^    bool ReadCScript(const uint160 &hash, CScript& redeemScript)$/;"	f	class:CWalletDB
ReadCoins	../../server/coin.cpp	/^bool CTransaction::ReadCoins(int ifaceIndex, vector<uint256>& vOuts)$/;"	f	class:CTransaction
ReadDefaultKey	../../server/walletdb.h	/^    bool ReadDefaultKey(std::vector<unsigned char>& vchPubKey)$/;"	f	class:CWalletDB
ReadDiskTx	../../server/txidx.cpp	/^bool CTxDB::ReadDiskTx(COutPoint outpoint, CTransaction& tx)$/;"	f	class:CTxDB
ReadDiskTx	../../server/txidx.cpp	/^bool CTxDB::ReadDiskTx(uint256 hash, CTransaction& tx)$/;"	f	class:CTxDB
ReadFromDisk	../../server/block.cpp	/^bool CBlock::ReadFromDisk(const CBlockIndex* pindex, bool fReadTransactions)$/;"	f	class:CBlock
ReadFromDisk	../../server/main.cpp	/^bool CTransaction::ReadFromDisk(int ifaceIndex, COutPoint prevout)$/;"	f	class:CTransaction
ReadGlobalVar	../../server/global.cpp	/^const char *ReadGlobalVar(char *tag, char *var)$/;"	f
ReadHashBestChain	../../server/coin.cpp	/^bool ReadHashBestChain(CIface *iface, uint256& ret_hash)$/;"	f
ReadHashBestChain	../../server/txidx.cpp	/^bool CTxDB::ReadHashBestChain(uint256& hashBestChain)$/;"	f	class:CTxDB
ReadKey	../../server/walletdb.h	/^    bool ReadKey(const CPubKey& vchPubKey, CPrivKey& vchPrivKey)$/;"	f	class:CWalletDB
ReadName	../../server/walletdb.h	/^    bool ReadName(const std::string& strAddress, std::string& strName)$/;"	f	class:CWalletDB
ReadSetting	../../server/walletdb.h	/^    bool ReadSetting(const std::string& strKey, T& value)$/;"	f	class:CWalletDB
ReadStatus	../../server/block_cmpct.h	/^} ReadStatus;$/;"	t	typeref:enum:ReadStatus_t
ReadStatus_t	../../server/block_cmpct.h	/^typedef enum ReadStatus_t$/;"	g
ReadTx	../../server/block.cpp	/^bool CTransaction::ReadTx(int ifaceIndex, uint256 txHash)$/;"	f	class:CTransaction
ReadTx	../../server/block.cpp	/^bool CTransaction::ReadTx(int ifaceIndex, uint256 txHash, uint256 *hashBlock)$/;"	f	class:CTransaction
ReadTx	../../server/walletdb.h	/^    bool ReadTx(uint256 hash, CWalletTx& wtx)$/;"	f	class:CWalletDB
ReadTxIndex	../../server/txidx.cpp	/^bool CTxDB::ReadTxIndex(uint256 hash, CTxIndex& txindex)$/;"	f	class:CTxDB
ReadVersion	../../server/global.cpp	/^int ReadVersion(CIface *iface)$/;"	f
ReadVersion	../../server/txidx.h	/^    bool ReadVersion(int& nVersion)$/;"	f	class:CDB
ReceiveBufferSize	../../server/net.h	/^inline unsigned int ReceiveBufferSize() { return 1000*GetArg("-maxreceivebuffer", 5*1000); }$/;"	f
Record	../../server/txfeerate.cpp	/^void TxConfirmStats::Record(int blocksToConfirm, double val)$/;"	f	class:TxConfirmStats
RefillInputs	../../server/txmempool.cpp	/^bool CPool::RefillInputs(CPoolTx& ptx)$/;"	f	class:CPool
RelayInventory	../../server/net.h	/^inline void RelayInventory(const CInv& inv)$/;"	f
RelayMessage	../../server/net.h	/^inline void RelayMessage<>(const CInv& inv, const CDataStream& ss)$/;"	f
RelayMessage	../../server/net.h	/^void RelayMessage(const CInv& inv, const T& a)$/;"	f
RelayTransaction	../../server/wallet.cpp	/^void RelayTransaction(int ifaceIndex, const CTransaction& tx, const uint256& hash)$/;"	f
RelayValidateMatrixNotaryTx	../../server/matrix.cpp	/^bool RelayValidateMatrixNotaryTx(CIface *iface, const CTransaction& txMatrix, CTransaction *txIn)$/;"	f
Release	../../server/net.h	/^    void Release()$/;"	f	class:CNode
RemoveAlias	../../server/block.cpp	/^CAlias *CTransaction::RemoveAlias(std::string name)$/;"	f	class:CTransaction
RemoveAsset	../../server/block.cpp	/^CAsset *CTransaction::RemoveAsset(const CAsset& assetIn)$/;"	f	class:CTransaction
RemoveBloomFilter	../../server/net.h	/^    void RemoveBloomFilter()$/;"	f	class:CNode
RemoveCheckpoint	../../server/checkpoints.cpp	/^bool CCheckpoints::RemoveCheckpoint(int nHeight)$/;"	f	class:CCheckpoints
RemoveOffer	../../server/block.cpp	/^COffer *CTransaction::RemoveOffer(uint160 hashOffer)$/;"	f	class:CTransaction
RemoveSolverDropPrefix	../../server/script.cpp	/^static bool RemoveSolverDropPrefix(const CScript& script, CScript::const_iterator& pc1, opcodetype& opcode1, cbuff& vch1)$/;"	f	file:
RemoveTx	../../server/txmempool.cpp	/^bool CPool::RemoveTx(const uint256& hash)$/;"	f	class:CPool
RemoveTx	../../server/txmempool.h	/^    bool RemoveTx(CTransaction &tx)$/;"	f	class:CPool
RemoveTx	../../server/wallettx.cpp	/^void CWallet::RemoveTx(uint256 hash)$/;"	f	class:CWallet
RemoveTxWithInput	../../server/txmempool.cpp	/^void CPool::RemoveTxWithInput(const CTxIn& txin)$/;"	f	class:CPool
RenameOver	../../server/util.cpp	/^bool RenameOver(boost::filesystem::path src, boost::filesystem::path dest)$/;"	f
RenameThread	../../server/util.cpp	/^void RenameThread(const char* name)$/;"	f
Reset	../../server/key.h	/^		void Reset()$/;"	f	class:CKey
ResetAddr	../../server/account.cpp	/^void CAccountCache::ResetAddr(int type)$/;"	f	class:CAccountCache
ResetNotorizedBlock	../../server/checkpoints.cpp	/^void CCheckpoints::ResetNotorizedBlock()$/;"	f	class:CCheckpoints
ResetServiceValidateEvent	../../server/chain.cpp	/^void ResetServiceValidateEvent(CWallet *wallet)$/;"	f
ResetServiceWalletEvent	../../server/chain.cpp	/^void ResetServiceWalletEvent(CWallet *wallet)$/;"	f
ResolveConflicts	../../server/txmempool.cpp	/^bool CPool::ResolveConflicts(CPoolTx& ptx)$/;"	f	class:CPool
Retract	../../server/matrix.cpp	/^void CTxMatrix::Retract(int heightIn, uint256 hash)$/;"	f	class:CTxMatrix
Rewrite	../../server/txidx.cpp	/^bool CDB::Rewrite(const string& strFile, const char* pszSkip)$/;"	f	class:CDB
S0	../../test/testcoin_algo.cpp	72;"	d	file:
S1	../../test/testcoin_algo.cpp	73;"	d	file:
SCALE_FACTOR	../../proto/coin_proto.h	52;"	d
SCRIPT_ADDRESS	../../server/coinaddr.h	/^			SCRIPT_ADDRESS = 5,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_ADDRESS	../../test/testcoin_bip32.cpp	/^	SCRIPT_ADDRESS,$/;"	e	enum:Base58Type	file:
SCRIPT_ADDRESS	../../test/testcoin_sip33.cpp	/^	SCRIPT_ADDRESS,$/;"	e	enum:Base58Type	file:
SCRIPT_ADDRESS2	../../test/testcoin_bip32.cpp	/^	SCRIPT_ADDRESS2,$/;"	e	enum:Base58Type	file:
SCRIPT_ADDRESS2	../../test/testcoin_sip33.cpp	/^	SCRIPT_ADDRESS2,$/;"	e	enum:Base58Type	file:
SCRIPT_ADDRESS_2	../../server/coinaddr.h	/^			SCRIPT_ADDRESS_2 = 50,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_ADDRESS_2G	../../server/coinaddr.h	/^			SCRIPT_ADDRESS_2G = 55,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_ADDRESS_2S	../../server/coinaddr.h	/^			SCRIPT_ADDRESS_2S = 25,$/;"	e	enum:CCoinAddr::__anon2
SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY	../../server/script.h	/^  SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9),$/;"	e	enum:__anon6
SCRIPT_VERIFY_CHECKSEQUENCEVERIFY	../../server/script.h	/^  SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10),$/;"	e	enum:__anon6
SCRIPT_VERIFY_CLEANSTACK	../../server/script.h	/^  SCRIPT_VERIFY_CLEANSTACK = (1U << 8),$/;"	e	enum:__anon6
SCRIPT_VERIFY_DERSIG	../../server/script.h	/^  SCRIPT_VERIFY_DERSIG    = (1U << 2),$/;"	e	enum:__anon6
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS	../../server/script.h	/^  SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS  = (1U << 7),$/;"	e	enum:__anon6
SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM	../../server/script.h	/^  SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM = (1U << 12),$/;"	e	enum:__anon6
SCRIPT_VERIFY_LOW_S	../../server/script.h	/^  SCRIPT_VERIFY_LOW_S     = (1U << 3),$/;"	e	enum:__anon6
SCRIPT_VERIFY_MINIMALDATA	../../server/script.h	/^  SCRIPT_VERIFY_MINIMALDATA = (1U << 6),$/;"	e	enum:__anon6
SCRIPT_VERIFY_MINIMALIF	../../server/script.h	/^  SCRIPT_VERIFY_MINIMALIF = (1U << 13),$/;"	e	enum:__anon6
SCRIPT_VERIFY_NONE	../../server/script.h	/^  SCRIPT_VERIFY_NONE      = 0,$/;"	e	enum:__anon6
SCRIPT_VERIFY_NULLDUMMY	../../server/script.h	/^  SCRIPT_VERIFY_NULLDUMMY = (1U << 4),$/;"	e	enum:__anon6
SCRIPT_VERIFY_NULLFAIL	../../server/script.h	/^  SCRIPT_VERIFY_NULLFAIL = (1U << 14),$/;"	e	enum:__anon6
SCRIPT_VERIFY_P2SH	../../server/script.h	/^  SCRIPT_VERIFY_P2SH      = (1U << 0),$/;"	e	enum:__anon6
SCRIPT_VERIFY_SIGPUSHONLY	../../server/script.h	/^  SCRIPT_VERIFY_SIGPUSHONLY = (1U << 5),$/;"	e	enum:__anon6
SCRIPT_VERIFY_STRICTENC	../../server/script.h	/^  SCRIPT_VERIFY_STRICTENC = (1U << 1),$/;"	e	enum:__anon6
SCRIPT_VERIFY_WITNESS	../../server/script.h	/^  SCRIPT_VERIFY_WITNESS = (1U << 11),$/;"	e	enum:__anon6
SCRIPT_VERIFY_WITNESS_PUBKEYTYPE	../../server/script.h	/^  SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),$/;"	e	enum:__anon6
SECP256K1_SIGN_CONTEXT	../../server/eckey.cpp	/^secp256k1_context *SECP256K1_SIGN_CONTEXT(void)$/;"	f
SECP256K1_VERIFY_CONTEXT	../../server/eckey.cpp	/^secp256k1_context *SECP256K1_VERIFY_CONTEXT(void)$/;"	f
SECRET_KEY	../../test/testcoin_bip32.cpp	/^	SECRET_KEY,$/;"	e	enum:Base58Type	file:
SECRET_KEY	../../test/testcoin_sip33.cpp	/^	SECRET_KEY,$/;"	e	enum:Base58Type	file:
SEQUENCE_FINAL	../../server/block.h	/^		static const uint32_t SEQUENCE_FINAL = 0xffffffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_DISABLE_FLAG	../../server/block.h	/^		static const uint32_t SEQUENCE_LOCKTIME_DISABLE_FLAG = (1 << 31);$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_GRANULARITY	../../server/block.h	/^		static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_MASK	../../server/block.h	/^		static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;$/;"	m	class:CTxIn
SEQUENCE_LOCKTIME_TYPE_FLAG	../../server/block.h	/^		static const uint32_t SEQUENCE_LOCKTIME_TYPE_FLAG = (1 << 22);$/;"	m	class:CTxIn
SERIALIZE_TRANSACTION_NO_WITNESS	../../server/block.h	445;"	d
SERIALIZE_TRANSACTION_NO_WITNESS	../../server/net.h	55;"	d
SERVER__MAIN_H	../../server/main.h	37;"	d
SHA256D_WORK_CYCLE_TIME	../../stratum/stratum_sha256d.c	33;"	d	file:
SHA256Transform	../../server/main.cpp	/^void SHA256Transform(void* pstate, void* pinput, const void* pinit)$/;"	f
SHAPI_GetOutputsForAccount	../../shapi/shapi_api.cpp	/^static bool SHAPI_GetOutputsForAccount(CWallet *wallet, string strAccount, vector<CTxDestination>& addr_list)$/;"	f	file:
SHAPI_GetSendTxObj	../../shapi/shapi_api.cpp	/^static Object SHAPI_GetSendTxObj(CWallet *wallet, CWalletTx& wtx, CScript& scriptPub, tx_cache& inputs)$/;"	f	file:
SHAPI_IsOutputForAccount	../../shapi/shapi_api.cpp	/^static bool SHAPI_IsOutputForAccount(CWallet *wallet, vector<CTxDestination> addr_list, CTxDestination address)$/;"	f	file:
SHAlias	../../server/shlib.h	/^typedef shref_t SHAlias;$/;"	t
SHAsset	../../server/shlib.h	/^typedef shasset_t SHAsset;$/;"	t
SHCCoinAddr	../../server/coinaddr.h	/^    SHCCoinAddr() : CCoinAddr(SHC_COIN_IFACE)$/;"	f	class:SHCCoinAddr
SHCCoinAddr	../../server/coinaddr.h	/^    SHCCoinAddr(const CTxDestination &dest) : CCoinAddr(SHC_COIN_IFACE)$/;"	f	class:SHCCoinAddr
SHCCoinAddr	../../server/coinaddr.h	/^    SHCCoinAddr(const std::string& strAddress) : CCoinAddr(SHC_COIN_IFACE)$/;"	f	class:SHCCoinAddr
SHCCoinAddr	../../server/coinaddr.h	/^class SHCCoinAddr : public CCoinAddr$/;"	c
SHC_COIN	../../proto/shc_proto.h	64;"	d
SHC_COINBASE_MATURITY	../../proto/shc_proto.h	/^static const int SHC_COINBASE_MATURITY = 60;$/;"	v
SHC_COIN_DAEMON_PORT	../../proto/shc_proto.h	36;"	d
SHC_COIN_IFACE	../../proto/coin_proto.h	121;"	d
SHC_DEFAULT_BYTES_PER_SIGOP	../../proto/shc_proto.h	77;"	d
SHC_MAX_BLOCK_SIZE	../../proto/shc_proto.h	69;"	d
SHC_MAX_DRIFT_TIME	../../proto/shc_proto.h	54;"	d
SHC_MAX_FREE_TX_SIZE	../../proto/shc_proto.h	80;"	d
SHC_MAX_GETADDR	../../proto/shc_proto.h	39;"	d
SHC_MAX_MONEY	../../proto/shc_proto.h	/^static const int64 SHC_MAX_MONEY = 500000794 * SHC_COIN; \/* ~500mil *\/$/;"	v
SHC_MAX_ORPHAN_TRANSACTIONS	../../proto/shc_proto.h	41;"	d
SHC_MAX_SCRIPT_ELEMENT_SIZE	../../proto/shc_proto.h	51;"	d
SHC_MAX_SCRIPT_SIZE	../../proto/shc_proto.h	49;"	d
SHC_MAX_SIGOPS	../../proto/shc_proto.h	47;"	d
SHC_MAX_STANDARD_TX_SIGOP_COST	../../proto/shc_proto.h	75;"	d
SHC_MAX_STANDARD_TX_WEIGHT	../../proto/shc_proto.h	73;"	d
SHC_MAX_TRANSACTION_WEIGHT	../../proto/shc_proto.h	71;"	d
SHC_MAX_TX_FEE	../../proto/shc_proto.h	/^static const int64 SHC_MAX_TX_FEE = 1000 * SHC_COIN;$/;"	v
SHC_MIN_INPUT	../../proto/shc_proto.h	/^static const int64 SHC_MIN_INPUT = 1;$/;"	v
SHC_MIN_RELAY_TX_FEE	../../proto/shc_proto.h	/^static const int64 SHC_MIN_RELAY_TX_FEE = 1000;$/;"	v
SHC_MIN_TX_FEE	../../proto/shc_proto.h	/^static const int64 SHC_MIN_TX_FEE = 10000;$/;"	v
SHC_PROTOCOL_VERSION	../../proto/shc_proto.h	/^static const int SHC_PROTOCOL_VERSION = 2000000;$/;"	v
SHC_SEED_LIST_SIZE	../../unet/unet_seed.h	7;"	d
SHC_VERSION_BUILD	../../proto/shc_proto.h	33;"	d
SHC_VERSION_MAJOR	../../proto/shc_proto.h	30;"	d
SHC_VERSION_MINOR	../../proto/shc_proto.h	31;"	d
SHC_VERSION_REVISION	../../proto/shc_proto.h	32;"	d
SHC_WITNESS_SCALE_FACTOR	../../proto/shc_proto.h	/^static const int SHC_WITNESS_SCALE_FACTOR = SCALE_FACTOR;$/;"	v
SHCert	../../server/shlib.h	/^typedef shesig_t SHCert;$/;"	t
SHLicense	../../server/shlib.h	/^typedef shlic_t SHLicense;$/;"	t
SHORTTXIDS_LENGTH	../../server/block_cmpct.h	/^		static const int SHORTTXIDS_LENGTH = 6;$/;"	m	class:CBlockHeaderAndShortTxIDs
SHPeer	../../server/shlib.h	/^    SHPeer()$/;"	f	class:SHPeer
SHPeer	../../server/shlib.h	/^    SHPeer(shpeer_t *peerIn)$/;"	f	class:SHPeer
SHPeer	../../server/shlib.h	/^class SHPeer$/;"	c
SHSig	../../server/shlib.h	/^    SHSig()$/;"	f	class:SHSig
SHSig	../../server/shlib.h	/^    SHSig(shsig_t *sigIn)$/;"	f	class:SHSig
SHSig	../../server/shlib.h	/^class SHSig$/;"	c
SIGHASH_ALL	../../server/txsignature.h	/^    SIGHASH_ALL = 1,$/;"	e	enum:__anon7
SIGHASH_ANYONECANPAY	../../server/txsignature.h	/^    SIGHASH_ANYONECANPAY = 0x80$/;"	e	enum:__anon7
SIGHASH_HDKEY	../../server/txsignature.h	/^    SIGHASH_HDKEY = 0x40,$/;"	e	enum:__anon7
SIGHASH_NONE	../../server/txsignature.h	/^    SIGHASH_NONE = 2,$/;"	e	enum:__anon7
SIGHASH_SINGLE	../../server/txsignature.h	/^    SIGHASH_SINGLE = 3,$/;"	e	enum:__anon7
SIGN_ALG_DILITHIUM	../../server/key.h	41;"	d
SIGN_ALG_ECDSA	../../server/key.h	40;"	d
SIGN_ALG_NONE	../../server/key.h	39;"	d
SIGVERSION_BASE	../../server/txsignature.h	/^  SIGVERSION_BASE = 0,$/;"	e	enum:__anon8
SIGVERSION_WITNESS_V0	../../server/txsignature.h	/^  SIGVERSION_WITNESS_V0 = 1,$/;"	e	enum:__anon8
SIGVERSION_WITNESS_V14	../../server/txsignature.h	/^  SIGVERSION_WITNESS_V14 = 15$/;"	e	enum:__anon8
SIP33Hash	../../server/dikey.cpp	/^static void SIP33Hash(const ChainCode &chainCode, unsigned int nChild, uint16_t header, uint8_t *data, size_t data_len, unsigned char *output\/*[128]*\/)$/;"	f	file:
SIP33_EXTKEY_SIZE	../../server/dikey.cpp	35;"	d	file:
SIZEOF_COINHDR_T	../../proto/coin_proto.h	337;"	d
SPRING_MATRIX_BMP	../../stratum/stratum_http.c	522;"	d	file:
SPRING_MATRIX_HTML	../../stratum/stratum_http.c	521;"	d	file:
SPRING_OFFSET_LATITUDE	../../server/spring.h	52;"	d
SPRING_OFFSET_LONGITUDE	../../server/spring.h	57;"	d
SPRING_X_FACTOR	../../server/spring.h	61;"	d
SPRING_Y_FACTOR	../../server/spring.h	59;"	d
STANDARD_LOCKTIME_VERIFY_FLAGS	../../server/block.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	../../server/coin.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS =$/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	../../server/txmempool.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	../../server/validation.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STANDARD_LOCKTIME_VERIFY_FLAGS	../../server/wallet.cpp	/^static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = $/;"	v	file:
STAT_BLOCK_ACCEPTS	../../proto/coin_proto.h	148;"	d
STAT_BLOCK_ORPHAN	../../proto/coin_proto.h	150;"	d
STAT_BLOCK_SUBMITS	../../proto/coin_proto.h	149;"	d
STAT_TX_ACCEPTS	../../proto/coin_proto.h	151;"	d
STAT_TX_MINT	../../proto/coin_proto.h	154;"	d
STAT_TX_RETURNS	../../proto/coin_proto.h	153;"	d
STAT_TX_SUBMITS	../../proto/coin_proto.h	152;"	d
STRATUM_DAEMON_PORT	../../proto/network.h	34;"	d
STRINGIFY	../../server/version.cpp	72;"	d	file:
STRING_INC	../../test/CuTest.h	64;"	d
STRING_MAX	../../test/CuTest.h	63;"	d
SUFFICIENT_FEETXS	../../server/txfeerate.h	/^static const double SUFFICIENT_FEETXS = 1;$/;"	v
SUFFICIENT_PRITXS	../../server/txfeerate.h	/^static const double SUFFICIENT_PRITXS = .2;$/;"	v
SUITE_ADD_TEST	../../test/CuTest.h	142;"	d
SYNC_AUTH	../../shapi/shapi.h	61;"	d
SYNC_AUTH	../../stratum/stratum.h	61;"	d
SYNC_IDENT	../../shapi/shapi.h	62;"	d
SYNC_IDENT	../../stratum/stratum.h	62;"	d
SYNC_RESP_ALL	../../shapi/shapi.h	73;"	d
SYNC_RESP_ALL	../../stratum/stratum.h	73;"	d
SYNC_RESP_ELEVATE	../../shapi/shapi.h	70;"	d
SYNC_RESP_ELEVATE	../../stratum/stratum.h	70;"	d
SYNC_RESP_IDENT	../../shapi/shapi.h	71;"	d
SYNC_RESP_IDENT	../../stratum/stratum.h	71;"	d
SYNC_RESP_PING	../../shapi/shapi.h	66;"	d
SYNC_RESP_PING	../../stratum/stratum.h	66;"	d
SYNC_RESP_USER_LIST	../../shapi/shapi.h	67;"	d
SYNC_RESP_USER_LIST	../../stratum/stratum.h	67;"	d
SYNC_RESP_WALLET_ADDR	../../shapi/shapi.h	68;"	d
SYNC_RESP_WALLET_ADDR	../../stratum/stratum.h	68;"	d
SYNC_RESP_WALLET_SET	../../shapi/shapi.h	69;"	d
SYNC_RESP_WALLET_SET	../../stratum/stratum.h	69;"	d
SYNC_WALLET_ADDR	../../shapi/shapi.h	64;"	d
SYNC_WALLET_ADDR	../../stratum/stratum.h	64;"	d
SYNC_WALLET_EXTADDR	../../shapi/shapi.h	65;"	d
SYNC_WALLET_EXTADDR	../../stratum/stratum.h	65;"	d
SYNC_WALLET_SET	../../shapi/shapi.h	63;"	d
SYNC_WALLET_SET	../../stratum/stratum.h	63;"	d
SaveExternalBlockchainFile	../../server/chain.cpp	/^bool SaveExternalBlockchainFile()$/;"	f
ScanForWalletTransaction	../../server/wallet.cpp	/^int CWallet::ScanForWalletTransaction(const uint256& hashTx)$/;"	f	class:CWallet
ScanHash_CryptoPP	../../server/main.cpp	/^unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)$/;"	f	file:
ScriptMap	../../server/keystore.h	/^typedef std::map<CScriptID, CScript > ScriptMap;$/;"	t
ScriptSigArgsExpected	../../server/script.cpp	/^int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)$/;"	f
SelectAccountCoins	../../server/wallet.cpp	/^bool CWallet::SelectAccountCoins(string strAccount, int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet, uint160 hColor) const$/;"	f	class:CWallet
SelectCoins	../../server/wallet.cpp	/^bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet)$/;"	f	class:CWallet
SelectCoinsMinConf	../../server/wallet.cpp	/^bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const$/;"	f	class:CWallet
SelectCoins_Avg	../../server/wallet.cpp	/^bool SelectCoins_Avg(int64 nTargetValue, vector<COutput>& vCoins, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet)$/;"	f
Send	../../server/txcreator.cpp	/^bool CTxBatchCreator::Send()$/;"	f	class:CTxBatchCreator
Send	../../server/txcreator.cpp	/^bool CTxCreator::Send()$/;"	f	class:CTxCreator
SendBufferSize	../../server/net.h	/^inline unsigned int SendBufferSize() { return 1000*GetArg("-maxsendbuffer", 1*1000); }$/;"	f
SendRemitMoneyTx	../../server/wallet.cpp	/^bool SendRemitMoneyTx(CIface *iface, const CCoinAddr& addrFrom, CWalletTx *wtxIn, CWalletTx& wtxNew, vector<pair<CScript, int64> >& vecSend, CScript scriptPubKey)$/;"	f
SequenceLocks	../../server/block.cpp	/^bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeights, const CBlockIndex& block)$/;"	f
SerializationOp	../../server/block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactions
SerializationOp	../../server/block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:BlockTransactionsRequest
SerializationOp	../../server/block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	class:CBlockHeaderAndShortTxIDs
SerializationOp	../../server/block_cmpct.h	/^			inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:TransactionCompressor
SerializationOp	../../server/block_cmpct.h	/^		inline void SerializationOp(Stream& s, Operation ser_action) {$/;"	f	struct:PrefilledTransaction
SerializeHash	../../server/util.h	/^uint256 SerializeHash(const T& obj, int nVersion = 1)$/;"	f
ServiceBlockEvent	../../server/chain.cpp	/^bool ServiceBlockEvent(int ifaceIndex)$/;"	f
ServiceBlockEventUpdate	../../server/chain.cpp	/^void ServiceBlockEventUpdate(int ifaceIndex)$/;"	f
ServiceBlockGetDataEvent	../../server/chain.cpp	/^bool ServiceBlockGetDataEvent(CWallet *wallet, CBlockIndex* pindexBest, CNode *pfrom)$/;"	f
ServiceBlockHeadersEvent	../../server/chain.cpp	/^bool ServiceBlockHeadersEvent(CWallet *wallet, CBlockIndex *pindexBest, CNode *pfrom)$/;"	f
ServiceEventState	../../server/chain.cpp	/^void ServiceEventState(int ifaceIndex)$/;"	f
ServicePeerEvent	../../server/chain.cpp	/^bool ServicePeerEvent(int ifaceIndex)$/;"	f
ServiceValidateEvent	../../server/chain.cpp	/^static bool ServiceValidateEvent(int ifaceIndex)$/;"	f	file:
ServiceWalletEvent	../../server/chain.cpp	/^static bool ServiceWalletEvent(int ifaceIndex)$/;"	f	file:
ServiceWalletEventUpdate	../../server/chain.cpp	/^void ServiceWalletEventUpdate(CWallet *wallet, const CBlock *pblock)$/;"	f
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const CKeyID &id) $/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const CScriptID &id) $/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const CTxDestination &dest)$/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessUnknown& id)$/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV0KeyHash& id)$/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV0ScriptHash& id)$/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV14KeyHash& id)$/;"	f	class:CCoinAddr
Set	../../server/coinaddr.cpp	/^bool CCoinAddr::Set(const WitnessV14ScriptHash& id)$/;"	f	class:CCoinAddr
SetAccount	../../server/txcreator.cpp	/^void CTxCreator::SetAccount(string strAccountIn)$/;"	f	class:CTxCreator
SetAddr	../../server/account.cpp	/^void CAccountCache::SetAddr(int type, CCoinAddr addr)$/;"	f	class:CAccountCache
SetAddrDestinations	../../server/account.cpp	/^void CAccountCache::SetAddrDestinations(const CKeyID& keyid)$/;"	f	class:CAccountCache
SetAddressBookName	../../server/wallet.cpp	/^bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)$/;"	f	class:CWallet
SetBestBlockIndex	../../server/block.cpp	/^void SetBestBlockIndex(CIface *iface, CBlockIndex *pindex)$/;"	f
SetBestBlockIndex	../../server/block.cpp	/^void SetBestBlockIndex(int ifaceIndex, CBlockIndex *pindex)$/;"	f
SetBestChain	../../server/wallet.cpp	/^void CWallet::SetBestChain(const CBlockLocator& loc)$/;"	f	class:CWallet
SetBloomFilter	../../server/net.h	/^    void SetBloomFilter(CBloomFilter& filterIn)$/;"	f	class:CNode
SetCell	../../server/matrix.h	/^		void SetCell(int row, int col, unsigned int val)$/;"	f	class:CTxMatrix
SetCellsNull	../../server/matrix.h	/^		void SetCellsNull()$/;"	f	class:CTxMatrix
SetCertHash	../../server/account.cpp	/^bool CAccountCache::SetCertHash(const uint160& hCert)$/;"	f	class:CAccountCache
SetChain	../../server/hdkey.cpp	/^bool HDPrivKey::SetChain(cbuff vchChainIn)$/;"	f	class:HDPrivKey
SetChain	../../server/hdkey.cpp	/^bool HDPrivKey::SetChain(string hexChain)$/;"	f	class:HDPrivKey
SetChangeAddr	../../server/txcreator.cpp	/^bool CTxCreator::SetChangeAddr(const CPubKey& scriptPubKey)$/;"	f	class:CTxCreator
SetColor	../../server/txmempool.h	/^		void SetColor(const uint160& hColorIn)$/;"	f	class:CPoolTx
SetColor	../../server/wallet.h	/^			 void SetColor(uint160 hColorIn)$/;"	f	class:CWalletTx
SetCompactSignature	../../server/dikey.cpp	/^bool DIKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
SetCompactSignature	../../server/eckey.cpp	/^bool ECKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
SetCompactSignature	../../server/hdkey.cpp	/^bool HDPrivKey::SetCompactSignature(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
SetCompressedPubKey	../../server/key.h	/^    void SetCompressedPubKey()$/;"	f	class:CKey
SetData	../../server/base58.h	/^		void SetData(const cbuff& vchVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	../../server/base58.h	/^		void SetData(const cbuff& vchVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetData	../../server/base58.h	/^		void SetData(int nVersionIn, const unsigned char *pbegin, const unsigned char *pend)$/;"	f	class:CBase58Data
SetData	../../server/base58.h	/^		void SetData(int nVersionIn, const void* pdata, size_t nSize)$/;"	f	class:CBase58Data
SetDefaultAddr	../../server/account.cpp	/^void CAccountCache::SetDefaultAddr(const CPubKey& pubkey)$/;"	f	class:CAccountCache
SetDefaultKey	../../server/wallet.cpp	/^bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)$/;"	f	class:CWallet
SetDestination	../../server/script.cpp	/^void CScript::SetDestination(const CTxDestination& dest)$/;"	f	class:CScript
SetDetach	../../server/txidx.h	/^    void SetDetach(bool fDetachDB_) { fDetachDB = fDetachDB_; }$/;"	f	class:CDBEnv
SetFlag	../../server/block.h	/^		void SetFlag(unsigned int flag)$/;"	f	class:CTransactionCore
SetFlag	../../server/txmempool.h	/^    void SetFlag(int flag)$/;"	f	class:CPoolTx
SetKey	../../server/crypter.cpp	/^bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)$/;"	f	class:CCrypter
SetKey	../../test/testcoin_bip32.cpp	/^		void SetKey(const K &key) {$/;"	f	class:CBitcoinExtKeyBase
SetKeyFromPassphrase	../../server/crypter.cpp	/^bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)$/;"	f	class:CCrypter
SetLimits	../../server/txcreator.cpp	/^void CTxBatchCreator::SetLimits()$/;"	f	class:CTxBatchCreator
SetLockHeight	../../server/txcreator.cpp	/^bool CTxCreator::SetLockHeight(uint32_t nHeight)$/;"	f	class:CTxCreator
SetLockHeightSpan	../../server/txcreator.cpp	/^bool CTxCreator::SetLockHeightSpan(int nIn, uint32_t nHeight)$/;"	f	class:CTxCreator
SetLockTime	../../server/txcreator.cpp	/^bool CTxCreator::SetLockTime(time_t t)$/;"	f	class:CTxCreator
SetLockTimeSpan	../../server/txcreator.cpp	/^bool CTxCreator::SetLockTimeSpan(int nIn, time_t t)$/;"	f	class:CTxCreator
SetMaster	../../server/dikey.cpp	/^void DIExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) $/;"	f	class:DIExtKey
SetMaster	../../server/eckey.cpp	/^void ECExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) $/;"	f	class:ECExtKey
SetMerkleBranch	../../server/wallet.cpp	/^int CMerkleTx::SetMerkleBranch(const CBlock* pblock)$/;"	f	class:CMerkleTx
SetMerkleBranch	../../server/wallet.cpp	/^int CMerkleTx::SetMerkleBranch(int ifaceIndex)$/;"	f	class:CMerkleTx
SetMinFee	../../server/txcreator.cpp	/^void CTxCreator::SetMinFee(int64 nMinFeeIn)$/;"	f	class:CTxCreator
SetMinFee	../../server/txcreator.h	/^		void SetMinFee(int64 nFee)$/;"	f	class:CTxBatchCreator
SetMockTime	../../server/util.cpp	/^void SetMockTime(int64 nMockTimeIn)$/;"	f
SetMultisig	../../server/script.cpp	/^void CScript::SetMultisig(int nRequired, const std::vector<ECKey>& keys)$/;"	f	class:CScript
SetNoDestination	../../server/script.cpp	/^void CScript::SetNoDestination()$/;"	f	class:CScript
SetNull	../../server/account.h	/^			void SetNull() $/;"	f	class:CAccountCache
SetNull	../../server/block.h	/^			void SetNull()$/;"	f	class:CTxOut
SetNull	../../server/block.h	/^		void SetNull()$/;"	f	class:CBlockLocator
SetNull	../../server/block.h	/^    void SetNull() { hash = 0; n = (unsigned int) -1; }$/;"	f	class:COutPoint
SetNull	../../server/block.h	/^    void SetNull() { nFile = (unsigned int) -1; nBlockPos = 0; nTxPos = 0; }$/;"	f	class:CDiskTxPos
SetNull	../../server/block.h	/^    void SetNull() { ptx = NULL; n = (unsigned int) -1; }$/;"	f	class:CInPoint
SetNull	../../server/block.h	/^    void SetNull()$/;"	f	class:CBlock
SetNull	../../server/block.h	/^    void SetNull()$/;"	f	class:CBlockHeader
SetNull	../../server/block.h	/^    void SetNull()$/;"	f	class:CTransaction
SetNull	../../server/block.h	/^    void SetNull()$/;"	f	class:CTransactionCore
SetNull	../../server/block.h	/^    void SetNull()$/;"	f	class:CTxIndex
SetNull	../../server/block.h	/^    void SetNull()$/;"	f	class:CTxWitness
SetNull	../../server/coinaddr.h	/^		void SetNull()$/;"	f	class:CCoinAddr
SetNull	../../server/hdkey.h	/^    void SetNull()$/;"	f	class:HDMasterPrivKey
SetNull	../../server/hdkey.h	/^    void SetNull()$/;"	f	class:HDPrivKey
SetNull	../../server/hdkey.h	/^    void SetNull()$/;"	f	class:HDPubKey
SetNull	../../server/key.h	/^		void SetNull()$/;"	f	class:CKeyMetadata
SetNull	../../server/key.h	/^		void SetNull()$/;"	f	class:CPubKey
SetNull	../../server/key.h	/^    void SetNull()$/;"	f	class:CKey
SetNull	../../server/matrix.h	/^		void SetNull()$/;"	f	class:CTxMatrix
SetNull	../../server/shlib.h	/^    void SetNull()$/;"	f	class:SHPeer
SetNull	../../server/shlib.h	/^    void SetNull()$/;"	f	class:SHSig
SetNull	../../server/txcreator.h	/^    void SetNull()$/;"	f	class:CTxBatchCreator
SetNull	../../server/txmempool.h	/^    void SetNull()$/;"	f	class:CPoolTx
SetNull	../../server/wallet.h	/^		void SetNull()$/;"	f	class:CAccount
SetNull	../../server/wallet.h	/^		void SetNull()$/;"	f	class:CAccountingEntry
SetPrivKey	../../server/dikey.cpp	/^bool DIKey::SetPrivKey(const CPrivKey& vchPrivKey, bool fCompressed)$/;"	f	class:DIKey
SetPrivKey	../../server/eckey.cpp	/^bool ECKey::SetPrivKey(const CPrivKey& vchPrivKey, bool fCompressed)$/;"	f	class:ECKey
SetPubKey	../../server/dikey.cpp	/^bool DIKey::SetPubKey(const CPubKey& vchPubKey)$/;"	f	class:DIKey
SetPubKey	../../server/eckey.cpp	/^bool ECKey::SetPubKey(const CPubKey& vchPubKey)$/;"	f	class:ECKey
SetScript	../../server/coinaddr.cpp	/^bool CCoinAddr::SetScript(const CScript& script)$/;"	f	class:CCoinAddr
SetSecret	../../server/base58.h	/^		void SetSecret(int ifaceIndex, const CSecret& vchSecret, bool fCompressed)$/;"	f	class:CCoinSecret
SetSecret	../../server/dikey.cpp	/^bool DIKey::SetSecret(const CSecret& vchSecret)$/;"	f	class:DIKey
SetSecret	../../server/dikey.h	/^    bool SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:DIKey
SetSecret	../../server/eckey.cpp	/^bool ECKey::SetSecret(const CSecret& vchSecret, bool fCompressed)$/;"	f	class:ECKey
SetSeed	../../server/hdkey.cpp	/^bool HDPrivKey::SetSeed(cbuff seed)$/;"	f	class:HDPrivKey
SetSeed	../../server/hdkey.h	/^    bool SetSeed(CSecret seed)$/;"	f	class:HDPrivKey
SetString	../../server/base58.cpp	/^bool CBase58Data::SetString(const char *psz, size_t nVersionSize)$/;"	f	class:CBase58Data
SetString	../../server/base58.cpp	/^bool CCoinSecret::SetString(const char* pszSecret)$/;"	f	class:CCoinSecret
SetString	../../server/base58.cpp	/^bool CCoinSecret::SetString(const std::string& strSecret)$/;"	f	class:CCoinSecret
SetString	../../server/base58.h	/^		bool SetString(const std::string& str, size_t nVersionSize = 1)$/;"	f	class:CBase58Data
SetString	../../server/coinaddr.cpp	/^bool CCoinAddr::SetString(const std::string& str)$/;"	f	class:CCoinAddr
SetType	../../server/matrix.h	/^		void SetType(int nTypeIn)$/;"	f	class:CTxMatrix
SetVersion	../../server/block.h	/^		void SetVersion(int ver)$/;"	f	class:CTransactionCore
SetWallet	../../server/wallet.cpp	/^void SetWallet(CIface *iface, CWallet *wallet)$/;"	f
SetWallet	../../server/wallet.cpp	/^void SetWallet(int iface_idx, CWallet *wallet)$/;"	f
Sign	../../server/dikey.cpp	/^bool DIKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
Sign	../../server/eckey.cpp	/^bool ECKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
Sign	../../server/hdkey.cpp	/^bool HDPrivKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
Sign1	../../server/script.cpp	/^bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
Sign1	../../server/txsignature.cpp	/^static bool Sign1(CSignature *sig, const CKeyID& address, const CScript& scriptCode, cstack_t& ret, int sigversion)$/;"	f	file:
SignAddress	../../server/txsignature.cpp	/^bool CSignature::SignAddress(const CScript& scriptPubKey, cstack_t& ret, txnouttype& whichTypeRet, int sigversion)$/;"	f	class:CSignature
SignCompact	../../server/dikey.cpp	/^bool DIKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
SignCompact	../../server/eckey.cpp	/^bool ECKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
SignCompact	../../server/hdkey.cpp	/^bool HDPrivKey::SignCompact(uint256 hash, std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
SignN	../../server/script.cpp	/^bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)$/;"	f
SignN	../../server/txsignature.cpp	/^static bool SignN(CSignature *sig, const vector<valtype>& multisigdata, const CScript& scriptCode, std::vector<valtype>& ret, int sigversion)$/;"	f	file:
SignSignature	../../server/txsignature.cpp	/^bool CSignature::SignSignature(const CScript& fromPubKey)$/;"	f	class:CSignature
SignSignature	../../server/txsignature.cpp	/^bool CSignature::SignSignature(const CTransaction& txFrom)$/;"	f	class:CSignature
SignatureHash	../../server/txsignature.cpp	/^bool CSignature::SignatureHash(CScript scriptCode, int sigver, uint256& hashRet)$/;"	f	class:CSignature
SoftSetArg	../../server/util.cpp	/^bool SoftSetArg(const std::string& strArg, const std::string& strValue)$/;"	f
SoftSetBoolArg	../../server/util.cpp	/^bool SoftSetBoolArg(const std::string& strArg, bool fValue)$/;"	f
Solver	../../server/script.cpp	/^bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f
SolverCheckAltProof	../../server/script.cpp	/^static bool SolverCheckAltProof(CScript& script, vector<vector<unsigned char> >& vSolutionsRet)$/;"	f	file:
StackString	../../server/script.h	/^inline std::string StackString(const std::vector<std::vector<unsigned char> >& vStack)$/;"	f
SubCell	../../server/matrix.h	/^		void SubCell(int row, int col, unsigned int val)$/;"	f	class:CTxMatrix
SyncWithWallets	../../server/wallet.cpp	/^bool SyncWithWallets(CIface *iface, CTransaction& tx, CBlock *pblock)$/;"	f
TASKF_RESET	../../shapi/shapi.h	47;"	d
TASKF_RESET	../../stratum/stratum.h	47;"	d
TERM_SECP256K1	../../server/eckey.cpp	/^void TERM_SECP256K1(void)$/;"	f
TESTNET_COIN	../../proto/testnet_proto.h	64;"	d
TESTNET_COINBASE_MATURITY	../../proto/testnet_proto.h	/^static const int TESTNET_COINBASE_MATURITY = 32;$/;"	v
TESTNET_COIN_DAEMON_PORT	../../proto/testnet_proto.h	36;"	d
TESTNET_COIN_IFACE	../../proto/coin_proto.h	130;"	d
TESTNET_DEFAULT_BYTES_PER_SIGOP	../../proto/testnet_proto.h	77;"	d
TESTNET_MAX_BLOCK_SIZE	../../proto/testnet_proto.h	69;"	d
TESTNET_MAX_DRIFT_TIME	../../proto/testnet_proto.h	54;"	d
TESTNET_MAX_FREE_TX_SIZE	../../proto/testnet_proto.h	80;"	d
TESTNET_MAX_GETADDR	../../proto/testnet_proto.h	39;"	d
TESTNET_MAX_MONEY	../../proto/testnet_proto.h	/^static const int64 TESTNET_MAX_MONEY = 1000000000 * TESTNET_COIN; \/* 1bil max *\/$/;"	v
TESTNET_MAX_ORPHAN_TRANSACTIONS	../../proto/testnet_proto.h	41;"	d
TESTNET_MAX_SCRIPT_ELEMENT_SIZE	../../proto/testnet_proto.h	51;"	d
TESTNET_MAX_SCRIPT_SIZE	../../proto/testnet_proto.h	49;"	d
TESTNET_MAX_SIGOPS	../../proto/testnet_proto.h	47;"	d
TESTNET_MAX_STANDARD_TX_SIGOP_COST	../../proto/testnet_proto.h	75;"	d
TESTNET_MAX_STANDARD_TX_WEIGHT	../../proto/testnet_proto.h	73;"	d
TESTNET_MAX_TRANSACTION_WEIGHT	../../proto/testnet_proto.h	71;"	d
TESTNET_MAX_TX_FEE	../../proto/testnet_proto.h	/^static const int64 TESTNET_MAX_TX_FEE = 1000 * TESTNET_COIN;$/;"	v
TESTNET_MIN_INPUT	../../proto/testnet_proto.h	/^static const int64 TESTNET_MIN_INPUT = 1;$/;"	v
TESTNET_MIN_RELAY_TX_FEE	../../proto/testnet_proto.h	/^static const int64 TESTNET_MIN_RELAY_TX_FEE = 1000;$/;"	v
TESTNET_MIN_TX_FEE	../../proto/testnet_proto.h	/^static const int64 TESTNET_MIN_TX_FEE = 10000;$/;"	v
TESTNET_PROTOCOL_VERSION	../../proto/testnet_proto.h	/^static const int TESTNET_PROTOCOL_VERSION = 2000000;$/;"	v
TESTNET_SEED_LIST_SIZE	../../unet/unet_seed.h	13;"	d
TESTNET_VERSION_BUILD	../../proto/testnet_proto.h	33;"	d
TESTNET_VERSION_MAJOR	../../proto/testnet_proto.h	30;"	d
TESTNET_VERSION_MINOR	../../proto/testnet_proto.h	31;"	d
TESTNET_VERSION_REVISION	../../proto/testnet_proto.h	32;"	d
TESTNET_WITNESS_SCALE_FACTOR	../../proto/testnet_proto.h	/^static const int TESTNET_WITNESS_SCALE_FACTOR = SCALE_FACTOR;$/;"	v
TEST_COIN	../../proto/test_proto.h	51;"	d
TEST_COINBASE_MATURITY	../../proto/test_proto.h	/^static const int TEST_COINBASE_MATURITY = 10;$/;"	v
TEST_COIN_DAEMON_PORT	../../proto/test_proto.h	34;"	d
TEST_COIN_IFACE	../../proto/coin_proto.h	118;"	d
TEST_DEFAULT_BYTES_PER_SIGOP	../../proto/test_proto.h	61;"	d
TEST_MAX_BLOCK_SIZE	../../proto/test_proto.h	53;"	d
TEST_MAX_DRIFT_TIME	../../proto/test_proto.h	47;"	d
TEST_MAX_FREE_TX_SIZE	../../proto/test_proto.h	64;"	d
TEST_MAX_GETADDR	../../proto/test_proto.h	36;"	d
TEST_MAX_MONEY	../../proto/test_proto.h	/^static const int64 TEST_MAX_MONEY = 1600000000 * TEST_COIN;$/;"	v
TEST_MAX_ORPHAN_TRANSACTIONS	../../proto/test_proto.h	38;"	d
TEST_MAX_SCRIPT_ELEMENT_SIZE	../../proto/test_proto.h	44;"	d
TEST_MAX_SCRIPT_SIZE	../../proto/test_proto.h	42;"	d
TEST_MAX_SIGOPS	../../proto/test_proto.h	40;"	d
TEST_MAX_STANDARD_TX_SIGOP_COST	../../proto/test_proto.h	59;"	d
TEST_MAX_STANDARD_TX_WEIGHT	../../proto/test_proto.h	57;"	d
TEST_MAX_TRANSACTION_WEIGHT	../../proto/test_proto.h	55;"	d
TEST_MAX_TX_FEE	../../proto/test_proto.h	/^static const int64 TEST_MAX_TX_FEE = 1000 * SHC_COIN;$/;"	v
TEST_MIN_INPUT	../../proto/test_proto.h	/^static const int64 TEST_MIN_INPUT = 1;$/;"	v
TEST_MIN_RELAY_TX_FEE	../../proto/test_proto.h	/^static const int64 TEST_MIN_RELAY_TX_FEE = 1000;$/;"	v
TEST_MIN_TX_FEE	../../proto/test_proto.h	/^static const int64 TEST_MIN_TX_FEE = 10000;$/;"	v
TEST_PROTOCOL_VERSION	../../proto/test_proto.h	/^static const int TEST_PROTOCOL_VERSION = 1000000;$/;"	v
TEST_VERSION_BUILD	../../proto/test_proto.h	32;"	d
TEST_VERSION_MAJOR	../../proto/test_proto.h	29;"	d
TEST_VERSION_MINOR	../../proto/test_proto.h	30;"	d
TEST_VERSION_REVISION	../../proto/test_proto.h	31;"	d
TEST_WITNESS_SCALE_FACTOR	../../proto/test_proto.h	/^static const int TEST_WITNESS_SCALE_FACTOR = SCALE_FACTOR;$/;"	v
TEST_sexe_compile	../../test/testcoin_block.cpp	/^static int TEST_sexe_compile(char *path_out, char *path_fname, char *path_dir, int *exec_size)$/;"	f	file:
THIRTY_SECONDS	../../stratum/stratum_sync.c	29;"	d	file:
THREAD_ADDEDCONNECTIONS	../../server/net.h	/^    THREAD_ADDEDCONNECTIONS,$/;"	e	enum:threadId
THREAD_DNSSEED	../../server/net.h	/^    THREAD_DNSSEED,$/;"	e	enum:threadId
THREAD_DUMPADDRESS	../../server/net.h	/^    THREAD_DUMPADDRESS,$/;"	e	enum:threadId
THREAD_MAX	../../server/net.h	/^    THREAD_MAX$/;"	e	enum:threadId
THREAD_MESSAGEHANDLER	../../server/net.h	/^    THREAD_MESSAGEHANDLER,$/;"	e	enum:threadId
THREAD_MINER	../../server/net.h	/^    THREAD_MINER,$/;"	e	enum:threadId
THREAD_OPENCONNECTIONS	../../server/net.h	/^    THREAD_OPENCONNECTIONS,$/;"	e	enum:threadId
THREAD_RPCHANDLER	../../server/net.h	/^    THREAD_RPCHANDLER,$/;"	e	enum:threadId
THREAD_RPCLISTENER	../../server/net.h	/^    THREAD_RPCLISTENER,$/;"	e	enum:threadId
THREAD_SOCKETHANDLER	../../server/net.h	/^    THREAD_SOCKETHANDLER,$/;"	e	enum:threadId
THREAD_UPNP	../../server/net.h	/^    THREAD_UPNP,$/;"	e	enum:threadId
THRESHOLD_ACTIVE	../../server/versionbits.h	/^    THRESHOLD_ACTIVE,$/;"	e	enum:ThresholdState
THRESHOLD_DEFINED	../../server/versionbits.h	/^    THRESHOLD_DEFINED,$/;"	e	enum:ThresholdState
THRESHOLD_FAILED	../../server/versionbits.h	/^    THRESHOLD_FAILED,$/;"	e	enum:ThresholdState
THRESHOLD_LOCKED_IN	../../server/versionbits.h	/^    THRESHOLD_LOCKED_IN,$/;"	e	enum:ThresholdState
THRESHOLD_STARTED	../../server/versionbits.h	/^    THRESHOLD_STARTED,$/;"	e	enum:ThresholdState
TXF_ALIAS	../../server/block.h	/^    static const int TXF_ALIAS = (1 << 6);$/;"	m	class:CTransactionCore
TXF_ALTCHAIN	../../server/block.h	/^    static const int TXF_ALTCHAIN = (1 << 15);$/;"	m	class:CTransactionCore
TXF_ASSET	../../server/block.h	/^    static const int TXF_ASSET = (1 << 9);$/;"	m	class:CTransactionCore
TXF_CERTIFICATE	../../server/block.h	/^    static const int TXF_CERTIFICATE = (1 << 4);$/;"	m	class:CTransactionCore
TXF_CONTEXT	../../server/block.h	/^    static const int TXF_CONTEXT = (1 << 14);$/;"	m	class:CTransactionCore
TXF_EXEC	../../server/block.h	/^    static const int TXF_EXEC = (1 << 13);$/;"	m	class:CTransactionCore
TXF_IDENT	../../server/block.h	/^    static const int TXF_IDENT = (1 << 10);$/;"	m	class:CTransactionCore
TXF_LICENSE	../../server/block.h	/^    static const int TXF_LICENSE = (1 << 5);$/;"	m	class:CTransactionCore
TXF_MATRIX	../../server/block.h	/^    static const int TXF_MATRIX = (1 << 11);$/;"	m	class:CTransactionCore
TXF_OFFER	../../server/block.h	/^    static const int TXF_OFFER = (1 << 7);$/;"	m	class:CTransactionCore
TXF_PARAM	../../server/block.h	/^    static const int TXF_PARAM = (1 << 8);$/;"	m	class:CTransactionCore
TXF_RESERVED_0	../../server/block.h	/^    static const int TXF_RESERVED_0 = (1 << 2);$/;"	m	class:CTransactionCore
TXF_RESERVED_1	../../server/block.h	/^    static const int TXF_RESERVED_1 = (1 << 3);$/;"	m	class:CTransactionCore
TXF_VERSION	../../server/block.h	/^    static const int TXF_VERSION = (1 << 0);$/;"	m	class:CTransactionCore
TXF_VERSION_2	../../server/block.h	/^    static const int TXF_VERSION_2 = (1 << 1);$/;"	m	class:CTransactionCore
TX_MULTISIG	../../server/script.h	/^    TX_MULTISIG,$/;"	e	enum:txnouttype
TX_NONSTANDARD	../../server/script.h	/^    TX_NONSTANDARD,$/;"	e	enum:txnouttype
TX_PUBKEY	../../server/script.h	/^    TX_PUBKEY,$/;"	e	enum:txnouttype
TX_PUBKEYHASH	../../server/script.h	/^    TX_PUBKEYHASH,$/;"	e	enum:txnouttype
TX_RETURN	../../server/script.h	/^    TX_RETURN,$/;"	e	enum:txnouttype
TX_SCRIPTHASH	../../server/script.h	/^    TX_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_VERSION	../../server/block.h	442;"	d
TX_VERSION_2	../../server/block.h	443;"	d
TX_WITNESS_UNKNOWN	../../server/script.h	/^    TX_WITNESS_UNKNOWN,$/;"	e	enum:txnouttype
TX_WITNESS_V0_KEYHASH	../../server/script.h	/^    TX_WITNESS_V0_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V0_SCRIPTHASH	../../server/script.h	/^    TX_WITNESS_V0_SCRIPTHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V14_KEYHASH	../../server/script.h	/^    TX_WITNESS_V14_KEYHASH,$/;"	e	enum:txnouttype
TX_WITNESS_V14_SCRIPTHASH	../../server/script.h	/^    TX_WITNESS_V14_SCRIPTHASH,$/;"	e	enum:txnouttype
TestAddr	../../test/testcoin_coin.cpp	/^    TestAddr(int nVersionIn, unsigned char *raw) : CCoinAddr(0)$/;"	f	class:TestAddr
TestAddr	../../test/testcoin_coin.cpp	/^class TestAddr : public CCoinAddr$/;"	c	file:
TestDerivation	../../test/testcoin_bip32.cpp	/^struct TestDerivation {$/;"	s	file:
TestFunction	../../test/CuTest.h	/^typedef void (*TestFunction)(CuTest *);$/;"	t
TestVector	../../test/testcoin_bip32.cpp	/^    explicit TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}$/;"	f	struct:TestVector
TestVector	../../test/testcoin_bip32.cpp	/^struct TestVector {$/;"	s	file:
Threshold	../../server/versionbits.cpp	/^      int Threshold(CIface * params) const { return params->nRuleChangeActivationThreshold; }$/;"	f	class:__anon9::VersionBitsConditionChecker
ThresholdConditionCache	../../server/versionbits.h	/^typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;$/;"	t
ThresholdState	../../server/versionbits.h	/^enum ThresholdState {$/;"	g
ToByteVector	../../server/coinaddr.cpp	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToByteVector	../../server/script.cpp	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToByteVector	../../server/txsignature.cpp	/^std::vector<unsigned char> ToByteVector(const T& in)$/;"	f
ToString	../../server/base58.cpp	/^std::string CBase58Data::ToString(int output_type) const$/;"	f	class:CBase58Data
ToString	../../server/block.cpp	/^std::string CBlock::ToString(bool fVerbose)$/;"	f	class:CBlock
ToString	../../server/block.cpp	/^std::string CBlockHeader::ToString()$/;"	f	class:CBlockHeader
ToString	../../server/block.cpp	/^std::string CTransaction::ToString(int ifaceIndex)$/;"	f	class:CTransaction
ToString	../../server/block.cpp	/^std::string CTransactionCore::ToString(int ifaceIndex)$/;"	f	class:CTransactionCore
ToString	../../server/block.cpp	/^std::string CTxOut::ToString(int ifaceIndex)$/;"	f	class:CTxOut
ToString	../../server/block.h	/^    std::string ToString() const$/;"	f	class:CBlockIndex
ToString	../../server/block.h	/^    std::string ToString() const$/;"	f	class:CDiskBlockIndex
ToString	../../server/block.h	/^    std::string ToString() const$/;"	f	class:CDiskTxPos
ToString	../../server/block.h	/^    std::string ToString() const$/;"	f	class:COutPoint
ToString	../../server/block.h	/^    std::string ToString() const$/;"	f	class:CTxIn
ToString	../../server/bloom.cpp	/^std::string CBloomFilter::ToString()$/;"	f	class:CBloomFilter
ToString	../../server/coinaddr.cpp	/^std::string CCoinAddr::ToString() const$/;"	f	class:CCoinAddr
ToString	../../server/hdkey.cpp	/^std::string HDPrivKey::ToString()$/;"	f	class:HDPrivKey
ToString	../../server/hdkey.cpp	/^std::string HDPubKey::ToString()$/;"	f	class:HDPubKey
ToString	../../server/matrix.cpp	/^std::string CTxMatrix::ToString()$/;"	f	class:CTxMatrix
ToString	../../server/protocol.cpp	/^std::string CInv::ToString() const$/;"	f	class:CInv
ToString	../../server/script.h	/^    std::string ToString() const$/;"	f	class:CScript
ToString	../../server/txfeerate.cpp	/^std::string CFeeRate::ToString() const$/;"	f	class:CFeeRate
ToString	../../server/wallet.h	/^		std::string ToString() const$/;"	f	class:COutput
ToValue	../../server/block.cpp	/^Object CBlock::ToValue(bool fVerbose)$/;"	f	class:CBlock
ToValue	../../server/block.cpp	/^Object CBlockHeader::ToValue()$/;"	f	class:CBlockHeader
ToValue	../../server/block.cpp	/^Object CTransaction::ToValue(CBlock *pblock)$/;"	f	class:CTransaction
ToValue	../../server/block.cpp	/^Object CTransaction::ToValue(int ifaceIndex)$/;"	f	class:CTransaction
ToValue	../../server/block.cpp	/^Object CTransactionCore::ToValue(int ifaceIndex)$/;"	f	class:CTransactionCore
ToValue	../../server/block.cpp	/^Object CTxOut::ToValue(int ifaceIndex)$/;"	f	class:CTxOut
ToValue	../../server/hdkey.cpp	/^Object HDPrivKey::ToValue()$/;"	f	class:HDPrivKey
ToValue	../../server/hdkey.cpp	/^Object HDPubKey::ToValue()$/;"	f	class:HDPubKey
ToValue	../../server/matrix.cpp	/^Object CTxMatrix::ToValue()$/;"	f	class:CTxMatrix
ToValue_date_format	../../server/block.cpp	/^string ToValue_date_format(time_t t)$/;"	f
TransactionCompressor	../../server/block_cmpct.h	/^		explicit TransactionCompressor(CTransactionRef& txIn) : tx(txIn) {}$/;"	f	struct:TransactionCompressor
TransactionCompressor	../../server/block_cmpct.h	/^struct TransactionCompressor $/;"	s
TransferExec	../../server/block.cpp	/^CExec *CTransaction::TransferExec(const CExec& execIn)$/;"	f	class:CTransaction
TraverseAndBuild	../../server/bloom.cpp	/^void CPartialMerkleTree::TraverseAndBuild(int height, unsigned int pos, const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch) $/;"	f	class:CPartialMerkleTree
TraverseAndExtract	../../server/bloom.cpp	/^uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, unsigned int &nBitsUsed, unsigned int &nHashUsed, std::vector<uint256> &vMatch) {$/;"	f	class:CPartialMerkleTree
TxConfirmStats	../../server/txfeerate.h	/^class TxConfirmStats$/;"	c
TxStatsInfo	../../server/txfeerate.h	/^        TxStatsInfo() : stats(NULL), blockHeight(0), bucketIndex(0) {}$/;"	f	struct:CBlockPolicyEstimator::TxStatsInfo
TxStatsInfo	../../server/txfeerate.h	/^    struct TxStatsInfo$/;"	s	class:CBlockPolicyEstimator
TxnAbort	../../server/txidx.h	/^    bool TxnAbort()$/;"	f	class:CDB
TxnBegin	../../server/txidx.h	/^    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)$/;"	f	class:CDBEnv
TxnBegin	../../server/txidx.h	/^    bool TxnBegin()$/;"	f	class:CDB
TxnCommit	../../server/txidx.h	/^    bool TxnCommit()$/;"	f	class:CDB
UEVENT_NONE	../../unet/unet.h	95;"	d
UEVENT_PEER_CONN	../../unet/unet.h	97;"	d
UEVENT_PEER_VERIFY	../../unet/unet.h	96;"	d
UNDEFINED_SOCKET	../../unet/unet.h	80;"	d
UNDEFINED_TIME	../../unet/unet.h	81;"	d
UNETF_ESL	../../unet/unet.h	78;"	d
UNETF_INBOUND	../../unet/unet.h	75;"	d
UNETF_LISTEN	../../unet/unet.h	76;"	d
UNETF_PEER_SCAN	../../unet/unet.h	74;"	d
UNETF_SHUTDOWN	../../unet/unet.h	73;"	d
UNETF_SYNC	../../unet/unet.h	77;"	d
UNET_COLOR	../../unet/unet.h	40;"	d
UNET_CONNECT_TIMEOUT	../../unet/unet_connect.c	28;"	d	file:
UNET_EMC2	../../unet/unet.h	37;"	d
UNET_LTC	../../unet/unet.h	38;"	d
UNET_MAX_EVENTS	../../unet/unet.h	93;"	d
UNET_NONE	../../unet/unet.h	34;"	d
UNET_RESERVED_1	../../unet/unet.h	45;"	d
UNET_RESERVED_2	../../unet/unet.h	44;"	d
UNET_RESERVED_3	../../unet/unet.h	43;"	d
UNET_RESERVED_4	../../unet/unet.h	42;"	d
UNET_RESERVED_5	../../unet/unet.h	49;"	d
UNET_RESERVED_6	../../unet/unet.h	50;"	d
UNET_RESERVED_7	../../unet/unet.h	36;"	d
UNET_RPC	../../unet/unet.h	59;"	d
UNET_SHAPI	../../unet/unet.h	56;"	d
UNET_SHC	../../unet/unet.h	35;"	d
UNET_STRATUM	../../unet/unet.h	53;"	d
UNET_STRATUM_BLAKE2S	../../unet/unet.h	65;"	d
UNET_STRATUM_GROESTL	../../unet/unet.h	67;"	d
UNET_STRATUM_KECCAK	../../unet/unet.h	63;"	d
UNET_STRATUM_QUBIT	../../unet/unet.h	66;"	d
UNET_STRATUM_SHA256D	../../unet/unet.h	62;"	d
UNET_STRATUM_SKEIN	../../unet/unet.h	68;"	d
UNET_STRATUM_X11	../../unet/unet.h	64;"	d
UNET_TESTNET	../../unet/unet.h	39;"	d
UNLIKELY_PCT	../../server/txfeerate.h	/^static const double UNLIKELY_PCT = .5;$/;"	v
USER_AUTH	../../shapi/shapi.h	51;"	d
USER_AUTH	../../stratum/stratum.h	51;"	d
USER_CLIENT	../../shapi/shapi.h	54;"	d
USER_CLIENT	../../stratum/stratum.h	54;"	d
USER_ELEVATE	../../shapi/shapi.h	57;"	d
USER_ELEVATE	../../stratum/stratum.h	57;"	d
USER_EXTRANONCE	../../shapi/shapi.h	58;"	d
USER_EXTRANONCE	../../stratum/stratum.h	58;"	d
USER_REMOTE	../../shapi/shapi.h	55;"	d
USER_REMOTE	../../stratum/stratum.h	55;"	d
USER_RPC	../../shapi/shapi.h	56;"	d
USER_RPC	../../stratum/stratum.h	56;"	d
USER_SUBSCRIBE	../../shapi/shapi.h	52;"	d
USER_SUBSCRIBE	../../stratum/stratum.h	52;"	d
USER_SYNC	../../shapi/shapi.h	53;"	d
USER_SYNC	../../stratum/stratum.h	53;"	d
USER_SYSTEM	../../shapi/shapi.h	50;"	d
USER_SYSTEM	../../stratum/stratum.h	50;"	d
UTHREAD	../../unet/unet.h	106;"	d
UTHREAD_IDLE	../../unet/unet_thread.c	32;"	d	file:
UTHREAD_MAX_TIME	../../unet/unet_thread.c	38;"	d	file:
UTHREAD_TIMER	../../unet/unet_thread.c	35;"	d	file:
UnsetFlag	../../server/txmempool.h	/^    void UnsetFlag(int flag)$/;"	f	class:CPoolTx
UpdateAccount	../../server/account.cpp	/^void CAccountCache::UpdateAccount()$/;"	f	class:CAccountCache
UpdateAlias	../../server/block.cpp	/^CAlias *CTransaction::UpdateAlias(std::string name, const uint160& hash)$/;"	f	class:CTransaction
UpdateAsset	../../server/block.cpp	/^CAsset *CTransaction::UpdateAsset(const CAsset& assetIn, string strAssetName, string strAssetHash)$/;"	f	class:CTransaction
UpdateBlockAvailability	../../server/chain.cpp	/^void UpdateBlockAvailability(int ifaceIndex, CNode *pfrom, const uint256& hash)$/;"	f
UpdateBlockCoins	../../server/coin.cpp	/^bool UpdateBlockCoins(CBlock& block)$/;"	f
UpdateEmptyFull	../../server/bloom.cpp	/^void CBloomFilter::UpdateEmptyFull()$/;"	f	class:CBloomFilter
UpdateExec	../../server/block.cpp	/^CExecCheckpoint *CTransaction::UpdateExec(const CExec& execIn)$/;"	f	class:CTransaction
UpdateMovingAverages	../../server/txfeerate.cpp	/^void TxConfirmStats::UpdateMovingAverages()$/;"	f	class:TxConfirmStats
UpdateParam	../../server/block.cpp	/^CParam *CTransaction::UpdateParam(std::string strName, int64_t nValue)$/;"	f	class:CTransaction
UpdateServiceMinerEvent	../../server/chain.cpp	/^bool UpdateServiceMinerEvent(int ifaceIndex)$/;"	f
UpdateSpent	../../server/wallet.h	/^				 bool UpdateSpent(const std::vector<char>& vfNewSpent)$/;"	f	class:CWalletTx
UpdateTime	../../server/block.cpp	/^void CBlock::UpdateTime(const CBlockIndex* pindexPrev)$/;"	f	class:CBlock
UpdateTxIndex	../../server/txidx.cpp	/^bool CTxDB::UpdateTxIndex(uint256 hash, const CTxIndex& txindex)$/;"	f	class:CTxDB
UpdateValidateNotaryTx	../../server/matrix.cpp	/^void UpdateValidateNotaryTx(CIface *iface, CTransaction& tx, const CScript& scriptPrev)$/;"	f
UpdatedTransaction	../../server/wallet.cpp	/^void CWallet::UpdatedTransaction(const uint256 &hashTx)$/;"	f	class:CWallet
VALIDATE_MATRIX_BMP	../../stratum/stratum_http.c	523;"	d	file:
VALIDATE_NOTARY_DEPTH	../../server/matrix.cpp	37;"	d	file:
VERSIONBITS_LAST_OLD_BLOCK_VERSION	../../server/versionbits.h	/^static const int32_t VERSIONBITS_LAST_OLD_BLOCK_VERSION = 4;$/;"	v
VERSIONBITS_NUM_BITS	../../server/versionbits.h	/^static const int32_t VERSIONBITS_NUM_BITS = 29;$/;"	v
VERSIONBITS_TOP_BITS	../../server/versionbits.h	/^static const int32_t VERSIONBITS_TOP_BITS = 0x20000000UL;$/;"	v
VERSIONBITS_TOP_MASK	../../server/versionbits.h	/^static const int32_t VERSIONBITS_TOP_MASK = 0xE0000000UL;$/;"	v
VERSION_MASK	../../server/block.h	/^		static const int VERSION_MASK = 15;$/;"	m	class:CTransactionCore
ValidIndexSet	../../server/block.h	/^typedef set<CBlockIndex*, CBlockIndexWorkComparator> ValidIndexSet;$/;"	t
ValueFromAmount	../../server/block.cpp	/^json_spirit::Value ValueFromAmount(int64 amount)$/;"	f
ValueString	../../server/script.h	/^inline std::string ValueString(const std::vector<unsigned char>& vch)$/;"	f
Verify	../../server/dikey.cpp	/^bool DIKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
Verify	../../server/eckey.cpp	/^bool ECKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
Verify	../../server/hdkey.cpp	/^bool HDPubKey::Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPubKey
Verify	../../server/hdkey.h	/^    bool Verify(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
Verify	../../server/txcreator.cpp	/^bool CTxCreator::Verify()$/;"	f	class:CTxCreator
VerifyAccountName	../../shapi/shapi_api.cpp	/^static bool VerifyAccountName(CWallet *wallet, string strAccount)$/;"	f	file:
VerifyAccountName	../../stratum/stratum_api.cpp	/^static bool VerifyAccountName(CWallet *wallet, string strAccount)$/;"	f	file:
VerifyCompact	../../server/dikey.cpp	/^bool DIKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:DIKey
VerifyCompact	../../server/eckey.cpp	/^bool ECKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:ECKey
VerifyCompact	../../server/hdkey.cpp	/^bool HDPrivKey::VerifyCompact(uint256 hash, const std::vector<unsigned char>& vchSig)$/;"	f	class:HDPrivKey
VerifyLimits	../../server/txmempool.cpp	/^bool CPool::VerifyLimits(CPoolTx& ptx)$/;"	f	class:CPool
VerifyMatrixTx	../../server/wallet.cpp	/^bool VerifyMatrixTx(CTransaction& tx, int& mode)$/;"	f
VerifyScript	../../server/script.cpp	/^bool VerifyScript(CSignature& sig, const CScript& scriptSig, cstack_t& witness, const CScript& scriptPubKey, int flags)$/;"	f
VerifySignature	../../server/script.cpp	/^bool VerifySignature(int ifaceIndex, const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)$/;"	f
VerifySoftLimits	../../server/txmempool.cpp	/^bool CPool::VerifySoftLimits(CPoolTx& ptx)$/;"	f	class:CPool
VerifySpringMatrix	../../server/matrix.cpp	/^bool CTransaction::VerifySpringMatrix(int ifaceIndex, const CTxMatrix& matrix, shnum_t *lat_p, shnum_t *lon_p)$/;"	f	class:CTransaction
VerifyStandards	../../server/txmempool.cpp	/^bool CPool::VerifyStandards(CPoolTx& ptx)$/;"	f	class:CPool
VerifyTx	../../server/txmempool.cpp	/^bool CPool::VerifyTx(CTransaction& tx)$/;"	f	class:CPool
VerifyTxHash	../../server/block.cpp	/^bool VerifyTxHash(CIface *iface, uint256 hashTx)$/;"	f
VerifyValidateMatrix	../../server/block.cpp	/^bool CTransaction::VerifyValidateMatrix(int ifaceIndex, const CTxMatrix& matrix, CBlockIndex *pindex)$/;"	f	class:CTransaction
VerifyValidateMatrixScript	../../server/matrix.cpp	/^bool VerifyValidateMatrixScript(CWallet *wallet, CTransaction& tx)$/;"	f
VerifyValidateMatrixScript	../../server/matrix.cpp	/^bool VerifyValidateMatrixScript(CWallet *wallet, const uint256& hMatrixTx, const CScript& scriptIn)$/;"	f
VerifyWitnessProgram	../../server/script.cpp	/^static bool VerifyWitnessProgram(CSignature& sig, cstack_t& witness, int witversion, const std::vector<unsigned char>& program, int flags)$/;"	f	file:
VersionBitsCache	../../server/versionbits.h	/^struct VersionBitsCache$/;"	s
VersionBitsConditionChecker	../../server/versionbits.cpp	/^      VersionBitsConditionChecker(DeploymentPos id_) : id(id_) {}$/;"	f	class:__anon9::VersionBitsConditionChecker
VersionBitsConditionChecker	../../server/versionbits.cpp	/^  class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {$/;"	c	namespace:__anon9	file:
VersionBitsDeploymentInfo	../../server/versionbits.cpp	/^const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[MAX_VERSION_BITS_DEPLOYMENTS] = {$/;"	v	typeref:struct:BIP9DeploymentInfo
VersionBitsMask	../../server/versionbits.cpp	/^uint32_t VersionBitsMask(CIface * params, DeploymentPos pos)$/;"	f
VersionBitsState	../../server/versionbits.cpp	/^ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, CIface * params, DeploymentPos pos)$/;"	f
WALLET_CRYPTO_KEY_SIZE	../../server/crypter.h	/^const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;$/;"	v
WALLET_CRYPTO_SALT_SIZE	../../server/crypter.h	/^const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;$/;"	v
WIN32_LEAN_AND_MEAN	../../server/util.cpp	52;"	d	file:
WORK_ROUND_OFFSET	../../stratum/stratum_protocol.c	35;"	d	file:
WalletFeature	../../server/wallet.h	/^enum WalletFeature$/;"	g
WalletUpdateSpent	../../server/wallettx.cpp	/^void CWallet::WalletUpdateSpent(const CTransaction &tx)$/;"	f	class:CWallet
WildcardMatch	../../server/util.cpp	/^bool WildcardMatch(const char* psz, const char* mask)$/;"	f
WildcardMatch	../../server/util.cpp	/^bool WildcardMatch(const string& str, const string& mask)$/;"	f
WitnessSigOps	../../server/block.cpp	/^static size_t WitnessSigOps(int witversion, const std::vector<unsigned char>& witprogram, const CScriptWitness& witness, int flags)$/;"	f	file:
WitnessUnknown	../../server/script.h	/^struct WitnessUnknown$/;"	s
WitnessV0KeyHash	../../server/script.h	/^	WitnessV0KeyHash() : uint160() {} $/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	../../server/script.h	/^	explicit WitnessV0KeyHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:WitnessV0KeyHash
WitnessV0KeyHash	../../server/script.h	/^struct WitnessV0KeyHash : public uint160$/;"	s
WitnessV0ScriptHash	../../server/script.h	/^	WitnessV0ScriptHash() : uint256() {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	../../server/script.h	/^	explicit WitnessV0ScriptHash(const uint256& hash) : uint256(hash) {}$/;"	f	struct:WitnessV0ScriptHash
WitnessV0ScriptHash	../../server/script.h	/^struct WitnessV0ScriptHash : public uint256$/;"	s
WitnessV14KeyHash	../../server/script.h	/^	WitnessV14KeyHash() : uint160() {} $/;"	f	struct:WitnessV14KeyHash
WitnessV14KeyHash	../../server/script.h	/^	explicit WitnessV14KeyHash(const uint160& hash) : uint160(hash) {}$/;"	f	struct:WitnessV14KeyHash
WitnessV14KeyHash	../../server/script.h	/^struct WitnessV14KeyHash : public uint160$/;"	s
WitnessV14ScriptHash	../../server/script.h	/^	WitnessV14ScriptHash() : uint256() {}$/;"	f	struct:WitnessV14ScriptHash
WitnessV14ScriptHash	../../server/script.h	/^	explicit WitnessV14ScriptHash(const uint256& hash) : uint256(hash) {}$/;"	f	struct:WitnessV14ScriptHash
WitnessV14ScriptHash	../../server/script.h	/^struct WitnessV14ScriptHash : public uint256$/;"	s
Write	../../server/txidx.h	/^      bool Write(const K& key, const T& value, bool fOverwrite=true)$/;"	f	class:CDB
WriteAccount	../../server/walletdb.cpp	/^bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)$/;"	f	class:CWalletDB
WriteAccountingEntry	../../server/walletdb.cpp	/^bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)$/;"	f	class:CWalletDB
WriteArchBlock	../../server/block.cpp	/^bool CBlock::WriteArchBlock()$/;"	f	class:CBlock
WriteArchTx	../../server/wallettx.cpp	/^bool CWallet::WriteArchTx(const CWalletTx& wtx) const$/;"	f	class:CWallet
WriteBestBlock	../../server/walletdb.h	/^    bool WriteBestBlock(const CBlockLocator& locator)$/;"	f	class:CWalletDB
WriteBestChain	../../server/global.cpp	/^void WriteBestChain(CIface *iface, uint256 hash)$/;"	f
WriteBlock	../../server/block.cpp	/^bool CBlock::WriteBlock(uint64_t nHeight)$/;"	f	class:CBlock
WriteCScript	../../server/walletdb.h	/^    bool WriteCScript(const uint160& hash, const CScript& redeemScript)$/;"	f	class:CWalletDB
WriteCoins	../../server/coin.cpp	/^bool CTransaction::WriteCoins(int ifaceIndex, const vector<uint256>& vOuts)$/;"	f	class:CTransaction
WriteCoins	../../server/coin.cpp	/^bool CTransaction::WriteCoins(int ifaceIndex, int nOut, const uint256& hashTxOut)$/;"	f	class:CTransaction
WriteCryptedKey	../../server/walletdb.h	/^    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)$/;"	f	class:CWalletDB
WriteDefaultKey	../../server/walletdb.h	/^    bool WriteDefaultKey(const CPubKey& vchPubKey)$/;"	f	class:CWalletDB
WriteGlobalVar	../../server/global.cpp	/^void WriteGlobalVar(char *tag, char *var, const char *value)$/;"	f
WriteHashBestChain	../../server/coin.cpp	/^void WriteHashBestChain(CIface *iface, uint256 hash)$/;"	f
WriteHashBestChain	../../server/txidx.cpp	/^bool CTxDB::WriteHashBestChain(uint256 hashBestChain)$/;"	f	class:CTxDB
WriteKey	../../server/walletdb.h	/^    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)$/;"	f	class:CWalletDB
WriteKey	../../server/walletdb.h	/^    bool WriteKey(const DIKey& key, const CPubKey& pubkey)$/;"	f	class:CWalletDB
WriteKey	../../server/walletdb.h	/^    bool WriteKey(const ECKey& key, const CPubKey& pubkey)$/;"	f	class:CWalletDB
WriteMasterKey	../../server/walletdb.h	/^    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)$/;"	f	class:CWalletDB
WriteMinVersion	../../server/walletdb.h	/^    bool WriteMinVersion(int nVersion)$/;"	f	class:CWalletDB
WriteName	../../server/walletdb.cpp	/^bool CWalletDB::WriteName(const string& strAddress, const string& strName)$/;"	f	class:CWalletDB
WriteSetting	../../server/walletdb.h	/^    bool WriteSetting(const std::string& strKey, const T& value)$/;"	f	class:CWalletDB
WriteTx	../../server/block.cpp	/^bool CTransaction::WriteTx(int ifaceIndex, uint64_t blockHeight)$/;"	f	class:CTransaction
WriteTx	../../server/walletdb.h	/^    bool WriteTx(uint256 hash, const CWalletTx& wtx)$/;"	f	class:CWalletDB
WriteTxCoins	../../server/coin.cpp	/^bool WriteTxCoins(uint256 hash, int ifaceIndex, const vector<uint256>& vOuts)$/;"	f
WriteVersion	../../server/global.cpp	/^void WriteVersion(CIface *iface, int nVersion)$/;"	f
WriteVersion	../../server/txidx.h	/^    bool WriteVersion(int nVersion)$/;"	f	class:CDB
WriteWalletTx	../../server/wallettx.cpp	/^void CWallet::WriteWalletTx(const CWalletTx& wtx) const$/;"	f	class:CWallet
_CheckLowS	../../server/script.cpp	/^bool static _CheckLowS(const std::vector<unsigned char>& vchSig)$/;"	f	file:
_CheckLowS	../../test/testcoin_key.cpp	/^bool static _CheckLowS(const std::vector<unsigned char>& vchSig) $/;"	f	file:
_END_TEST	../../test/test_shcoind.h	10;"	d
_FALSE	../../test/test_shcoind.h	14;"	d
_FeeEstimator	../../server/txfeerate.cpp	/^static CBlockPolicyEstimator *_FeeEstimator[MAX_COIN_IFACE];$/;"	v	file:
_IsLowDERSignature	../../test/testcoin_key.cpp	/^bool static _IsLowDERSignature(const cbuff& vchSig)$/;"	f	file:
_IsValidSignatureEncoding	../../test/testcoin_key.cpp	/^bool static _IsValidSignatureEncoding(const std::vector<unsigned char> &sig) $/;"	f	file:
_PubKeyToJSON	../../server/block.cpp	/^static void _PubKeyToJSON(int ifaceIndex, const CScript& scriptPubKey, Object& out)$/;"	f	file:
_TEST	../../test/test_shcoind.h	9;"	d
_TEST	../../test/testcoin_account.cpp	/^_TEST(account_cache)$/;"	f
_TEST	../../test/testcoin_algo.cpp	/^_TEST(algo_sha256d)$/;"	f
_TEST	../../test/testcoin_bignum.cpp	/^_TEST(bignum)$/;"	f
_TEST	../../test/testcoin_bip32.cpp	/^_TEST(bip32_hdkey)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(bech32)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(blockchain)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(bolo)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(chainwork)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(cointx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(exectx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(identtx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(matrix)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(matrixtx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(offertx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(orphan_block)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(reorganize)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(respend)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(scriptid)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(segwit)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(segwit_serializetx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(seqlocktx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(serializetx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(signtx)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(txmempool_conflict)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(txmempool_depend)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(txmempool_inval)$/;"	f
_TEST	../../test/testcoin_block.cpp	/^_TEST(txmempool_pending)$/;"	f
_TEST	../../test/testcoin_bloom.cpp	/^_TEST(bloom_create_insert_key)$/;"	f
_TEST	../../test/testcoin_bloom.cpp	/^_TEST(bloom_match)$/;"	f
_TEST	../../test/testcoin_coin.cpp	/^_TEST(coin_spendall)$/;"	f
_TEST	../../test/testcoin_coin.cpp	/^_TEST(coin_spendall_segwit)$/;"	f
_TEST	../../test/testcoin_coin.cpp	/^_TEST(coinaddr)$/;"	f
_TEST	../../test/testcoin_coin.cpp	/^_TEST(wallet)$/;"	f
_TEST	../../test/testcoin_hash.cpp	/^_TEST(sha256transform)$/;"	f
_TEST	../../test/testcoin_json.cpp	/^_TEST(jsonencap)$/;"	f
_TEST	../../test/testcoin_key.cpp	/^_TEST(coin_key)$/;"	f
_TEST	../../test/testcoin_key.cpp	/^_TEST(coin_key_phrase)$/;"	f
_TEST	../../test/testcoin_sip10.cpp	/^_TEST(sip10_ctxtx)$/;"	f
_TEST	../../test/testcoin_sip10.cpp	/^_TEST(sip10_di_ctxtx)$/;"	f
_TEST	../../test/testcoin_sip12.cpp	/^_TEST(sip12_consensus)$/;"	f
_TEST	../../test/testcoin_sip25.cpp	/^_TEST(sip25_assettx)$/;"	f
_TEST	../../test/testcoin_sip25.cpp	/^_TEST(sip25_di_assettx)$/;"	f
_TEST	../../test/testcoin_sip33.cpp	/^_TEST(sip33_hdkey)$/;"	f
_TEST	../../test/testcoin_sip33.cpp	/^_TEST(sip33_tx)$/;"	f
_TEST	../../test/testcoin_sip5.cpp	/^_TEST(sip5_certtx)$/;"	f
_TEST	../../test/testcoin_sip5.cpp	/^_TEST(sip5_di_certtx)$/;"	f
_TEST	../../test/testcoin_sip6.cpp	/^_TEST(sip6_aliastx)$/;"	f
_TEST	../../test/testcoin_sip6.cpp	/^_TEST(sip6_di_aliastx)$/;"	f
_TRUE	../../test/test_shcoind.h	12;"	d
_TRUEPTR	../../test/test_shcoind.h	26;"	d
_TRUE_EQUAL	../../test/test_shcoind.h	17;"	d
_TRUE_GT	../../test/test_shcoind.h	21;"	d
_TRUE_NE	../../test/test_shcoind.h	19;"	d
_WIN32_IE	../../server/util.cpp	49;"	d	file:
_WIN32_IE	../../server/util.cpp	51;"	d	file:
_WIN32_WINNT	../../server/util.cpp	45;"	d	file:
_WIN32_WINNT	../../server/util.cpp	47;"	d	file:
__BLOCKCHAIN__BC_ARCH_H__	../../blockchain/bc_arch.h	27;"	d
__BLOCKCHAIN__BC_BLOCK_H__	../../blockchain/bc_block.h	28;"	d
__BLOCKCHAIN__BC_FMAP_H__	../../blockchain/bc_fmap.h	27;"	d
__BLOCKCHAIN__BC_H__	../../blockchain/bc.h	27;"	d
__BLOCKCHAIN__BC_INDEX_H__	../../blockchain/bc_index.h	27;"	d
__BLOCKCHAIN__BC_MUTEX_H__	../../blockchain/bc_mutex.h	28;"	d
__BLOCKCHAIN__BC_TABLE_H__	../../blockchain/bc_table.h	28;"	d
__BLOCK_CMPCT_H__	../../server/block_cmpct.h	27;"	d
__COIN_PROTO_H__	../../proto/coin_proto.h	27;"	d
__COLOR_PROTO_H__	../../proto/color_proto.h	27;"	d
__CRYPTER_H__	../../server/crypter.h	27;"	d
__EMC2_PROTO_H__	../../proto/emc2_proto.h	27;"	d
__LTC_PROTO_H__	../../proto/ltc_proto.h	27;"	d
__MATRIX_H__	../../server/matrix.h	27;"	d
__MRUSET_H	../../server/mruset.h	27;"	d
__PROTO__CONVERSION_H__	../../proto/conversion.h	26;"	d
__PROTO__NETWORK_H__	../../proto/network.h	27;"	d
__PROTO__PROTOCOL_C__	../../shapi/shapi_protocol.c	26;"	d	file:
__PROTO__PROTOCOL_C__	../../stratum/stratum_api.cpp	26;"	d	file:
__PROTO__PROTOCOL_C__	../../stratum/stratum_command.c	26;"	d	file:
__PROTO__PROTOCOL_C__	../../stratum/stratum_protocol.c	26;"	d	file:
__PROTO__TYPES_H__	../../proto/types.h	27;"	d
__RESERVED_2	../../server/script.h	/^		__RESERVED_2$/;"	e	enum:txnouttype
__SERVER__ACCOUNT_H__	../../server/account.h	27;"	d
__SERVER__ALGOBITS_H__	../../server/algobits.h	27;"	d
__SERVER__BASE58_H__	../../server/base58.h	27;"	d
__SERVER__BLOCK_H__	../../server/block.h	27;"	d
__SERVER__BLOOM_H__	../../server/bloom.h	27;"	d
__SERVER__CHAIN_H__	../../server/chain.h	27;"	d
__SERVER__CHECKPOINTS_H__	../../server/checkpoints.h	27;"	d
__SERVER__COINADDR_H__	../../server/coinaddr.h	27;"	d
__SERVER__COIN_H__	../../server/coin.h	27;"	d
__SERVER__DIKEY_H__	../../server/dikey.h	27;"	d
__SERVER__ECKEY_H__	../../server/eckey.h	27;"	d
__SERVER__GLOBAL_H__	../../server/global.h	27;"	d
__SERVER__HDKEY_H__	../../server/hdkey.h	27;"	d
__SERVER__KEYSTORE_H__	../../server/keystore.h	27;"	d
__SERVER__KEY_H__	../../server/key.h	27;"	d
__SERVER__MNEMONIC_H__	../../server/mnemonic.h	27;"	d
__SERVER__NET_H__	../../server/net.h	27;"	d
__SERVER__SCRIPT_H__	../../server/script.h	27;"	d
__SERVER__SERVER_H__	../../server/server.h	27;"	d
__SERVER__SHA256D_MERKLE_H__	../../server/sha256d_merkle.h	27;"	d
__SERVER__SPRING_H__	../../server/spring.h	27;"	d
__SERVER__TXCREATOR_H__	../../server/txcreator.h	27;"	d
__SERVER__TXFEERATE_H__	../../server/txfeerate.h	4;"	d
__SERVER__TXMEMPOOL_H__	../../server/txmempool.h	27;"	d
__SERVER__TXSIGNATURE_H__	../../server/txsignature.h	27;"	d
__SERVER__VALIDATION_H__	../../server/validation.h	27;"	d
__SERVER__WALLET_H__	../../server/wallet.h	27;"	d
__SHAPI__API_H__	../../shapi/shapi_api.h	27;"	d
__SHAPI__PROTOCOL_H__	../../shapi/shapi_protocol.h	27;"	d
__SHAPI__SHAPI_H__	../../shapi/shapi.h	27;"	d
__SHAPI__USER_H__	../../shapi/shapi_user.h	27;"	d
__SHC_PROTO_H__	../../proto/shc_proto.h	27;"	d
__SHLIB_H__	../../server/shlib.h	27;"	d
__STRATUM__API_H__	../../stratum/stratum_api.h	27;"	d
__STRATUM__MINER_H__	../../stratum/stratum_miner.h	27;"	d
__STRATUM__PROTOCOL_H__	../../stratum/stratum_protocol.h	27;"	d
__STRATUM__STRATUM_HTTP_H__	../../stratum/stratum_http.h	27;"	d
__STRATUM__STRATUM_H__	../../stratum/stratum.h	27;"	d
__STRATUM__STRATUM_SYNC_H__	../../stratum/stratum_sync.h	27;"	d
__STRATUM__TASK_C__	../../stratum/stratum_task.c	26;"	d	file:
__STRATUM__TASK_H__	../../stratum/stratum_task.h	27;"	d
__STRATUM__USER_H__	../../stratum/stratum_user.h	27;"	d
__TESTNET_PROTO_H__	../../proto/testnet_proto.h	27;"	d
__TEST_PROTO_H__	../../proto/test_proto.h	27;"	d
__TEST__SHTEST_H__	../../test/test_shcoind.h	3;"	d
__TXIDX_H__	../../server/txidx.h	28;"	d
__UNET_SEED_H__	../../unet/unet_seed.h	4;"	d
__UNET__UNET_H__	../../unet/unet.h	27;"	d
__UTIL_H__	../../server/util.h	3;"	d
__WALLETDB_H__	../../server/walletdb.h	28;"	d
__WIT_MERKLE_H__	../../server/wit_merkle.h	3;"	d
__reserved_0__	../../blockchain/bc.h	/^  uint64_t __reserved_0__;$/;"	m	struct:bc_idx_t
__reserved_1__	../../blockchain/bc.h	/^  uint64_t __reserved_1__;$/;"	m	struct:bc_idx_t
_account_address_flags	../../server/account.cpp	/^static int _account_address_flags[MAX_ACCADDR] = {$/;"	v	file:
_bc_append	../../blockchain/bc_block.c	/^static int _bc_append(bc_t *bc, bc_hash_t hash, void *data, size_t data_len)$/;"	f	file:
_bc_arch	../../blockchain/bc_block.c	/^static int _bc_arch(bc_t *bc, bcsize_t pos, unsigned char **data_p, size_t *data_len_p)$/;"	f	file:
_bc_arch_close	../../blockchain/bc_arch.c	/^static void _bc_arch_close(bc_t *bc)$/;"	f	file:
_bc_arch_get	../../blockchain/bc_arch.c	/^static int _bc_arch_get(bc_t *bc, bcpos_t pos, bc_idx_t *ret_arch)$/;"	f	file:
_bc_arch_open	../../blockchain/bc_arch.c	/^static int _bc_arch_open(bc_t *bc)$/;"	f	file:
_bc_arch_set	../../blockchain/bc_arch.c	/^static int _bc_arch_set(bc_t *bc, bcpos_t pos, bc_idx_t *arch)$/;"	f	file:
_bc_arch_write	../../blockchain/bc_block.c	/^static int _bc_arch_write(bc_t *bc, bc_hash_t hash, void *raw_data, bcsize_t data_len)$/;"	f	file:
_bc_chain_idle	../../blockchain/bc_block.c	/^static void _bc_chain_idle(void)$/;"	f	file:
_bc_close	../../blockchain/bc_block.c	/^static void _bc_close(bc_t *bc)$/;"	f	file:
_bc_get	../../blockchain/bc_block.c	/^static int _bc_get(bc_t *bc, bcpos_t pos, unsigned char **data_p, size_t *data_len_p)$/;"	f	file:
_bc_idx_clear	../../blockchain/bc_index.c	/^static int _bc_idx_clear(bc_t *bc, bcsize_t pos)$/;"	f	file:
_bc_idx_close	../../blockchain/bc_index.c	/^static void _bc_idx_close(bc_t *bc)$/;"	f	file:
_bc_idx_find	../../blockchain/bc_index.c	/^static int _bc_idx_find(bc_t *bc, bc_hash_t hash, bc_idx_t *ret_idx, int *ret_pos)$/;"	f	file:
_bc_idx_get	../../blockchain/bc_index.c	/^static int _bc_idx_get(bc_t *bc, bcsize_t pos, bc_idx_t *ret_idx)$/;"	f	file:
_bc_idx_open	../../blockchain/bc_index.c	/^static int _bc_idx_open(bc_t *bc)$/;"	f	file:
_bc_idx_reset	../../blockchain/bc_index.c	/^static int _bc_idx_reset(bc_t *bc, bcsize_t pos, bc_idx_t *idx)$/;"	f	file:
_bc_idx_set	../../blockchain/bc_index.c	/^static int _bc_idx_set(bc_t *bc, bcsize_t pos, bc_idx_t *idx)$/;"	f	file:
_bc_map_alloc	../../blockchain/bc_fmap.c	/^static int _bc_map_alloc(bc_t *bc, bc_map_t *map, bcsize_t len)$/;"	f	file:
_bc_map_append	../../blockchain/bc_fmap.c	/^static int _bc_map_append(bc_t *bc, bc_map_t *map, void *raw_data, bcsize_t data_len)$/;"	f	file:
_bc_map_close	../../blockchain/bc_fmap.c	/^static void _bc_map_close(bc_map_t *map)$/;"	f	file:
_bc_map_open	../../blockchain/bc_fmap.c	/^static int _bc_map_open(bc_t *bc, bc_map_t *map)$/;"	f	file:
_bc_map_read	../../blockchain/bc_fmap.c	/^static int _bc_map_read(bc_t *bc, bc_map_t *map, unsigned char *data, bcsize_t data_of, bcsize_t data_len)$/;"	f	file:
_bc_map_trunc	../../blockchain/bc_fmap.c	/^static int _bc_map_trunc(bc_t *bc, bc_map_t *map, bcsize_t len)$/;"	f	file:
_bc_map_write	../../blockchain/bc_fmap.c	/^static int _bc_map_write(bc_t *bc, bc_map_t *map, bcsize_t of, void *raw_data, bcsize_t data_len)$/;"	f	file:
_bc_open	../../blockchain/bc_block.c	/^static int _bc_open(char *name, bc_t **bc_p)$/;"	f	file:
_bc_purge	../../blockchain/bc_block.c	/^static int _bc_purge(bc_t *bc, bcsize_t pos)$/;"	f	file:
_bc_read	../../blockchain/bc_block.c	/^static int _bc_read(bc_t *bc, bcsize_t pos, void *data, bcsize_t data_len)$/;"	f	file:
_bc_rewrite	../../blockchain/bc_block.c	/^static int _bc_rewrite(bc_t *bc, bcsize_t pos, bc_hash_t hash, void *raw_data, int data_len)$/;"	f	file:
_bc_table_clear	../../blockchain/bc_table.c	/^static int _bc_table_clear(bc_t *bc)$/;"	f	file:
_bc_table_close	../../blockchain/bc_table.c	/^static void _bc_table_close(bc_t *bc)$/;"	f	file:
_bc_table_get	../../blockchain/bc_table.c	/^static int _bc_table_get(bc_t *bc, bc_hash_t hash, bcpos_t *ret_pos)$/;"	f	file:
_bc_table_open	../../blockchain/bc_table.c	/^static int _bc_table_open(bc_t *bc)$/;"	f	file:
_bc_table_reset	../../blockchain/bc_table.c	/^static int _bc_table_reset(bc_t *bc, bc_hash_t hash)$/;"	f	file:
_bc_table_set	../../blockchain/bc_table.c	/^static int _bc_table_set(bc_t *bc, bc_hash_t hash, bcpos_t pos)$/;"	f	file:
_bc_table_unset	../../blockchain/bc_table.c	/^static int _bc_table_unset(bc_t *bc, bc_hash_t hash)$/;"	f	file:
_bc_write	../../blockchain/bc_block.c	/^static int _bc_write(bc_t *bc, bcsize_t pos, bc_hash_t hash, void *raw_data, int data_len)$/;"	f	file:
_blank_hash	../../server/coin.cpp	/^static const uint256 _blank_hash = 0;$/;"	v	file:
_cutest_ptr	../../test/test_shcoind.h	/^static void *_cutest_ptr;$/;"	v
_iface_table	../../proto/coin_proto.c	/^static coin_iface_t *_iface_table[MAX_COIN_IFACE] = {$/;"	v	file:
_keyxor	../../server/eckey.cpp	/^static void _keyxor(unsigned char *buf, unsigned char *alt, size_t size)$/;"	f	file:
_memxor	../../server/dikey.cpp	/^static void _memxor(unsigned char *buf, unsigned char *alt, size_t size)$/;"	f	file:
_pub_addr_list	../../stratum/stratum_sync.c	/^static char **_pub_addr_list(int ifaceIndex, char *acc_name_in)$/;"	f	file:
_pubkey_tag_table	../../server/account.cpp	/^static const char *_pubkey_tag_table[MAX_ACCADDR] = {$/;"	v	file:
_reserved0_	../../server/account.h	/^		uint256 _reserved0_;$/;"	m	class:CAccountCache
_spring_matrix	../../server/spring.c	/^uint64_t _spring_matrix[256][256] = {$/;"	v
_stratum_user_html_template	../../stratum/stratum_http.c	/^static const char *_stratum_user_html_template = $/;"	v	file:
_sync_req_idx	../../stratum/stratum_sync.c	/^static unsigned int _sync_req_idx;$/;"	v	file:
_task_stat	../../stratum/stratum_task.c	/^task_stat_t _task_stat[MAX_COIN_IFACE];$/;"	v
_unet_bind	../../unet/unet_bind.c	/^static unet_bind_t _unet_bind[MAX_UNET_MODES];$/;"	v	file:
_unet_label	../../unet/unet.c	/^static const char *_unet_label[MAX_UNET_MODES] = $/;"	v	file:
_version_bits_cache	../../server/versionbits.cpp	/^static VersionBitsCache _version_bits_cache[MAX_COIN_IFACE];$/;"	v	file:
accept	../../server/txmempool.h	/^    bool accept(CTransaction &tx, CNode *pfrom = NULL)$/;"	f	class:CTxMemPool
account	../../server/account.h	/^		CAccount account;$/;"	m	class:CAccountCache
active	../../server/txmempool.h	/^    pool_map active;$/;"	m	class:CPool
activeTxn	../../server/txidx.h	/^    DbTxn *activeTxn;$/;"	m	class:CDB
add_coin	../../test/testcoin_coin.cpp	/^static void add_coin(int64 nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)$/;"	f	file:
add_stratum_miner_block	../../stratum/stratum_miner.cpp	/^void add_stratum_miner_block(int ifaceIndex, char *block_hash)$/;"	f
addr	../../server/coinaddr.h	/^    CCoinAddr *addr;$/;"	m	class:CCoinAddrVisitor
addr	../../server/net.h	/^    CAddress addr;$/;"	m	class:CNode
addrLocal	../../server/net.h	/^    CService addrLocal;$/;"	m	class:CNode
addrName	../../server/net.h	/^    std::string addrName;$/;"	m	class:CNode
addrName	../../server/net.h	/^    std::string addrName;$/;"	m	class:CNodeStats
alg	../../stratum/stratum.h	/^	int alg;$/;"	m	struct:task_attr_t
alg	../../stratum/stratum.h	/^	int alg;$/;"	m	struct:user_t
algobits_label	../../server/algobits.cpp	/^static const char *algobits_label[MAX_ALGOBITS] = {$/;"	v	file:
alias	../../server/block.h	/^    CAlias alias;$/;"	m	class:CTransaction
altchain	../../server/block.h	/^		CAltChain altchain;$/;"	m	class:CTransaction
altstacktop	../../server/script.cpp	102;"	d	file:
arch_map	../../blockchain/bc.h	/^  bc_map_t arch_map;$/;"	m	struct:bc_t
args	../../stratum/stratum_http.h	/^	shjson_t *args;$/;"	m	struct:httpreq_t
avg	../../server/txfeerate.h	/^    std::vector<double> avg;$/;"	m	class:TxConfirmStats
avg_diff	../../stratum/stratum.h	/^  double avg_diff[MAX_COIN_IFACE];$/;"	m	struct:task_attr_t
balance	../../stratum/stratum.h	/^  double balance[MAX_COIN_IFACE];$/;"	m	struct:user_t
balance_avg	../../stratum/stratum.h	/^  double balance_avg[MAX_COIN_IFACE];$/;"	m	struct:user_t
base58Prefixes	../../test/testcoin_bip32.cpp	/^static std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	v	file:
base58Prefixes	../../test/testcoin_sip33.cpp	/^static std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];$/;"	v	file:
base58_ext_public_key	../../proto/coin_proto.h	/^	unsigned char base58_ext_public_key[4];$/;"	m	struct:coin_iface_t
base58_ext_secret_key	../../proto/coin_proto.h	/^	unsigned char base58_ext_secret_key[4];$/;"	m	struct:coin_iface_t
base58_pubkey_address	../../proto/coin_proto.h	/^	unsigned char base58_pubkey_address;$/;"	m	struct:coin_iface_t
base58_script_address	../../proto/coin_proto.h	/^	unsigned char base58_script_address;$/;"	m	struct:coin_iface_t
base58_script_address2	../../proto/coin_proto.h	/^	unsigned char base58_script_address2;$/;"	m	struct:coin_iface_t
base58_secret_key	../../proto/coin_proto.h	/^	unsigned char base58_secret_key;$/;"	m	struct:coin_iface_t
base_SignatureHash	../../server/txsignature.cpp	/^uint256 base_SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)$/;"	f
bc_alloc	../../blockchain/bc_block.c	/^int bc_alloc(bc_t *bc, unsigned int jrnl)$/;"	f
bc_append	../../blockchain/bc_block.c	/^int bc_append(bc_t *bc, bc_hash_t hash, void *data, size_t data_len)$/;"	f
bc_arch	../../blockchain/bc_block.c	/^int bc_arch(bc_t *bc, bcsize_t pos, unsigned char **data_p, size_t *data_len_p)$/;"	f
bc_arch_add	../../blockchain/bc_arch.c	/^int bc_arch_add(bc_t *bc, bc_idx_t *arch)$/;"	f
bc_arch_close	../../blockchain/bc_arch.c	/^void bc_arch_close(bc_t *bc)$/;"	f
bc_arch_crc	../../blockchain/bc_arch.c	/^uint32_t bc_arch_crc(bc_hash_t hash)$/;"	f
bc_arch_find	../../blockchain/bc_arch.c	/^int bc_arch_find(bc_t *bc, bc_hash_t hash, bc_idx_t *ret_arch, bcsize_t *ret_pos)$/;"	f
bc_arch_get	../../blockchain/bc_arch.c	/^int bc_arch_get(bc_t *bc, bcpos_t pos, bc_idx_t *ret_arch)$/;"	f
bc_arch_next	../../blockchain/bc_arch.c	/^int bc_arch_next(bc_t *bc, bcpos_t *pos_p)$/;"	f
bc_arch_open	../../blockchain/bc_arch.c	/^int bc_arch_open(bc_t *bc)$/;"	f
bc_arch_set	../../blockchain/bc_arch.c	/^int bc_arch_set(bc_t *bc, bcpos_t pos, bc_idx_t *arch)$/;"	f
bc_arch_write	../../blockchain/bc_block.c	/^int bc_arch_write(bc_t *bc, bc_hash_t hash, void *raw_data, bcsize_t data_len)$/;"	f
bc_block	../../proto/coin_proto.h	/^  bc_t *bc_block;$/;"	m	struct:coin_iface_t
bc_chain_idle	../../blockchain/bc_block.c	/^void bc_chain_idle(void)$/;"	f
bc_clear	../../blockchain/bc_block.c	/^int bc_clear(bc_t *bc, bcsize_t pos)$/;"	f
bc_close	../../blockchain/bc_block.c	/^void bc_close(bc_t *bc)$/;"	f
bc_coin	../../proto/coin_proto.h	/^  bc_t *bc_coin;$/;"	m	struct:coin_iface_t
bc_find	../../blockchain/bc_block.c	/^int bc_find(bc_t *bc, bc_hash_t hash, bcpos_t *pos_p)$/;"	f
bc_fmap_total	../../blockchain/bc_fmap.c	/^unsigned int bc_fmap_total(bc_t *bc)$/;"	f
bc_get	../../blockchain/bc_block.c	/^int bc_get(bc_t *bc, bcpos_t pos, unsigned char **data_p, size_t *data_len_p)$/;"	f
bc_get_hash	../../blockchain/bc_block.c	/^int bc_get_hash(bc_t *bc, bcpos_t pos, bc_hash_t ret_hash)$/;"	f
bc_hash_cmp	../../blockchain/bc_block.c	/^int bc_hash_cmp(bc_hash_t a_hash, bc_hash_t b_hash)$/;"	f
bc_hash_t	../../blockchain/bc.h	/^typedef uint32_t bc_hash_t[8];$/;"	t
bc_hdr_t	../../blockchain/bc.h	/^typedef struct bc_hdr_t$/;"	s
bc_hdr_t	../../blockchain/bc.h	/^} bc_hdr_t; \/* 16b *\/$/;"	t	typeref:struct:bc_hdr_t
bc_idle	../../blockchain/bc_block.c	/^void bc_idle(bc_t *bc)$/;"	f
bc_idx_clear	../../blockchain/bc_index.c	/^int bc_idx_clear(bc_t *bc, bcsize_t pos)$/;"	f
bc_idx_close	../../blockchain/bc_index.c	/^void bc_idx_close(bc_t *bc)$/;"	f
bc_idx_crc	../../blockchain/bc_index.c	/^uint32_t bc_idx_crc(bc_hash_t hash)$/;"	f
bc_idx_find	../../blockchain/bc_index.c	/^int bc_idx_find(bc_t *bc, bc_hash_t hash, bc_idx_t *ret_idx, int *ret_pos)$/;"	f
bc_idx_get	../../blockchain/bc_index.c	/^int bc_idx_get(bc_t *bc, bcsize_t pos, bc_idx_t *ret_idx)$/;"	f
bc_idx_next	../../blockchain/bc_index.c	/^int bc_idx_next(bc_t *bc, bcpos_t *pos_p)$/;"	f
bc_idx_open	../../blockchain/bc_index.c	/^int bc_idx_open(bc_t *bc)$/;"	f
bc_idx_reset	../../blockchain/bc_index.c	/^int bc_idx_reset(bc_t *bc, bcsize_t pos, bc_idx_t *idx)$/;"	f
bc_idx_set	../../blockchain/bc_index.c	/^int bc_idx_set(bc_t *bc, bcsize_t pos, bc_idx_t *idx)$/;"	f
bc_idx_t	../../blockchain/bc.h	/^typedef struct bc_idx_t$/;"	s
bc_idx_t	../../blockchain/bc.h	/^} bc_idx_t; \/* 16b *\/$/;"	t	typeref:struct:bc_idx_t
bc_iface_index	../../blockchain/bc_fmap.c	/^static int bc_iface_index(char *name)$/;"	f	file:
bc_journal	../../blockchain/bc_block.c	/^uint32_t bc_journal(int pos)$/;"	f
bc_lock	../../blockchain/bc_mutex.c	/^int bc_lock(bc_t *bc)$/;"	f
bc_map_alloc	../../blockchain/bc_fmap.c	/^int bc_map_alloc(bc_t *bc, bc_map_t *map, bcsize_t len)$/;"	f
bc_map_append	../../blockchain/bc_fmap.c	/^int bc_map_append(bc_t *bc, bc_map_t *map, void *raw_data, bcsize_t data_len)$/;"	f
bc_map_close	../../blockchain/bc_fmap.c	/^void bc_map_close(bc_map_t *map)$/;"	f
bc_map_free	../../blockchain/bc_fmap.c	/^void bc_map_free(bc_map_t *map)$/;"	f
bc_map_open	../../blockchain/bc_fmap.c	/^int bc_map_open(bc_t *bc, bc_map_t *map)$/;"	f
bc_map_read	../../blockchain/bc_fmap.c	/^int bc_map_read(bc_t *bc, bc_map_t *map, unsigned char *data, bcsize_t data_of, bcsize_t data_len)$/;"	f
bc_map_t	../../blockchain/bc.h	/^typedef struct bc_map_t$/;"	s
bc_map_t	../../blockchain/bc.h	/^} bc_map_t;$/;"	t	typeref:struct:bc_map_t
bc_map_trunc	../../blockchain/bc_fmap.c	/^int bc_map_trunc(bc_t *bc, bc_map_t *map, bcsize_t len)$/;"	f
bc_map_write	../../blockchain/bc_fmap.c	/^int bc_map_write(bc_t *bc, bc_map_t *map, bcsize_t of, void *raw_data, bcsize_t data_len)$/;"	f
bc_mutex_init	../../blockchain/bc_mutex.c	/^void bc_mutex_init(bc_t *bc)$/;"	f
bc_mutex_term	../../blockchain/bc_mutex.c	/^void bc_mutex_term(bc_t *bc)$/;"	f
bc_name	../../blockchain/bc_block.c	/^char *bc_name(bc_t *bc)$/;"	f
bc_open	../../blockchain/bc_block.c	/^int bc_open(char *name, bc_t **bc_p)$/;"	f
bc_path_base	../../blockchain/bc_block.c	/^const char *bc_path_base(void)$/;"	f
bc_purge	../../blockchain/bc_block.c	/^int bc_purge(bc_t *bc, bcsize_t pos)$/;"	f
bc_read	../../blockchain/bc_block.c	/^int bc_read(bc_t *bc, bcsize_t pos, void *data, bcsize_t data_len)$/;"	f
bc_rewrite	../../blockchain/bc_block.c	/^int bc_rewrite(bc_t *bc, bcsize_t pos, bc_hash_t hash, void *raw_data, int data_len)$/;"	f
bc_t	../../blockchain/bc.h	/^typedef struct bc_t$/;"	s
bc_t	../../blockchain/bc.h	/^} bc_t;$/;"	t	typeref:struct:bc_t
bc_table_clear	../../blockchain/bc_table.c	/^int bc_table_clear(bc_t *bc)$/;"	f
bc_table_close	../../blockchain/bc_table.c	/^void bc_table_close(bc_t *bc)$/;"	f
bc_table_get	../../blockchain/bc_table.c	/^int bc_table_get(bc_t *bc, bc_hash_t hash, bcpos_t *ret_pos)$/;"	f
bc_table_hash	../../blockchain/bc_table.c	/^int bc_table_hash(bc_hash_t hash)$/;"	f
bc_table_open	../../blockchain/bc_table.c	/^int bc_table_open(bc_t *bc)$/;"	f
bc_table_pos	../../blockchain/bc_table.c	/^bcpos_t *bc_table_pos(bc_t *bc, bc_hash_t hash)$/;"	f
bc_table_reset	../../blockchain/bc_table.c	/^int bc_table_reset(bc_t *bc, bc_hash_t hash)$/;"	f
bc_table_set	../../blockchain/bc_table.c	/^int bc_table_set(bc_t *bc, bc_hash_t hash, bcpos_t pos)$/;"	f
bc_table_unset	../../blockchain/bc_table.c	/^int bc_table_unset(bc_t *bc, bc_hash_t hash)$/;"	f
bc_trylock	../../blockchain/bc_mutex.c	/^int bc_trylock(bc_t *bc)$/;"	f
bc_tx	../../proto/coin_proto.h	/^  bc_t *bc_tx;$/;"	m	struct:coin_iface_t
bc_unlock	../../blockchain/bc_mutex.c	/^void bc_unlock(bc_t *bc)$/;"	f
bc_write	../../blockchain/bc_block.c	/^int bc_write(bc_t *bc, bcsize_t pos, bc_hash_t hash, void *raw_data, int data_len)$/;"	f
bc_wtx	../../proto/coin_proto.h	/^  bc_t *bc_wtx;$/;"	m	struct:coin_iface_t
bclock_t	../../blockchain/bc.h	/^typedef int bclock_t;$/;"	t
bclock_t	../../blockchain/bc.h	/^typedef pthread_mutex_t bclock_t;$/;"	t
bcpos_t	../../blockchain/bc.h	/^typedef uint32_t bcpos_t;$/;"	t
bcsize_t	../../blockchain/bc.h	/^typedef uint32_t bcsize_t;$/;"	t
be32dec	../../test/testcoin_algo.cpp	/^static inline uint32_t be32dec(const void *pp)$/;"	f	file:
be32enc	../../test/testcoin_algo.cpp	/^static inline void be32enc(void *pp, uint32_t x)$/;"	f	file:
begin	../../server/key.h	/^		const unsigned char* begin() const { return vch.data(); }$/;"	f	class:CKey
begin	../../server/key.h	/^		const unsigned char* begin() const { return vchPubKey.data(); }$/;"	f	class:CPubKey
begin	../../server/mruset.h	/^		iterator begin() const { return set.begin(); }$/;"	f	class:mruset
birth	../../stratum/stratum_task.c	/^  time_t birth;$/;"	m	struct:task_stat_t	file:
birth	../../unet/unet_peerdb.c	/^  uint32_t birth;$/;"	m	struct:peerdb_t	file:
bit	../../proto/coin_proto.h	/^  int bit;$/;"	m	struct:BIP9Deployment
bit_mask	../../server/bloom.cpp	/^static const unsigned char bit_mask[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};$/;"	v	file:
bitdb	../../server/txidx.cpp	/^CDBEnv bitdb;$/;"	v
blk_diff	../../proto/coin_proto.h	/^  double blk_diff; \/* next block difficulty *\/$/;"	m	struct:coin_iface_t
blk_stamp	../../stratum/stratum.h	/^  time_t blk_stamp[MAX_COIN_IFACE];$/;"	m	struct:task_attr_t
blkidx_t	../../server/block.h	/^typedef std::map<uint256, CBlockIndex*> blkidx_t;$/;"	t
blockHeight	../../server/txfeerate.h	/^        unsigned int blockHeight;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
blockSinceLastRollingFeeBump	../../server/txfeerate.h	/^    mutable bool blockSinceLastRollingFeeBump;$/;"	m	class:CBlockPolicyEstimator
block_acc	../../stratum/stratum.h	/^  int block_acc;$/;"	m	struct:user_t
block_avg	../../stratum/stratum.h	/^  double block_avg[MAX_ROUNDS_PER_HOUR];$/;"	m	struct:user_t
block_besthash	../../proto/coin_proto.h	/^  bc_hash_t block_besthash; \/* best block hash *\/$/;"	m	struct:coin_iface_t
block_cnt	../../stratum/stratum.h	/^  size_t block_cnt;$/;"	m	struct:user_t
block_freq	../../stratum/stratum.h	/^  double block_freq;$/;"	m	struct:user_t
block_hash	../../stratum/stratum.h	/^  char block_hash[256];$/;"	m	struct:user_t
block_height	../../stratum/stratum.h	/^  uint64_t block_height;$/;"	m	struct:user_t
block_tm	../../stratum/stratum.h	/^  double block_tm;$/;"	m	struct:user_t
block_tot	../../stratum/stratum.h	/^  double block_tot;$/;"	m	struct:user_t
block_ver	../../proto/coin_proto.h	/^  int block_ver;$/;"	m	struct:coin_iface_t
blockhash	../../server/block_cmpct.h	/^		uint256 blockhash;$/;"	m	class:BlockTransactions
blockhash	../../server/block_cmpct.h	/^		uint256 blockhash;$/;"	m	class:BlockTransactionsRequest
blockscan_max	../../proto/coin_proto.h	/^  uint32_t blockscan_max;$/;"	m	struct:coin_iface_t
bloomflags	../../server/net.h	/^enum bloomflags$/;"	g
bnBestChainWork	../../server/wallet.h	/^		CBigNum bnBestChainWork;$/;"	m	class:CWallet
bnChainWork	../../server/block.h	/^    CBigNum bnChainWork;$/;"	m	class:CBlockIndex
bucketIndex	../../server/txfeerate.h	/^        unsigned int bucketIndex;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
bucketMap	../../server/txfeerate.h	/^    std::map<double, unsigned int> bucketMap; \/\/ Map of bucket upper-bound to index into all vectors by bucket$/;"	m	class:TxConfirmStats
buckets	../../server/txfeerate.h	/^    std::vector<double> buckets;              \/\/ The upper-bound of the range for the bucket (inclusive)$/;"	m	class:TxConfirmStats
buff	../../stratum/stratum_http.h	/^	shbuf_t *buff;$/;"	m	struct:httpreq_t
buffer	../../test/CuTest.h	/^	char* buffer;$/;"	m	struct:__anon10
c_processblock	../../stratum/stratum_miner.cpp	/^int c_processblock(CBlock* pblock)$/;"	f
caches	../../server/versionbits.h	/^    ThresholdConditionCache caches[MAX_VERSION_BITS_DEPLOYMENTS];$/;"	m	struct:VersionBitsCache
cb1	../../stratum/stratum.h	/^  char cb1[1024];$/;"	m	struct:task_t
cb2	../../stratum/stratum.h	/^  char cb2[1024];$/;"	m	struct:task_t
certificate	../../server/block.h	/^    CCert certificate;$/;"	m	class:CTransaction
chIV	../../server/crypter.h	/^    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chKey	../../server/crypter.h	/^    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];$/;"	m	class:CCrypter
chain_AreNodesBusy	../../server/chain.cpp	/^static bool chain_AreNodesBusy(int ifaceIndex)$/;"	f	file:
chain_GetNextNode	../../server/chain.cpp	/^static CNode *chain_GetNextNode(int ifaceIndex)$/;"	f	file:
chain_IsNodeBusy	../../server/chain.cpp	/^static bool chain_IsNodeBusy(CNode *pnode)$/;"	f	file:
chain_UpdateWalletCoins	../../server/chain.cpp	/^static void chain_UpdateWalletCoins(int ifaceIndex, CBlock *block, const CTransaction& tx, bool& fCoinBase)$/;"	f	file:
chain_VerifyValidOutputs	../../server/chain.cpp	/^static bool chain_VerifyValidOutputs(int ifaceIndex, const uint256& tx_hash, CWalletTx& wtx)$/;"	f	file:
chaincode	../../server/dikey.h	/^	ChainCode chaincode;$/;"	m	struct:DIExtKey
chaincode	../../server/dikey.h	/^	ChainCode chaincode;$/;"	m	struct:DIExtPubKey
chaincode	../../server/eckey.h	/^	ChainCode chaincode;$/;"	m	struct:ECExtKey
chaincode	../../server/eckey.h	/^	ChainCode chaincode;$/;"	m	struct:ECExtPubKey
changePubKey	../../server/txcreator.h	/^    CPubKey changePubKey;$/;"	m	class:CTxCreator
check_payout	../../stratum/stratum_task.c	/^static void check_payout(int ifaceIndex)$/;"	f	file:
checkpoints	../../server/wallet.h	/^		CCheckpoints *checkpoints;$/;"	m	class:CWallet
ckey_MergeKey	../../server/eckey.cpp	/^static cbuff ckey_MergeKey(cbuff secret, cbuff tag)$/;"	f	file:
cli_id	../../stratum/stratum.h	/^  char cli_id[256];$/;"	m	struct:user_t
cli_ver	../../stratum/stratum.h	/^  char cli_ver[128];$/;"	m	struct:user_t
client_list	../../test/test_shcoind.c	/^user_t *client_list;$/;"	v
client_ver	../../proto/coin_proto.h	/^  int client_ver;$/;"	m	struct:coin_iface_t
cmd	../../proto/coin_proto.h	/^  char cmd[12];$/;"	m	struct:coinhdr_t
coin_f	../../proto/coin_proto.h	/^typedef int (*coin_f)(struct coin_iface_t * \/*iface*\/, void * \/* arg *\/);$/;"	t
coin_iface_t	../../proto/coin_proto.h	/^typedef struct coin_iface_t$/;"	s
coin_iface_t	../../proto/coin_proto.h	/^} coin_iface_t;$/;"	t	typeref:struct:coin_iface_t
coin_set	../../server/txcreator.h	/^typedef set<pair<CWalletTx *,unsigned int> > coin_set;$/;"	t
coin_stat_t	../../proto/coin_proto.h	/^  struct coin_stat_t {$/;"	s	struct:coin_iface_t
coinbase_maturity	../../proto/coin_proto.h	/^  uint64_t coinbase_maturity;$/;"	m	struct:coin_iface_t
coinhdr_t	../../proto/coin_proto.h	/^typedef struct coinhdr_t$/;"	s
coinhdr_t	../../proto/coin_proto.h	/^} coinhdr_t;$/;"	t	typeref:struct:coinhdr_t
color_GetMainAccountPubKey	../../proto/color_proto.cpp	/^static CPubKey color_GetMainAccountPubKey(CWallet *wallet)$/;"	f	file:
color_bind	../../proto/color_proto.cpp	/^static int color_bind(CIface *iface, void *_unused_)$/;"	f	file:
color_block_new	../../proto/color_proto.cpp	/^static int color_block_new(CIface *iface, CBlock **block_p)$/;"	f	file:
color_block_process	../../proto/color_proto.cpp	/^static int color_block_process(CIface *iface, CBlock *block)$/;"	f	file:
color_block_templ	../../proto/color_proto.cpp	/^static int color_block_templ(CIface *iface, CBlock **block_p)$/;"	f	file:
color_coin_iface	../../proto/color_proto.cpp	/^coin_iface_t color_coin_iface = {$/;"	v
color_init	../../proto/color_proto.cpp	/^static int color_init(CIface *iface, void *_unused_)$/;"	f	file:
color_msg_recv	../../proto/color_proto.cpp	/^static int color_msg_recv(CIface *iface, CNode *pnode)$/;"	f	file:
color_msg_send	../../proto/color_proto.cpp	/^static int color_msg_send(CIface *iface, CNode *pnode)$/;"	f	file:
color_opt	../../server/wallet.h	/^typedef map<int, int> color_opt;$/;"	t
color_peer_add	../../proto/color_proto.cpp	/^static int color_peer_add(CIface *iface, void *arg)$/;"	f	file:
color_peer_recv	../../proto/color_proto.cpp	/^static int color_peer_recv(CIface *iface, void *arg)$/;"	f	file:
color_term	../../proto/color_proto.cpp	/^static int color_term(CIface *iface, void *_unused_)$/;"	f	file:
color_tx_new	../../proto/color_proto.cpp	/^static int color_tx_new(CIface *iface, void *arg)$/;"	f	file:
color_tx_pool	../../proto/color_proto.cpp	/^static int color_tx_pool(CIface *iface, CTxMemPool **pool_p)$/;"	f	file:
commit_payout	../../stratum/stratum_task.c	/^static void commit_payout(int ifaceIndex, int block_height)$/;"	f	file:
commit_stamp	../../stratum/stratum.h	/^  time_t commit_stamp[MAX_COIN_IFACE];$/;"	m	struct:task_attr_t
common_words	../../server/mnemonic.cpp	/^string common_words[1626] = $/;"	v
confAvg	../../server/txfeerate.h	/^    std::vector<std::vector<double> > confAvg; \/\/ confAvg[Y][X]$/;"	m	class:TxConfirmStats
const_iterator	../../server/mruset.h	/^		typedef typename std::set<T>::const_iterator const_iterator;$/;"	t	class:mruset
contains	../../server/bloom.cpp	/^bool CBloomFilter::contains(const COutPoint& outpoint) const$/;"	f	class:CBloomFilter
contains	../../server/bloom.cpp	/^bool CBloomFilter::contains(const uint160& hash) const$/;"	f	class:CBloomFilter
contains	../../server/bloom.cpp	/^bool CBloomFilter::contains(const uint256& hash) const$/;"	f	class:CBloomFilter
contains	../../server/bloom.cpp	/^bool CBloomFilter::contains(const vector<unsigned char>& vKey) const$/;"	f	class:CBloomFilter
core_AcceptBlock	../../server/validation.cpp	/^bool core_AcceptBlock(CBlock *pblock, CBlockIndex *pindexPrev)$/;"	f
core_AcceptBlockHeader	../../server/validation.cpp	/^bool core_AcceptBlockHeader(CIface *iface, CBlockHeader& block, CBlockIndex **pindex_p)$/;"	f
core_CScript_IsPushOnly	../../server/script.cpp	/^static bool core_CScript_IsPushOnly(const CScript& script, int of = 0)$/;"	f	file:
core_CheckBlockWitness	../../server/block.cpp	/^bool core_CheckBlockWitness(CIface *iface, CBlock *pblock, CBlockIndex *pindexPrev)$/;"	f
core_CommitBlock	../../server/block.cpp	/^bool core_CommitBlock(CBlock *pblock, CBlockIndex *pindexNew)$/;"	f
core_ComputeBlockVersion	../../server/block.cpp	/^int core_ComputeBlockVersion(CIface *params, CBlockIndex *pindexPrev)$/;"	f
core_ConnectBlock	../../server/coin.cpp	/^bool core_ConnectBlock(CBlock *block, CBlockIndex* pindex)$/;"	f
core_ConnectCoinInputs	../../server/coin.cpp	/^bool core_ConnectCoinInputs(int ifaceIndex, CTransaction *tx, const CBlockIndex* pindexBlock, tx_map& mapOutput, map<uint256, CTransaction>& mapTx, int& nSigOps, int64& nFees, bool fVerifySig, bool fVerifyInputs, bool fRequireInputs, CBlock *pBlock)$/;"	f
core_ConnectExtTx	../../server/coin.cpp	/^void core_ConnectExtTx(CIface *iface, CBlock *pblock, int nHeight, CBlockIndex *pindexPrev)$/;"	f
core_DisconnectBlock	../../server/block.cpp	/^bool core_DisconnectBlock(CBlockIndex* pindex, CBlock *pblock)$/;"	f
core_DisconnectCoinInputs	../../server/coin.cpp	/^static bool core_DisconnectCoinInputs(CWallet *wallet, CTransaction& prevTx, const COutPoint& prevout)$/;"	f	file:
core_DisconnectInputs	../../server/coin.cpp	/^bool core_DisconnectInputs(int ifaceIndex, CTransaction *tx)$/;"	f
core_DisconnectWalletInputs	../../server/coin.cpp	/^static bool core_DisconnectWalletInputs(CWallet *wallet, const COutPoint& prevout)$/;"	f	file:
core_GenerateCoinbaseCommitment	../../server/block.cpp	/^bool core_GenerateCoinbaseCommitment(CIface *iface, CBlock *block, CBlockIndex *pindexPrev)$/;"	f
core_IncrementExtraNonce	../../server/block.cpp	/^void core_IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev)$/;"	f
core_ReacceptWalletTransactions	../../server/wallet.cpp	/^void core_ReacceptWalletTransactions(CWallet *wallet)$/;"	f
core_SetExtraNonce	../../server/block.cpp	/^void core_SetExtraNonce(CBlock* pblock, const char *xn_hex)$/;"	f
core_Truncate	../../server/coin.cpp	/^bool core_Truncate(CIface *iface, uint256 hash)$/;"	f
core_UnacceptWalletTransaction	../../server/wallet.cpp	/^bool core_UnacceptWalletTransaction(CIface *iface, const CTransaction& tx)$/;"	f
core_UpdateUncommittedBlockStructures	../../server/block.cpp	/^void core_UpdateUncommittedBlockStructures(CIface *iface, CBlock *block, const CBlockIndex* pindexPrev)$/;"	f
core_VerifyCoinInputs	../../server/coin.cpp	/^bool core_VerifyCoinInputs(int ifaceIndex, CTransaction& tx, unsigned int nIn, CTxOut& prev)$/;"	f
core_netmsg	../../server/netmsg.cpp	/^void core_netmsg(CNode *pfrom, string method, cbuff vRecv)$/;"	f
core_netmsg_ping	../../server/netmsg.cpp	/^void core_netmsg_ping(CNode *pfrom, cbuff vRecv)$/;"	f
count	../../server/mruset.h	/^		size_type count(const key_type& k) const { return set.count(k); }$/;"	f	class:mruset
count	../../test/CuTest.h	/^	int count;$/;"	m	struct:__anon11
cpool_RemoveTxWithInput	../../server/txmempool.cpp	/^static void cpool_RemoveTxWithInput(CPool *pool, const CTxIn& txin)$/;"	f	file:
cpp_validate_render_fractal	../../server/matrix.cpp	/^int cpp_validate_render_fractal(int ifaceIndex, char *img_path, double zoom, double span, double x_of, double y_of)$/;"	f
crc	../../blockchain/bc.h	/^  uint32_t crc;$/;"	m	struct:bc_idx_t
crc	../../proto/coin_proto.h	/^  uint32_t crc;$/;"	m	struct:coinhdr_t
create_uevent_connect_peer	../../unet/unet_event.c	/^uevent_t *create_uevent_connect_peer(int umode, shpeer_t *peer)$/;"	f
create_uevent_verify_peer	../../unet/unet_event.c	/^uevent_t *create_uevent_verify_peer(int umode, shpeer_t *peer)$/;"	f
cs	../../server/txmempool.h	/^    mutable CCriticalSection cs;$/;"	m	class:CPool
cs_KeyStore	../../server/keystore.h	/^    mutable CCriticalSection cs_KeyStore;$/;"	m	class:CKeyStore
cs_chain	../../server/coin.cpp	/^static CCriticalSection cs_chain;$/;"	v	file:
cs_db	../../server/txidx.h	/^    mutable CCriticalSection cs_db;$/;"	m	class:CDBEnv
cs_filter	../../server/net.h	/^    CCriticalSection cs_filter;$/;"	m	class:CNode
cs_inventory	../../server/net.h	/^    CCriticalSection cs_inventory;$/;"	m	class:CNode
cs_mapRequests	../../server/net.h	/^    CCriticalSection cs_mapRequests;$/;"	m	class:CNode
cs_mapWork	../../stratum/stratum_miner.cpp	/^static CCriticalSection cs_mapWork;$/;"	v	file:
cs_setBanned	../../server/net.h	/^    static CCriticalSection cs_setBanned;$/;"	m	class:CNode
cs_vRecv	../../server/net.h	/^    CCriticalSection cs_vRecv;$/;"	m	class:CNode
cs_vSend	../../server/net.h	/^    CCriticalSection cs_vSend;$/;"	m	class:CNode
cs_vcache	../../server/versionbits.cpp	/^static CCriticalSection cs_vcache;$/;"	v	file:
cs_wallet	../../server/wallet.h	/^		mutable CCriticalSection cs_wallet;$/;"	m	class:CWallet
ctype_digit	../../stratum/stratum_http.c	/^static int ctype_digit(const char *str)$/;"	f	file:
curBlockConf	../../server/txfeerate.h	/^    std::vector<std::vector<int> > curBlockConf; \/\/ curBlockConf[Y][X]$/;"	m	class:TxConfirmStats
curBlockTxCt	../../server/txfeerate.h	/^    std::vector<int> curBlockTxCt;$/;"	m	class:TxConfirmStats
curBlockVal	../../server/txfeerate.h	/^    std::vector<double> curBlockVal;$/;"	m	class:TxConfirmStats
cur_id	../../shapi/shapi.h	/^	char cur_id[256];$/;"	m	struct:shapi_t
cur_id	../../stratum/stratum.h	/^  char cur_id[256];$/;"	m	struct:user_t
curtime	../../stratum/stratum.h	/^  time_t curtime;$/;"	m	struct:task_t
dFeePriority	../../server/txmempool.h	/^    double dFeePriority;$/;"	m	class:CPoolTx
dPriority	../../server/txmempool.h	/^    double dPriority;$/;"	m	class:CPoolTx
data	../../unet/unet.h	/^  void *data;$/;"	m	struct:uevent_t
dataTypeString	../../server/txfeerate.h	/^    std::string dataTypeString;$/;"	m	class:TxConfirmStats
data_key	../../blockchain/bc.h	/^  shkey_t data_key;$/;"	m	struct:bc_t
data_map	../../blockchain/bc.h	/^  bc_map_t *data_map;$/;"	m	struct:bc_t
data_map_len	../../blockchain/bc.h	/^  size_t data_map_len;$/;"	m	struct:bc_t
dbenv	../../server/txidx.h	/^    DbEnv dbenv;$/;"	m	class:CDBEnv
decay	../../server/txfeerate.h	/^    double decay;$/;"	m	class:TxConfirmStats
def_max_block_size	../../proto/coin_proto.h	/^  uint64_t def_max_block_size;$/;"	m	struct:coin_iface_t
def_min_relay_fee	../../proto/coin_proto.h	/^  uint64_t def_min_relay_fee;$/;"	m	struct:coin_iface_t
depth	../../server/hdkey.h	/^    unsigned int depth;$/;"	m	class:HDPrivKey
depth	../../server/hdkey.h	/^    unsigned int depth;$/;"	m	class:HDPubKey
derive	../../server/hdkey.cpp	/^bool HDPrivKey::derive(HDPrivKey& privkey, cbuff pubkey, uint32_t i)$/;"	f	class:HDPrivKey
derive	../../server/hdkey.cpp	/^bool HDPubKey::derive(HDPubKey& pubkey, unsigned int i)$/;"	f	class:HDPubKey
dikey_MergeKey	../../server/dikey.cpp	/^static cbuff dikey_MergeKey(cbuff secret, cbuff tag)$/;"	f	file:
emc2_GetMainAccountPubKey	../../proto/emc2_proto.cpp	/^static CPubKey emc2_GetMainAccountPubKey(CWallet *wallet)$/;"	f	file:
emc2_bind	../../proto/emc2_proto.cpp	/^static int emc2_bind(CIface *iface, void *_unused_)$/;"	f	file:
emc2_block_new	../../proto/emc2_proto.cpp	/^static int emc2_block_new(CIface *iface, CBlock **block_p)$/;"	f	file:
emc2_block_process	../../proto/emc2_proto.cpp	/^static int emc2_block_process(CIface *iface, CBlock *block)$/;"	f	file:
emc2_block_templ	../../proto/emc2_proto.cpp	/^static int emc2_block_templ(CIface *iface, CBlock **block_p)$/;"	f	file:
emc2_coin_iface	../../proto/emc2_proto.cpp	/^coin_iface_t emc2_coin_iface = {$/;"	v
emc2_init	../../proto/emc2_proto.cpp	/^static int emc2_init(CIface *iface, void *_unused_)$/;"	f	file:
emc2_msg_recv	../../proto/emc2_proto.cpp	/^static int emc2_msg_recv(CIface *iface, CNode *pnode)$/;"	f	file:
emc2_msg_send	../../proto/emc2_proto.cpp	/^static int emc2_msg_send(CIface *iface, CNode *pnode)$/;"	f	file:
emc2_peer_add	../../proto/emc2_proto.cpp	/^static int emc2_peer_add(CIface *iface, void *arg)$/;"	f	file:
emc2_peer_recv	../../proto/emc2_proto.cpp	/^static int emc2_peer_recv(CIface *iface, void *arg)$/;"	f	file:
emc2_seed_list	../../unet/unet_seed.h	/^static char *emc2_seed_list[EMC2_SEED_LIST_SIZE] = {$/;"	v
emc2_term	../../proto/emc2_proto.cpp	/^static int emc2_term(CIface *iface, void *_unused_)$/;"	f	file:
emc2_tx_new	../../proto/emc2_proto.cpp	/^static int emc2_tx_new(CIface *iface, void *arg)$/;"	f	file:
emc2_tx_pool	../../proto/emc2_proto.cpp	/^static int emc2_tx_pool(CIface *iface, CTxMemPool **pool_p)$/;"	f	file:
empty	../../server/mruset.h	/^		bool empty() const { return set.empty(); }$/;"	f	class:mruset
empty_wallet	../../test/testcoin_coin.cpp	/^static void empty_wallet(void)$/;"	f	file:
enabled	../../proto/coin_proto.h	/^  int enabled;$/;"	m	struct:coin_iface_t
end	../../server/key.h	/^		const unsigned char* end() const { return vch.data() + size(); }$/;"	f	class:CKey
end	../../server/key.h	/^		const unsigned char* end() const { return vchPubKey.data() + size(); }$/;"	f	class:CPubKey
end	../../server/mruset.h	/^		iterator end() const { return set.end(); }$/;"	f	class:mruset
equal_sets	../../test/testcoin_coin.cpp	/^static bool equal_sets(CoinSet a, CoinSet b)$/;"	f	file:
errbuf	../../stratum/stratum_sync.c	/^static char errbuf[1024];$/;"	v	file:
error	../../server/util.cpp	/^bool error(int err_code, const char *pszFormat, ...)$/;"	f
estimateFee	../../server/txfeerate.cpp	/^CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget)$/;"	f	class:CBlockPolicyEstimator
estimatePriority	../../server/txfeerate.cpp	/^double CBlockPolicyEstimator::estimatePriority(int confTarget)$/;"	f	class:CBlockPolicyEstimator
estimateSmartFee	../../server/txfeerate.cpp	/^CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget)$/;"	f	class:CBlockPolicyEstimator
estimateSmartPriority	../../server/txfeerate.cpp	/^double CBlockPolicyEstimator::estimateSmartPriority(int confTarget, int *answerFoundAtTarget)$/;"	f	class:CBlockPolicyEstimator
event_cycle_chain	../../server/chain.cpp	/^void event_cycle_chain(int ifaceIndex)$/;"	f
event_table	../../unet/unet_event.c	/^static uevent_t event_table[UNET_MAX_EVENTS];$/;"	v	file:
exec	../../server/block.h	/^		CExecCore exec;$/;"	m	class:CTransaction
exists	../../server/txmempool.h	/^    bool exists(uint256 hash)$/;"	f	class:CTxMemPool
ext	../../blockchain/bc.h	/^  char ext[64];$/;"	m	struct:bc_map_t
external_local_discover_html	../../unet/unet_local.c	/^static int external_local_discover_html(char *serv_hostname, struct in_addr *net_addr)$/;"	f	file:
external_local_discover_raw	../../unet/unet_local.c	/^static int external_local_discover_raw(char *serv_hostname, struct in_addr *net_addr)$/;"	f	file:
extra_count	../../server/block_cmpct.h	/^		size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
fAccount	../../server/txcreator.h	/^    bool fAccount;$/;"	m	class:CTxCreator
fAutoLock	../../server/txcreator.h	/^		bool fAutoLock;$/;"	m	class:CTxCreator
fAutoParam	../../server/txcreator.h	/^		bool fAutoParam;$/;"	m	class:CTxCreator
fAvailableCreditCached	../../server/wallet.h	/^		mutable bool fAvailableCreditCached;$/;"	m	class:CWalletTx
fBad	../../server/bloom.h	/^    bool fBad;$/;"	m	class:CPartialMerkleTree
fChangeCached	../../server/wallet.h	/^		mutable bool fChangeCached;$/;"	m	class:CWalletTx
fClient	../../server/net.h	/^    bool fClient;$/;"	m	class:CNode
fCommandLine	../../server/util.cpp	/^bool fCommandLine = false;$/;"	v
fCompressedPubKey	../../server/key.h	/^    bool fCompressedPubKey;$/;"	m	class:CKey
fCreditCached	../../server/wallet.h	/^		mutable bool fCreditCached;$/;"	m	class:CWalletTx
fDaemon	../../server/util.cpp	/^bool fDaemon = false;$/;"	v
fDbEnvInit	../../server/txidx.h	/^    bool fDbEnvInit;$/;"	m	class:CDBEnv
fDebitCached	../../server/wallet.h	/^		mutable bool fDebitCached;$/;"	m	class:CWalletTx
fDebug	../../server/util.cpp	/^bool fDebug = false;$/;"	v
fDebugNet	../../server/util.cpp	/^bool fDebugNet = false;$/;"	v
fDetachDB	../../server/txidx.h	/^    bool fDetachDB;$/;"	m	class:CDBEnv
fDisconnect	../../server/net.h	/^    bool fDisconnect;$/;"	m	class:CNode
fFromMe	../../server/wallet.h	/^		char fFromMe;$/;"	m	class:CWalletTx
fGenerate	../../server/txcreator.h	/^    bool fGenerate;$/;"	m	class:CTxCreator
fGetAddr	../../server/net.h	/^    bool fGetAddr;$/;"	m	class:CNode
fHaveUPnP	../../server/main.h	/^static const int fHaveUPnP = false;$/;"	v
fHaveUPnP	../../server/main.h	/^static const int fHaveUPnP = true;$/;"	v
fHaveWitness	../../server/net.h	/^    bool fHaveWitness;$/;"	m	class:CNode
fInbound	../../server/net.h	/^    bool fInbound;$/;"	m	class:CNode
fInbound	../../server/net.h	/^    bool fInbound;$/;"	m	class:CNodeStats
fKeySet	../../server/crypter.h	/^    bool fKeySet;$/;"	m	class:CCrypter
fLocal	../../server/txmempool.h	/^    bool fLocal;$/;"	m	class:CPoolTx
fLogTimestamps	../../server/util.cpp	/^bool fLogTimestamps = false;$/;"	v
fMerkleVerified	../../server/main.h	/^    mutable bool fMerkleVerified;$/;"	m	class:CMerkleTx
fNetDebug	../../server/net.h	/^		bool fNetDebug;$/;"	m	class:CNode
fNetworkNode	../../server/net.h	/^    bool fNetworkNode;$/;"	m	class:CNode
fNoListen	../../server/util.cpp	/^bool fNoListen = false;$/;"	v
fPreferHeaders	../../server/net.h	/^    bool fPreferHeaders;$/;"	m	class:CNode
fPubSet	../../server/key.h	/^    bool fPubSet;$/;"	m	class:CKey
fReadOnly	../../server/txidx.h	/^    bool fReadOnly;$/;"	m	class:CDB
fRelayTxes	../../server/net.h	/^    bool fRelayTxes;$/;"	m	class:CNode
fReopenDebugLog	../../server/util.cpp	/^bool fReopenDebugLog = false;$/;"	v
fRequestShutdown	../../server/util.cpp	/^bool fRequestShutdown = false;$/;"	v
fServer	../../server/util.cpp	/^bool fServer = false;$/;"	v
fShutdown	../../server/util.cpp	/^bool fShutdown = false;$/;"	v
fSuccessfullyConnected	../../server/net.h	/^    bool fSuccessfullyConnected;$/;"	m	class:CNode
fTestNet	../../server/util.cpp	/^bool fTestNet = false;$/;"	v
fWitness	../../server/txcreator.h	/^    bool fWitness;$/;"	m	class:CTxCreator
f_blurb	../../stratum/stratum_http.h	/^	http_f f_blurb;$/;"	m	struct:http_t
f_content	../../stratum/stratum_http.h	/^	http_f f_content;$/;"	m	struct:http_t
failCount	../../test/CuTest.h	/^	int failCount;$/;"	m	struct:__anon11
failed	../../test/CuTest.h	/^	int failed;$/;"	m	struct:CuTest
fcntl	../../server/txfeerate.cpp	45;"	d	file:
fd	../../blockchain/bc.h	/^  volatile int fd;$/;"	m	struct:bc_map_t
fd	../../shapi/shapi.h	/^	int fd;$/;"	m	struct:shapi_t
fd	../../stratum/stratum.h	/^  int fd;$/;"	m	struct:user_t
fd	../../unet/unet.h	/^  int fd;$/;"	m	struct:uevent_t
fd	../../unet/unet.h	/^  int fd;$/;"	m	struct:unet_bind_t
feeLikely	../../server/txfeerate.h	/^    CFeeRate feeLikely, feeUnlikely;$/;"	m	class:CBlockPolicyEstimator
feeStats	../../server/txfeerate.h	/^    TxConfirmStats feeStats, priStats;$/;"	m	class:CBlockPolicyEstimator
feeUnlikely	../../server/txfeerate.h	/^    CFeeRate feeLikely, feeUnlikely;$/;"	m	class:CBlockPolicyEstimator
feeset	../../server/txfeerate.h	/^    std::set<double> feeset;$/;"	m	class:FeeFilterRounder
find	../../server/mruset.h	/^		iterator find(const key_type& k) const { return set.find(k); }$/;"	f	class:mruset
fl_timer	../../unet/unet.h	/^	int fl_timer;$/;"	m	struct:unet_bind_t
flag	../../stratum/stratum_http.h	/^	int flag;$/;"	m	struct:http_t
flag	../../stratum/stratum_http.h	/^	int flag;$/;"	m	struct:httpreq_t
flag	../../unet/unet.h	/^  int flag;$/;"	m	struct:uevent_t
flag	../../unet/unet.h	/^  int flag;$/;"	m	struct:unet_bind_t
flags	../../proto/coin_proto.h	/^  int flags;$/;"	m	struct:coin_iface_t
flags	../../server/txmempool.h	/^    int flags;$/;"	m	class:CPoolTx
flags	../../stratum/stratum.h	/^  int flags;$/;"	m	struct:task_attr_t
flags	../../stratum/stratum.h	/^  int flags;$/;"	m	struct:user_t
fn	../../server/net.h	/^    void (*fn)(void*, CDataStream&);$/;"	m	class:CRequestTracker
fulltest	../../test/testcoin_algo.cpp	/^static bool fulltest(const uint32_t *hash, const uint32_t *target)$/;"	f	file:
func	../../stratum/stratum_command.c	/^	stratum_command_f func;$/;"	m	struct:stratum_command_t	file:
function	../../test/CuTest.h	/^	TestFunction function;$/;"	m	struct:CuTest
gbt_force	../../server/versionbits.h	/^    bool gbt_force;$/;"	m	struct:BIP9DeploymentInfo
getInputCount	../../server/txcreator.h	/^		int getInputCount()$/;"	f	class:CTxCreator
get_avg_balance	../../stratum/stratum_http.c	/^static double get_avg_balance(int ifaceIndex)$/;"	f	file:
get_emc2_bind_port	../../proto/emc2_proto.cpp	/^int get_emc2_bind_port(void)$/;"	f
get_private_key_hash	../../shapi/shapi_api.cpp	/^static uint256 get_private_key_hash(CWallet *wallet, CKeyID keyId)$/;"	f	file:
get_private_key_hash	../../stratum/stratum_api.cpp	/^static uint256 get_private_key_hash(CWallet *wallet, CKeyID keyId)$/;"	f	file:
get_shapi_host	../../shapi/shapi.c	/^char *get_shapi_host(void)$/;"	f
get_shapi_port	../../shapi/shapi.c	/^int get_shapi_port(void)$/;"	f
get_stratum_miner_block	../../stratum/stratum_miner.cpp	/^CBlockIndex *get_stratum_miner_block(int ifaceIndex, uint256 hBlock)$/;"	f
get_stratum_miner_blocks	../../stratum/stratum_miner.cpp	/^vector<CBlockIndex *> get_stratum_miner_blocks(int ifaceIndex)$/;"	f
get_stratum_port	../../stratum/stratum.c	/^int get_stratum_port(int alg)$/;"	f
get_unet_table	../../unet/unet_accept.c	/^unet_table_t *get_unet_table(unsigned int sk)$/;"	f
get_user_flag_label	../../stratum/stratum_user.c	/^const char *get_user_flag_label(int flag)$/;"	f
getint	../../server/script.h	/^    int getint() const$/;"	f	class:CScriptNum
getminingroundsinfo	../../stratum/stratum_protocol.c	/^shjson_t *getminingroundsinfo(void)$/;"	f
getpagesize	../../blockchain/bc.h	43;"	d
getvch	../../server/script.h	/^    std::vector<unsigned char> getvch() const$/;"	f	class:CScriptNum
grantOutbound	../../server/net.h	/^    CSemaphoreGrant grantOutbound;$/;"	m	class:CNode
h	../../stratum/stratum_http.h	/^	http_t *h;$/;"	m	struct:httpreq_t
hCert	../../server/wallet.h	/^		uint160 hCert;$/;"	m	class:CAccount
hColor	../../server/block.h	/^		uint160 hColor;$/;"	m	class:CBlock
hColor	../../server/txmempool.h	/^		uint160 hColor;$/;"	m	class:CPoolTx
hColor	../../server/wallet.h	/^		uint160 hColor; \/* COLOR_COIN_IFACE *\/$/;"	m	class:CWalletTx
hNotaryBlock	../../server/checkpoints.h	/^		uint256 hNotaryBlock;$/;"	m	class:CCheckpoints
hNotaryHeight	../../server/checkpoints.h	/^		uint32_t hNotaryHeight;$/;"	m	class:CCheckpoints
hRef	../../server/matrix.h	/^		uint160 hRef;$/;"	m	class:CTxMatrix
hSocket	../../server/net.h	/^    unsigned int hSocket;$/;"	m	class:CNode
hash	../../blockchain/bc.h	/^  bc_hash_t hash;$/;"	m	struct:bc_idx_t
hash	../../server/block.h	/^    uint256 hash;$/;"	m	class:COutPoint
hash	../../server/net.h	/^		uint256 hash;$/;"	m	class:CValidateState
hash	../../server/txmempool.h	/^    uint256 hash;$/;"	m	class:CPoolTx
hashBlock	../../server/block.h	/^    mutable uint256 hashBlock;$/;"	m	class:CDiskTxPos
hashBlock	../../server/main.h	/^    uint256 hashBlock;$/;"	m	class:CMerkleTx
hashContinue	../../server/net.h	/^    uint256 hashContinue;$/;"	m	class:CNode
hashLastGetBlocksEnd	../../server/net.h	/^    uint256 hashLastGetBlocksEnd;$/;"	m	class:CNode
hashLastUnknownBlock	../../server/net.h	/^		uint256 hashLastUnknownBlock;$/;"	m	class:CNode
hashMerkleRoot	../../server/block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockHeader
hashMerkleRoot	../../server/block.h	/^    uint256 hashMerkleRoot;$/;"	m	class:CBlockIndex
hashNext	../../server/block.h	/^    uint256 hashNext;$/;"	m	class:CDiskBlockIndex
hashPrev	../../server/block.h	/^    uint256 hashPrev;$/;"	m	class:CDiskBlockIndex
hashPrevBlock	../../server/block.h	/^    uint256 hashPrevBlock;$/;"	m	class:CBlockHeader
hashTx	../../server/block.h	/^    mutable uint256 hashTx;$/;"	m	class:CDiskTxPos
hdKeypath	../../server/key.h	/^		std::string hdKeypath; \/\/optional HD\/bip32 keypath$/;"	m	class:CKeyMetadata
hdMasterKeyID	../../server/key.h	/^		CKeyID hdMasterKeyID; \/\/id of the HD masterkey used to derive this key$/;"	m	class:CKeyMetadata
hdr	../../blockchain/bc.h	/^  bc_hdr_t *hdr;$/;"	m	struct:bc_map_t
hdr_magic	../../proto/coin_proto.h	/^  unsigned char hdr_magic[4];$/;"	m	struct:coin_iface_t
header	../../server/block_cmpct.h	/^		CBlockHeader header;$/;"	m	class:CBlockHeaderAndShortTxIDs
header	../../server/block_cmpct.h	/^		CBlockHeader header;$/;"	m	class:PartiallyDownloadedBlock
header	../../server/bloom.h	/^    CBlockHeader header;$/;"	m	class:CMerkleBlock
height	../../stratum/stratum.h	/^  int height;$/;"	m	struct:user_t
height	../../stratum/stratum.h	/^  long height;$/;"	m	struct:task_t
http_f	../../stratum/stratum_http.h	/^typedef void (*http_f)(struct httpreq_t *);$/;"	t
http_t	../../stratum/stratum_http.h	/^typedef struct http_t {$/;"	s
http_t	../../stratum/stratum_http.h	/^} http_t;$/;"	t	typeref:struct:http_t
http_table	../../stratum/stratum_http.c	/^http_t http_table[] = {$/;"	v
httpreq_t	../../stratum/stratum_http.h	/^typedef struct httpreq_t {$/;"	s
httpreq_t	../../stratum/stratum_http.h	/^} httpreq_t;$/;"	t	typeref:struct:httpreq_t
i	../../server/wallet.h	/^		int i;$/;"	m	class:COutput
id	../../server/versionbits.cpp	/^      const DeploymentPos id;$/;"	m	class:__anon9::VersionBitsConditionChecker	file:
idx_map	../../blockchain/bc.h	/^  bc_map_t idx_map;$/;"	m	struct:bc_t
ifaceIndex	../../server/block.h	/^    mutable int ifaceIndex;$/;"	m	class:CBlockHeader
ifaceIndex	../../server/chain.h	/^  int ifaceIndex;$/;"	m	struct:ChainOp
ifaceIndex	../../server/checkpoints.h	/^		int ifaceIndex;$/;"	m	class:CCheckpoints
ifaceIndex	../../server/coinaddr.h	/^    int ifaceIndex;$/;"	m	class:CCoinAddr
ifaceIndex	../../server/net.h	/^		int ifaceIndex;$/;"	m	class:CValidateState
ifaceIndex	../../server/net.h	/^    int ifaceIndex;$/;"	m	class:CBloomFilter
ifaceIndex	../../server/net.h	/^    mutable int ifaceIndex;$/;"	m	class:CNode
ifaceIndex	../../server/txfeerate.h	/^    int ifaceIndex;$/;"	m	class:CBlockPolicyEstimator
ifaceIndex	../../server/txidx.h	/^    mutable int ifaceIndex;$/;"	m	class:CTxDB
ifaceIndex	../../server/txmempool.h	/^    int ifaceIndex;$/;"	m	class:CPool
ifaceIndex	../../server/txsignature.h	/^		int ifaceIndex;$/;"	m	class:CSignature
ifaceIndex	../../server/wallet.h	/^		int ifaceIndex;$/;"	m	class:CWallet
ifaceIndex	../../stratum/stratum.h	/^  int ifaceIndex;$/;"	m	struct:task_attr_t
ifaceIndex	../../stratum/stratum.h	/^  int ifaceIndex;$/;"	m	struct:task_t
ifaceIndex	../../stratum/stratum.h	/^  int ifaceIndex;$/;"	m	struct:user_t
index	../../server/block_cmpct.h	/^	uint16_t index;$/;"	m	struct:PrefilledTransaction
index	../../server/hdkey.h	/^    unsigned int index;$/;"	m	class:HDPrivKey
index	../../server/hdkey.h	/^    unsigned int index;$/;"	m	class:HDPubKey
index_of	../../server/mnemonic.cpp	/^size_t index_of(const string& word)$/;"	f
indexes	../../server/block_cmpct.h	/^		std::vector<uint16_t> indexes;$/;"	m	class:BlockTransactionsRequest
insert	../../server/bloom.cpp	/^void CBloomFilter::insert(const COutPoint& outpoint)$/;"	f	class:CBloomFilter
insert	../../server/bloom.cpp	/^void CBloomFilter::insert(const uint160& hash)$/;"	f	class:CBloomFilter
insert	../../server/bloom.cpp	/^void CBloomFilter::insert(const uint256& hash)$/;"	f	class:CBloomFilter
insert	../../server/bloom.cpp	/^void CBloomFilter::insert(const vector<unsigned char>& vKey)$/;"	f	class:CBloomFilter
insert	../../server/mruset.h	/^		std::pair<iterator, bool> insert(const key_type& x)$/;"	f	class:mruset
instance_of_cinit	../../server/util.cpp	/^instance_of_cinit;$/;"	v	typeref:class:CInit
int64	../../proto/types.h	/^typedef long long  int64;$/;"	t
inval	../../server/txmempool.h	/^    set<uint256> inval;$/;"	m	class:CPool
ipaddr_index	../../unet/unet_local.c	/^static int ipaddr_index;$/;"	v	file:
ipaddr_table	../../unet/unet_local.c	/^static char *ipaddr_table[MAX_IPADDR_TABLE_SIZE];$/;"	v	file:
isAutoLock	../../server/txcreator.h	/^		bool isAutoLock()$/;"	f	class:CTxCreator
isAutoParam	../../server/txcreator.h	/^		bool isAutoParam()$/;"	f	class:CTxCreator
isEmpty	../../server/net.h	/^    bool isEmpty;$/;"	m	class:CBloomFilter
isExtOp	../../server/script.cpp	/^bool isExtOp(opcodetype opcode)$/;"	f
isFeeDataPoint	../../server/txfeerate.cpp	/^bool CBlockPolicyEstimator::isFeeDataPoint(const CFeeRate &fee, double pri)$/;"	f	class:CBlockPolicyEstimator
isFlag	../../server/block.h	/^    bool isFlag(unsigned int flag) const$/;"	f	class:CTransactionCore
isFull	../../server/net.h	/^    bool isFull;$/;"	m	class:CBloomFilter
isLocal	../../server/txmempool.h	/^    bool isLocal()$/;"	f	class:CPoolTx
isPriDataPoint	../../server/txfeerate.cpp	/^bool CBlockPolicyEstimator::isPriDataPoint(const CFeeRate &fee, double pri)$/;"	f	class:CBlockPolicyEstimator
is_spring_loc	../../server/spring.c	/^int is_spring_loc(double lat, double lon)$/;"	f
is_stratum_blake2s_task_pending	../../stratum/stratum_blake2s.c	/^static int is_stratum_blake2s_task_pending(int *ret_iface)$/;"	f	file:
is_stratum_groestl_task_pending	../../stratum/stratum_groestl.c	/^static int is_stratum_groestl_task_pending(int *ret_iface)$/;"	f	file:
is_stratum_keccak_task_pending	../../stratum/stratum_keccak.c	/^static int is_stratum_keccak_task_pending(int *ret_iface)$/;"	f	file:
is_stratum_miner_algo	../../stratum/stratum_miner.cpp	/^int is_stratum_miner_algo(int ifaceIndex, int nAlg)$/;"	f
is_stratum_qubit_task_pending	../../stratum/stratum_qubit.c	/^static int is_stratum_qubit_task_pending(int *ret_iface)$/;"	f	file:
is_stratum_sha256d_task_pending	../../stratum/stratum_sha256d.c	/^static int is_stratum_sha256d_task_pending(int *ret_iface)$/;"	f	file:
is_stratum_skein_task_pending	../../stratum/stratum_skein.c	/^static int is_stratum_skein_task_pending(int *ret_iface)$/;"	f	file:
is_stratum_task_pending	../../stratum/stratum_task.c	/^int is_stratum_task_pending(int *ret_iface)$/;"	f
is_stratum_x11_task_pending	../../stratum/stratum_x11.c	/^static int is_stratum_x11_task_pending(int *ret_iface)$/;"	f	file:
iterator	../../server/mruset.h	/^		typedef typename std::set<T>::iterator iterator;$/;"	t	class:mruset
join	../../server/util.cpp	/^string join(const vector<string>& vec, const char* delim)$/;"	f
jrnl	../../blockchain/bc.h	/^  uint32_t jrnl;$/;"	m	struct:bc_idx_t
jumpBuf	../../test/CuTest.h	/^	jmp_buf *jumpBuf;$/;"	m	struct:CuTest
key	../../server/dikey.h	/^	DIKey key;$/;"	m	struct:DIExtKey
key	../../server/eckey.h	/^	ECKey key;$/;"	m	struct:ECExtKey
key_error	../../server/key.h	/^    explicit key_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:key_error
key_error	../../server/key.h	/^class key_error : public std::runtime_error$/;"	c
key_type	../../server/mruset.h	/^		typedef T key_type;$/;"	t	class:mruset
keystore	../../server/script.cpp	/^    const CKeyStore *keystore;$/;"	m	class:CKeyStoreIsMineVisitor	file:
lastRollingFeeUpdate	../../server/txfeerate.h	/^    mutable int64_t lastRollingFeeUpdate;$/;"	m	class:CBlockPolicyEstimator
last_block_height	../../stratum/stratum_task.c	/^static uint64_t last_block_height[MAX_COIN_IFACE];$/;"	v	file:
last_payout_hash	../../stratum/stratum_task.c	/^static char last_payout_hash[MAX_COIN_IFACE][256];$/;"	v	file:
lat	../../server/spring.c	/^  shnum_t lat;$/;"	m	struct:spring_bits	file:
lat1	../../server/spring.c	/^  unsigned int lat1, lat2;$/;"	m	struct:spring_bits	file:
lat2	../../server/spring.c	/^  unsigned int lat1, lat2;$/;"	m	struct:spring_bits	file:
length	../../server/script.h	/^	unsigned int length;$/;"	m	struct:WitnessUnknown
length	../../test/CuTest.h	/^	int length;$/;"	m	struct:__anon10
list	../../test/CuTest.h	/^	CuTest* list[MAX_TEST_CASES];$/;"	m	struct:__anon11
lk	../../blockchain/bc.h	/^	bclock_t lk;$/;"	m	struct:bc_t
locking_callback	../../server/util.cpp	/^void locking_callback(int mode, int i, const char* file, int line)$/;"	f
lon	../../server/spring.c	/^  shnum_t lon;$/;"	m	struct:spring_bits	file:
lon1	../../server/spring.c	/^  unsigned int lon1, lon2;$/;"	m	struct:spring_bits	file:
lon2	../../server/spring.c	/^  unsigned int lon1, lon2;$/;"	m	struct:spring_bits	file:
lookup	../../server/txmempool.h	/^    CTransaction& lookup(uint256 hash)$/;"	f	class:CTxMemPool
ltc_GetMainAccountPubKey	../../proto/ltc_proto.cpp	/^static CPubKey ltc_GetMainAccountPubKey(CWallet *wallet)$/;"	f	file:
ltc_bind	../../proto/ltc_proto.cpp	/^static int ltc_bind(CIface *iface, void *_unused_)$/;"	f	file:
ltc_block_new	../../proto/ltc_proto.cpp	/^static int ltc_block_new(CIface *iface, CBlock **block_p)$/;"	f	file:
ltc_block_process	../../proto/ltc_proto.cpp	/^static int ltc_block_process(CIface *iface, CBlock *block)$/;"	f	file:
ltc_block_templ	../../proto/ltc_proto.cpp	/^static int ltc_block_templ(CIface *iface, CBlock **block_p)$/;"	f	file:
ltc_coin_iface	../../proto/ltc_proto.cpp	/^coin_iface_t ltc_coin_iface = {$/;"	v
ltc_init	../../proto/ltc_proto.cpp	/^static int ltc_init(CIface *iface, void *_unused_)$/;"	f	file:
ltc_msg_recv	../../proto/ltc_proto.cpp	/^static int ltc_msg_recv(CIface *iface, CNode *pnode)$/;"	f	file:
ltc_msg_send	../../proto/ltc_proto.cpp	/^static int ltc_msg_send(CIface *iface, CNode *pnode)$/;"	f	file:
ltc_peer_add	../../proto/ltc_proto.cpp	/^static int ltc_peer_add(CIface *iface, void *arg)$/;"	f	file:
ltc_peer_recv	../../proto/ltc_proto.cpp	/^static int ltc_peer_recv(CIface *iface, void *arg)$/;"	f	file:
ltc_term	../../proto/ltc_proto.cpp	/^static int ltc_term(CIface *iface, void *_unused_)$/;"	f	file:
ltc_tx_new	../../proto/ltc_proto.cpp	/^static int ltc_tx_new(CIface *iface, void *arg)$/;"	f	file:
ltc_tx_pool	../../proto/ltc_proto.cpp	/^static int ltc_tx_pool(CIface *iface, CTxMemPool **pool_p)$/;"	f	file:
m_value	../../server/script.h	/^    int64_t m_value;$/;"	m	class:CScriptNum
magic	../../blockchain/bc.h	/^  uint32_t magic;$/;"	m	struct:bc_hdr_t
magic	../../proto/coin_proto.h	/^  unsigned char magic[4];$/;"	m	struct:coinhdr_t
main	../../deprec/shcoind_tool.cpp	/^int main(int argc, char *argv[])$/;"	f
main	../../test/test_shcoind.c	/^int main(int argc, char *argv[])$/;"	f
mapAddrCache	../../server/wallet.h	/^		map<string, CAccountCache *> mapAddrCache;$/;"	m	class:CWallet
mapAddressBook	../../server/wallet.h	/^		std::map<CTxDestination, std::string> mapAddressBook;$/;"	m	class:CWallet
mapAlias	../../server/wallet.h	/^		mutable std::map<std::string, uint256> mapAlias;$/;"	m	class:CWallet
mapAliasArch	../../server/wallet.h	/^		mutable std::map<uint256, std::string> mapAliasArch;$/;"	m	class:CWallet
mapAskFor	../../server/net.h	/^    std::multimap<int64, CInv> mapAskFor;$/;"	m	class:CNode
mapAsset	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapAsset;$/;"	m	class:CWallet
mapCert	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapCert;$/;"	m	class:CWallet
mapCertArch	../../server/wallet.h	/^		mutable std::map<uint256, uint160> mapCertArch;$/;"	m	class:CWallet
mapCertLabel	../../server/wallet.h	/^		mutable std::map<std::string, uint160> mapCertLabel;$/;"	m	class:CWallet
mapChannel	../../server/wallet.h	/^		mutable std::map<uint160, CTransaction> mapChannel;$/;"	m	class:CWallet
mapChannelRedeem	../../server/wallet.h	/^		mutable std::map<uint160, CTransaction> mapChannelRedeem;$/;"	m	class:CWallet
mapChannelSpent	../../server/wallet.h	/^		mutable std::map<uint160, CTransaction> mapChannelSpent;$/;"	m	class:CWallet
mapCheckpoints	../../server/checkpoints.h	/^		MapCheckpoints mapCheckpoints;$/;"	m	class:CCheckpoints
mapCoinHash	../../server/coin.cpp	/^static vector<uint160> mapCoinHash;$/;"	v	file:
mapColor	../../server/wallet.h	/^		std::map<uint160, uint256> mapColor;$/;"	m	class:CWallet
mapColorHead	../../server/wallet.h	/^		std::map<uint256, uint160> mapColorHead;$/;"	m	class:CWallet
mapColorPool	../../server/wallet.h	/^		std::map<uint160, uint256> mapColorPool;$/;"	m	class:CWallet
mapContext	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapContext;$/;"	m	class:CWallet
mapContextArch	../../server/wallet.h	/^		mutable std::map<uint256, uint160> mapContextArch;$/;"	m	class:CWallet
mapDIKeys	../../server/keystore.h	/^    DIKeyMap mapDIKeys;$/;"	m	class:CBasicKeyStore
mapDb	../../server/txidx.h	/^    std::map<std::string, Db*> mapDb;$/;"	m	class:CDBEnv
mapECKeys	../../server/keystore.h	/^    ECKeyMap mapECKeys;$/;"	m	class:CBasicKeyStore
mapExec	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapExec;$/;"	m	class:CWallet
mapExecCall	../../server/wallet.h	/^		mutable std::map< uint160, vector<uint160> > mapExecCall;$/;"	m	class:CWallet
mapExecCallPending	../../server/wallet.h	/^		mutable std::map< uint160, vector<uint160> > mapExecCallPending;$/;"	m	class:CWallet
mapExecCheckpoint	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapExecCheckpoint; $/;"	m	class:CWallet
mapExecLabel	../../server/wallet.h	/^		mutable std::map<string, uint160> mapExecLabel;$/;"	m	class:CWallet
mapFileUseCount	../../server/txidx.h	/^    std::map<std::string, int> mapFileUseCount;$/;"	m	class:CDBEnv
mapIdent	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapIdent;$/;"	m	class:CWallet
mapInputs	../../server/txmempool.h	/^    tx_cache mapInputs;$/;"	m	class:CPoolTx
mapInputs	../../server/txsignature.h	/^		tx_cache mapInputs;$/;"	m	class:CSignature
mapLicense	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapLicense;$/;"	m	class:CWallet
mapMemPoolTxs	../../server/txfeerate.h	/^    std::map<uint256, TxStatsInfo> mapMemPoolTxs;$/;"	m	class:CBlockPolicyEstimator
mapMultiArgs	../../server/util.cpp	/^map<string, vector<string> > mapMultiArgs;$/;"	v
mapNextTx	../../server/txmempool.h	/^    std::map<COutPoint, CInPoint> mapNextTx;$/;"	m	class:CPoolTx
mapOffer	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapOffer;$/;"	m	class:CWallet
mapOfferAccept	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapOfferAccept;$/;"	m	class:CWallet
mapOfferAcceptArch	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapOfferAcceptArch;$/;"	m	class:CWallet
mapOfferArch	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapOfferArch;$/;"	m	class:CWallet
mapOfferGenerate	../../server/wallet.h	/^		mutable std::map<uint160, uint256> mapOfferGenerate;$/;"	m	class:CWallet
mapParam	../../server/wallet.h	/^		mutable std::vector<CParam> mapParam;$/;"	m	class:CWallet
mapParamArch	../../server/wallet.h	/^		mutable std::vector<uint256> mapParamArch;$/;"	m	class:CWallet
mapRequestCount	../../server/wallet.h	/^		std::map<uint256, int> mapRequestCount;$/;"	m	class:CWallet
mapRequests	../../server/net.h	/^    std::map<uint256, CRequestTracker> mapRequests;$/;"	m	class:CNode
mapScripts	../../server/keystore.h	/^    ScriptMap mapScripts;$/;"	m	class:CBasicKeyStore
mapValidateNotary	../../server/wallet.h	/^		map<uint256, CPubKey> mapValidateNotary;$/;"	m	class:CWallet
mapValidateTx	../../server/wallet.h	/^		vector<uint256> mapValidateTx;$/;"	m	class:CWallet
mapValue	../../server/wallet.h	/^		std::map<std::string, std::string> mapValue;$/;"	m	class:CWalletTx
mapWallet	../../server/wallet.h	/^		std::map<uint256, CWalletTx> mapWallet;$/;"	m	class:CWallet
mapWalletArch	../../server/wallet.h	/^		std::map<uint256, CWalletTx> mapWalletArch;$/;"	m	class:CWallet
mapWork	../../stratum/stratum_miner.cpp	/^static work_map mapWork;$/;"	v	file:
map_table	../../server/netmsg.cpp	/^netmsg_map map_table[MAX_COIN_IFACE];$/;"	v
mapval_t	../../server/wallet.h	/^typedef std::map<std::string, std::string> mapval_t;$/;"	t
masterKeyID	../../server/wallet.h	/^		CKeyID masterKeyID; $/;"	m	class:CAccount
matrix	../../server/block.h	/^    CTxMatrix matrix;$/;"	m	class:CTransaction
matrixValidate	../../server/wallet.h	/^		CTxMatrix matrixValidate;$/;"	m	class:CWallet
matrix_GetMinConsensus	../../server/matrix.cpp	/^static unsigned int matrix_GetMinConsensus(int ifaceIndex)$/;"	f	file:
matrix_GetNotaryLockTime	../../server/matrix.cpp	/^static uint32_t matrix_GetNotaryLockTime(CIface *iface)$/;"	f	file:
max	../../server/chain.h	/^  unsigned int max;$/;"	m	struct:ChainOp
max_block_size	../../proto/coin_proto.h	/^  uint64_t max_block_size;$/;"	m	struct:coin_iface_t
max_free_tx_size	../../proto/coin_proto.h	/^  uint64_t max_free_tx_size;$/;"	m	struct:coin_iface_t
max_money	../../proto/coin_proto.h	/^  uint64_t max_money;$/;"	m	struct:coin_iface_t
max_orphan_tx	../../proto/coin_proto.h	/^  uint64_t max_orphan_tx;$/;"	m	struct:coin_iface_t
max_script_element_size	../../proto/coin_proto.h	/^	uint64_t max_script_element_size;$/;"	m	struct:coin_iface_t
max_script_size	../../proto/coin_proto.h	/^	uint64_t max_script_size;$/;"	m	struct:coin_iface_t
max_sigops	../../proto/coin_proto.h	/^  uint64_t max_sigops;$/;"	m	struct:coin_iface_t
max_size	../../server/mruset.h	/^		size_type max_size() const { return nMaxSize; }$/;"	f	class:mruset
max_size	../../server/mruset.h	/^		size_type max_size(size_type s)$/;"	f	class:mruset
max_tx_fee	../../proto/coin_proto.h	/^  uint64_t max_tx_fee;$/;"	m	struct:coin_iface_t
max_tx_weight	../../proto/coin_proto.h	/^  uint64_t max_tx_weight;$/;"	m	struct:coin_iface_t
mempool	../../proto/color_proto.cpp	/^COLOR_CTxMemPool COLORBlock::mempool;$/;"	m	class:COLORBlock	file:
mempool	../../proto/emc2_proto.cpp	/^EMC2_CTxMemPool EMC2Block::mempool;$/;"	m	class:EMC2Block	file:
mempool	../../proto/ltc_proto.cpp	/^LTC_CTxMemPool LTCBlock::mempool;$/;"	m	class:LTCBlock	file:
mempool	../../proto/shc_proto.cpp	/^SHC_CTxMemPool SHCBlock::mempool;$/;"	m	class:SHCBlock	file:
mempool	../../proto/test_proto.cpp	/^TEST_CTxMemPool TESTBlock::mempool;$/;"	m	class:TESTBlock	file:
mempool	../../proto/testnet_proto.cpp	/^TESTNET_CTxMemPool TESTNETBlock::mempool;$/;"	m	class:TESTNETBlock	file:
mempool_count	../../server/block_cmpct.h	/^		size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
merge_idle_worker	../../stratum/stratum_user.c	/^void merge_idle_worker(user_t *user)$/;"	f
merkle	../../stratum/stratum.h	/^  char **merkle;$/;"	m	struct:task_t
merkle_len	../../stratum/stratum.h	/^  size_t merkle_len;$/;"	m	struct:task_t
message	../../test/CuTest.h	/^	const char* message;$/;"	m	struct:CuTest
method	../../stratum/stratum_command.c	/^	const char *method;$/;"	m	struct:stratum_command_t	file:
mime	../../stratum/stratum_http.h	/^	char *mime;$/;"	m	struct:http_t
minReasonableRelayFee	../../server/txfeerate.h	/^    CFeeRate minReasonableRelayFee;$/;"	m	class:CBlockPolicyEstimator
minTrackedFee	../../server/txfeerate.h	/^    CFeeRate minTrackedFee;    \/\/!< Passed to constructor to avoid dependency on main$/;"	m	class:CBlockPolicyEstimator
minTrackedPriority	../../server/txfeerate.h	/^    double minTrackedPriority; \/\/!< Set to AllowFreeThreshold$/;"	m	class:CBlockPolicyEstimator
min_input	../../proto/coin_proto.h	/^  uint64_t min_input;$/;"	m	struct:coin_iface_t
min_relay_fee	../../proto/coin_proto.h	/^  uint64_t min_relay_fee;$/;"	m	struct:coin_iface_t
min_tx_fee	../../proto/coin_proto.h	/^  uint64_t min_tx_fee;$/;"	m	struct:coin_iface_t
mine_stamp	../../stratum/stratum.h	/^  time_t mine_stamp[MAX_COIN_IFACE];$/;"	m	struct:task_attr_t
mode	../../server/chain.h	/^  int mode;$/;"	m	struct:ChainOp
mode	../../unet/unet.h	/^  int mode;$/;"	m	struct:uevent_t
mruset	../../server/mruset.h	/^		mruset(size_type nMaxSizeIn = 0) { nMaxSize = nMaxSizeIn; }$/;"	f	class:mruset
mruset	../../server/mruset.h	/^template <typename T> class mruset$/;"	c
mysetint64	../../test/testcoin_bignum.cpp	/^static void mysetint64(CBigNum& num, int64 n)$/;"	f	file:
n	../../server/block.h	/^    unsigned int n;$/;"	m	class:CInPoint
n	../../server/block.h	/^    unsigned int n;$/;"	m	class:COutPoint
nAccessTime	../../server/coinaddr.h	/^		int64_t nAccessTime; $/;"	m	class:CCoinAddr
nAccountingEntryNumber	../../server/walletdb.cpp	/^static uint64 nAccountingEntryNumber = 0;$/;"	v	file:
nAvailableCreditCached	../../server/wallet.h	/^		mutable int64 nAvailableCreditCached;$/;"	m	class:CWalletTx
nBatchValue	../../server/txcreator.h	/^    int64 nBatchValue;$/;"	m	class:CTxBatchCreator
nBestSeenHeight	../../server/txfeerate.h	/^    unsigned int nBestSeenHeight;$/;"	m	class:CBlockPolicyEstimator
nBits	../../server/block.h	/^    unsigned int nBits;$/;"	m	class:CBlockHeader
nBits	../../server/block.h	/^    unsigned int nBits;$/;"	m	class:CBlockIndex
nBlockPos	../../server/block.h	/^    unsigned int nBlockPos;$/;"	m	class:CDiskTxPos
nChainInputValue	../../server/txmempool.h	/^    int64 nChainInputValue;$/;"	m	class:CPoolTx
nChainTx	../../server/block.h	/^		unsigned int nChainTx;$/;"	m	class:CBlockIndex
nChangeCached	../../server/wallet.h	/^		mutable int64 nChangeCached;$/;"	m	class:CWalletTx
nChild	../../server/dikey.h	/^	uint32_t nChild;$/;"	m	struct:DIExtKey
nChild	../../server/dikey.h	/^	uint32_t nChild;$/;"	m	struct:DIExtPubKey
nChild	../../server/eckey.h	/^	uint32_t nChild;$/;"	m	struct:ECExtKey
nChild	../../server/eckey.h	/^	uint32_t nChild;$/;"	m	struct:ECExtPubKey
nChild	../../test/testcoin_bip32.cpp	/^    unsigned int nChild;$/;"	m	struct:TestDerivation	file:
nChild	../../test/testcoin_sip33.cpp	/^    unsigned int nChild;$/;"	m	struct:sip33_TestDerivation	file:
nCoinPerK	../../server/txfeerate.h	/^    CAmount nCoinPerK; \/\/ unit is satoshis-per-1,000-bytes$/;"	m	class:CFeeRate
nCreateTime	../../server/coinaddr.h	/^		int64_t nCreateTime; $/;"	m	class:CCoinAddr
nCreateTime	../../server/key.h	/^		int64_t nCreateTime; \/\/ 0 means unknown$/;"	m	class:CKeyMetadata
nCredit	../../server/txcreator.h	/^    int64 nCredit; $/;"	m	class:CTxCreator
nCreditCached	../../server/wallet.h	/^		mutable int64 nCreditCached;$/;"	m	class:CWalletTx
nCreditDebit	../../server/wallet.h	/^		int64 nCreditDebit;$/;"	m	class:CAccountingEntry
nCurrentBlockFile	../../server/main.cpp	/^static unsigned int nCurrentBlockFile = 1;$/;"	v	file:
nDebit	../../server/txcreator.h	/^    int64 nDebit;$/;"	m	class:CTxCreator
nDebitCached	../../server/wallet.h	/^		mutable int64 nDebitCached;$/;"	m	class:CWalletTx
nDefaultMaxNumSize	../../server/script.h	/^    static const size_t nDefaultMaxNumSize = 4;$/;"	m	class:CScriptNum
nDepth	../../server/dikey.h	/^	uint8_t nDepth;$/;"	m	struct:DIExtKey
nDepth	../../server/dikey.h	/^	uint8_t nDepth;$/;"	m	struct:DIExtPubKey
nDepth	../../server/eckey.h	/^	uint8_t nDepth;$/;"	m	struct:ECExtKey
nDepth	../../server/eckey.h	/^	uint8_t nDepth;$/;"	m	struct:ECExtPubKey
nDepth	../../server/txcreator.h	/^    unsigned int nDepth;$/;"	m	class:CTxCreator
nDepth	../../server/wallet.h	/^		int nDepth;$/;"	m	class:COutput
nDerivationMethod	../../server/crypter.h	/^    unsigned int nDerivationMethod;$/;"	m	class:CMasterKey
nDeriveIterations	../../server/crypter.h	/^    unsigned int nDeriveIterations;$/;"	m	class:CMasterKey
nError	../../server/net.h	/^		unsigned int nError;$/;"	m	class:CValidateState
nExternalDIChainCounter	../../server/wallet.h	/^		uint32_t nExternalDIChainCounter;$/;"	m	class:CAccount
nExternalECChainCounter	../../server/wallet.h	/^		uint32_t nExternalECChainCounter;$/;"	m	class:CAccount
nFee	../../server/txmempool.h	/^    int64 nFee;$/;"	m	class:CPoolTx
nFeeDepth	../../server/txcreator.h	/^		int nFeeDepth;$/;"	m	class:CTxCreator
nFile	../../server/block.h	/^    unsigned int nFile;$/;"	m	class:CDiskTxPos
nFlag	../../server/block.h	/^    int nFlag;$/;"	m	class:CTransactionCore
nFlag	../../server/key.h	/^		unsigned int nFlag;$/;"	m	class:CKeyMetadata
nFlags	../../server/net.h	/^    unsigned char nFlags;$/;"	m	class:CBloomFilter
nHashFuncs	../../server/net.h	/^    unsigned int nHashFuncs;$/;"	m	class:CBloomFilter
nHashType	../../server/txsignature.h	/^		int nHashType; $/;"	m	class:CSignature
nHeaderStart	../../server/net.h	/^    int nHeaderStart;$/;"	m	class:CNode
nHeight	../../server/block.h	/^    int nHeight;$/;"	m	class:CBlockIndex
nHeight	../../server/matrix.h	/^		unsigned int nHeight; $/;"	m	class:CTxMatrix
nHeight	../../server/txmempool.h	/^    unsigned int nHeight;$/;"	m	class:CPoolTx
nIndex	../../server/main.h	/^    int nIndex;$/;"	m	class:CMerkleTx
nInternalDIChainCounter	../../server/wallet.h	/^		uint32_t nInternalDIChainCounter;$/;"	m	class:CAccount
nInternalECChainCounter	../../server/wallet.h	/^		uint32_t nInternalECChainCounter;$/;"	m	class:CAccount
nLastBlockSize	../../server/main.cpp	/^uint64 nLastBlockSize = 0;$/;"	v
nLastBlockTx	../../server/main.cpp	/^uint64 nLastBlockTx = 0;$/;"	v
nLastRecv	../../server/net.h	/^    int64 nLastRecv;$/;"	m	class:CNode
nLastRecv	../../server/net.h	/^    int64 nLastRecv;$/;"	m	class:CNodeStats
nLastSend	../../server/net.h	/^    int64 nLastSend;$/;"	m	class:CNode
nLastSend	../../server/net.h	/^    int64 nLastSend;$/;"	m	class:CNodeStats
nLastSendEmpty	../../server/net.h	/^    int64 nLastSendEmpty;$/;"	m	class:CNode
nLockTime	../../server/block.h	/^    unsigned int nLockTime;$/;"	m	class:CTransactionCore
nMaxFee	../../server/txcreator.h	/^    int64 nMaxFee;$/;"	m	class:CTxBatchCreator
nMaxNumSize	../../server/script.cpp	/^static const size_t nMaxNumSize = 4;$/;"	v	file:
nMaxSigOp	../../server/txcreator.h	/^    int64 nMaxSigOp;$/;"	m	class:CTxBatchCreator
nMaxSize	../../server/mruset.h	/^		size_type nMaxSize;$/;"	m	class:mruset
nMaxTxSize	../../server/txcreator.h	/^    int64 nMaxTxSize;$/;"	m	class:CTxBatchCreator
nMedianTimeSpan	../../server/block.h	/^    enum { nMedianTimeSpan=11 };$/;"	e	enum:CBlockIndex::__anon1
nMessageStart	../../server/net.h	/^    unsigned int nMessageStart;$/;"	m	class:CNode
nMinDiskSpace	../../server/main.h	/^static const uint64 nMinDiskSpace = 52428800;$/;"	v
nMinFee	../../server/net.h	/^    int64 nMinFee;$/;"	m	class:CNode
nMinFee	../../server/txcreator.h	/^    int64 nMinFee;$/;"	m	class:CTxBatchCreator
nMinFee	../../server/txcreator.h	/^    int64 nMinFee;$/;"	m	class:CTxCreator
nMinFee	../../server/txmempool.h	/^    int64 nMinFee;$/;"	m	class:CPoolTx
nMinerConfirmationWindow	../../proto/coin_proto.h	/^  uint32_t nMinerConfirmationWindow;$/;"	m	struct:coin_iface_t
nMisbehavior	../../server/net.h	/^    int nMisbehavior;$/;"	m	class:CNode
nMisbehavior	../../server/net.h	/^    int nMisbehavior;$/;"	m	class:CNodeStats
nMockTime	../../server/util.cpp	/^static int64 nMockTime = 0;  \/\/ For unit testing$/;"	v	file:
nNonce	../../server/block.h	/^    unsigned int nNonce;$/;"	m	class:CBlockHeader
nNonce	../../server/block.h	/^    unsigned int nNonce;$/;"	m	class:CBlockIndex
nNonceCount	../../server/chain.cpp	/^static uint64_t nNonceCount;$/;"	v	file:
nOutValue	../../server/txcreator.h	/^    int64 nOutValue;$/;"	m	class:CTxBatchCreator
nRefCount	../../server/net.h	/^    int nRefCount;$/;"	m	class:CNode
nReleaseTime	../../server/net.h	/^    int64 nReleaseTime;$/;"	m	class:CNode
nReleaseTime	../../server/net.h	/^    int64 nReleaseTime;$/;"	m	class:CNodeStats
nReserveIndex	../../server/txcreator.h	/^    int64 nReserveIndex;$/;"	m	class:CTxCreator
nRuleChangeActivationThreshold	../../proto/coin_proto.h	/^  uint32_t nRuleChangeActivationThreshold;$/;"	m	struct:coin_iface_t
nScanHeight	../../server/wallet.h	/^		unsigned int nScanHeight;$/;"	m	class:CWallet
nSequence	../../server/block.h	/^    unsigned int nSequence;$/;"	m	class:CTxIn
nServices	../../server/net.h	/^    uint64 nServices;$/;"	m	class:CNode
nServices	../../server/net.h	/^    uint64 nServices;$/;"	m	class:CNodeStats
nSigOpCost	../../server/txmempool.h	/^    int64 nSigOpCost;$/;"	m	class:CPoolTx
nStartTime	../../proto/coin_proto.h	/^  int64_t nStartTime;$/;"	m	struct:BIP9Deployment
nStartingHeight	../../server/net.h	/^    int nStartingHeight;$/;"	m	class:CNode
nStartingHeight	../../server/net.h	/^    int nStartingHeight;$/;"	m	class:CNodeStats
nStatus	../../server/block.h	/^    int nStatus;$/;"	m	class:CBlockIndex
nTargetSpacing	../../proto/test_proto.cpp	/^int64 TESTBlock::nTargetSpacing = 60; \/* one minute *\/$/;"	m	class:TESTBlock	file:
nTargetTimespan	../../proto/test_proto.cpp	/^int64 TESTBlock::nTargetTimespan = 7200; \/* two hours *\/$/;"	m	class:TESTBlock	file:
nTime	../../server/block.h	/^    unsigned int nTime;$/;"	m	class:CBlockHeader
nTime	../../server/block.h	/^    unsigned int nTime;$/;"	m	class:CBlockIndex
nTime	../../server/wallet.h	/^		int64 nTime;$/;"	m	class:CAccountingEntry
nTimeBestReceived	../../proto/color_proto.cpp	/^int64 COLORBlock::nTimeBestReceived;$/;"	m	class:COLORBlock	file:
nTimeBestReceived	../../proto/emc2_proto.cpp	/^int64 EMC2Block::nTimeBestReceived;$/;"	m	class:EMC2Block	file:
nTimeBestReceived	../../proto/ltc_proto.cpp	/^int64 LTCBlock::nTimeBestReceived;$/;"	m	class:LTCBlock	file:
nTimeBestReceived	../../proto/shc_proto.cpp	/^int64 SHCBlock::nTimeBestReceived;$/;"	m	class:SHCBlock	file:
nTimeBestReceived	../../proto/test_proto.cpp	/^int64 TESTBlock::nTimeBestReceived;$/;"	m	class:TESTBlock	file:
nTimeBestReceived	../../proto/testnet_proto.cpp	/^int64 TESTNETBlock::nTimeBestReceived;$/;"	m	class:TESTNETBlock	file:
nTimeConnected	../../server/net.h	/^    int64 nTimeConnected;$/;"	m	class:CNode
nTimeConnected	../../server/net.h	/^    int64 nTimeConnected;$/;"	m	class:CNodeStats
nTimeCreated	../../server/wallet.h	/^		int64 nTimeCreated;$/;"	m	class:CWalletKey
nTimeExpires	../../server/wallet.h	/^		int64 nTimeExpires;$/;"	m	class:CWalletKey
nTimeOffset	../../server/util.cpp	/^static int64 nTimeOffset = 0;$/;"	v	file:
nTimeReceived	../../server/wallet.h	/^		unsigned int nTimeReceived;  \/\/ time received by this node$/;"	m	class:CWalletTx
nTimeUnused	../../server/wallet.h	/^		unsigned int nTimeUnused; \/\/ time committed to a block.$/;"	m	class:CWalletTx
nTimeout	../../proto/coin_proto.h	/^  int64_t nTimeout;$/;"	m	struct:BIP9Deployment
nTransactionFee	../../server/main.cpp	/^int64 nTransactionFee = 0;$/;"	v
nTransactions	../../server/bloom.h	/^    unsigned int nTransactions;$/;"	m	class:CPartialMerkleTree
nTrust	../../server/net.h	/^		int nTrust;$/;"	m	class:CValidateState
nTweak	../../server/net.h	/^    unsigned int nTweak;$/;"	m	class:CBloomFilter
nTxIn	../../server/txsignature.h	/^		int nTxIn;$/;"	m	class:CSignature
nTxModSize	../../server/txmempool.h	/^    int64 nTxModSize;$/;"	m	class:CPoolTx
nTxPos	../../server/block.h	/^    unsigned int nTxPos;$/;"	m	class:CDiskTxPos
nTxSize	../../server/txmempool.h	/^    int64 nTxSize;$/;"	m	class:CPoolTx
nType	../../server/coinaddr.h	/^		int nType; \/* ADDR_BASE58 | ADDR_BECH32 *\/$/;"	m	class:CCoinAddr
nType	../../server/matrix.h	/^		unsigned int nType;$/;"	m	class:CTxMatrix
nValidateHeight	../../server/wallet.h	/^		unsigned int nValidateHeight;$/;"	m	class:CWallet
nValue	../../server/block.h	/^		int64 nValue;$/;"	m	class:CTxOut
nValueRet	../../test/testcoin_coin.cpp	/^static int64 nValueRet;$/;"	v	file:
nVersion	../../server/block.h	/^        nVersion = this->nVersion;$/;"	m	class:CBlockHeader
nVersion	../../server/block.h	/^    int nVersion;$/;"	m	class:CBlockHeader
nVersion	../../server/block.h	/^    int nVersion;$/;"	m	class:CBlockIndex
nVersion	../../server/net.h	/^    int nVersion;$/;"	m	class:CNode
nVersion	../../server/net.h	/^    int nVersion;$/;"	m	class:CNodeStats
nWalletDBUpdated	../../server/txidx.cpp	/^unsigned int nWalletDBUpdated;$/;"	v
nWeight	../../server/txmempool.h	/^    int64 nWeight;$/;"	m	class:CPoolTx
name	../../blockchain/bc.h	/^  char name[BC_MAX_NAME_LENGTH];$/;"	m	struct:bc_t
name	../../proto/coin_proto.h	/^  char name[MAX_SHARE_NAME_LENGTH];$/;"	m	struct:coin_iface_t
name	../../server/versionbits.h	/^    const char *name;$/;"	m	struct:BIP9DeploymentInfo
name	../../test/CuTest.h	/^	char* name;$/;"	m	struct:CuTest
nbits	../../stratum/stratum.h	/^  char nbits[32];$/;"	m	struct:task_t
net_invalid	../../proto/coin_proto.h	/^  time_t net_invalid;$/;"	m	struct:coin_iface_t
net_valid	../../proto/coin_proto.h	/^  time_t net_valid;$/;"	m	struct:coin_iface_t
netid	../../stratum/stratum.h	/^  shkey_t netid;$/;"	m	struct:user_t
netmsg_f	../../server/netmsg.cpp	/^typedef void (*netmsg_f)(CNode *, cbuff);$/;"	t	file:
netmsg_map	../../server/netmsg.cpp	/^typedef std::map<std:;string, netmsg_f> netmsg_map;$/;"	t	file:
next	../../shapi/shapi.h	/^	struct shapi_t *next;$/;"	m	struct:shapi_t	typeref:struct:shapi_t::shapi_t
next	../../stratum/stratum.h	/^  struct task_t *next;$/;"	m	struct:task_t	typeref:struct:task_t::task_t
next	../../stratum/stratum.h	/^  struct user_t *next;$/;"	m	struct:user_t	typeref:struct:user_t::user_t
nonce	../../server/block_cmpct.h	/^		uint64_t nonce;$/;"	m	class:CBlockHeaderAndShortTxIDs
of	../../blockchain/bc.h	/^  bcsize_t of; $/;"	m	struct:bc_hdr_t
of	../../blockchain/bc.h	/^  bcsize_t of;$/;"	m	struct:bc_idx_t
offer	../../server/block.h	/^    COffer offer;$/;"	m	class:CTransaction
oldUnconfTxs	../../server/txfeerate.h	/^    std::vector<int> oldUnconfTxs;$/;"	m	class:TxConfirmStats
op_accept	../../unet/unet.h	/^  unet_addr_op op_accept;$/;"	m	struct:unet_bind_t
op_bind	../../proto/coin_proto.h	/^  coin_f op_bind;$/;"	m	struct:coin_iface_t
op_block_new	../../proto/coin_proto.h	/^  coin_f op_block_new;$/;"	m	struct:coin_iface_t
op_block_process	../../proto/coin_proto.h	/^  coin_f op_block_process;$/;"	m	struct:coin_iface_t
op_block_templ	../../proto/coin_proto.h	/^  coin_f op_block_templ;$/;"	m	struct:coin_iface_t
op_close	../../unet/unet.h	/^  unet_addr_op op_close;$/;"	m	struct:unet_bind_t
op_init	../../proto/coin_proto.h	/^  coin_f op_init;$/;"	m	struct:coin_iface_t
op_msg_recv	../../proto/coin_proto.h	/^  coin_f op_msg_recv;$/;"	m	struct:coin_iface_t
op_msg_send	../../proto/coin_proto.h	/^  coin_f op_msg_send;$/;"	m	struct:coin_iface_t
op_peer_add	../../proto/coin_proto.h	/^  coin_f op_peer_add;$/;"	m	struct:coin_iface_t
op_peer_recv	../../proto/coin_proto.h	/^  coin_f op_peer_recv;$/;"	m	struct:coin_iface_t
op_term	../../proto/coin_proto.h	/^  coin_f op_term;$/;"	m	struct:coin_iface_t
op_timer	../../unet/unet.h	/^  unet_op op_timer;$/;"	m	struct:unet_bind_t
op_tx_new	../../proto/coin_proto.h	/^  coin_f op_tx_new;$/;"	m	struct:coin_iface_t
op_tx_pool	../../proto/coin_proto.h	/^  coin_f op_tx_pool;$/;"	m	struct:coin_iface_t
opcodetype	../../server/script.h	/^enum opcodetype$/;"	g
operator !=	../../server/block.h	/^		friend bool operator!=(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator !=	../../server/block.h	/^    friend bool operator!=(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator !=	../../server/block.h	/^    friend bool operator!=(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator !=	../../server/block.h	/^    friend bool operator!=(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator !=	../../server/block.h	/^    friend bool operator!=(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator !=	../../server/block.h	/^    friend bool operator!=(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator !=	../../server/hdkey.h	/^    friend bool operator!=(const HDMasterPrivKey &a, const HDMasterPrivKey &b) {$/;"	f	class:HDMasterPrivKey
operator !=	../../server/hdkey.h	/^    friend bool operator!=(const HDPrivKey &a, const HDPrivKey &b) {$/;"	f	class:HDPrivKey
operator !=	../../server/hdkey.h	/^    friend bool operator!=(const HDPubKey &a, const HDPubKey &b) {$/;"	f	class:HDPubKey
operator !=	../../server/key.h	/^		friend bool operator!=(const CPubKey &a, const CPubKey &b) { return a.vchPubKey != b.vchPubKey; }$/;"	f	class:CPubKey
operator !=	../../server/matrix.h	/^		friend bool operator!=(const CTxMatrix& a, const CTxMatrix& b)$/;"	f	class:CTxMatrix
operator !=	../../server/script.h	/^    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }$/;"	f	class:CScriptNum
operator !=	../../server/script.h	/^    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }$/;"	f	class:CScriptNum
operator &	../../server/script.h	/^    inline CScriptNum operator&(   const CScriptNum& rhs) const { return operator&(rhs.m_value);   }$/;"	f	class:CScriptNum
operator &	../../server/script.h	/^    inline CScriptNum operator&(   const int64_t& rhs)    const { return CScriptNum(m_value & rhs);}$/;"	f	class:CScriptNum
operator &=	../../server/script.h	/^    inline CScriptNum& operator&=( const CScriptNum& rhs)       { return operator&=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator &=	../../server/script.h	/^    inline CScriptNum& operator&=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ()	../../server/block.h	/^    bool operator()(CBlockIndex *pa, CBlockIndex *pb) {$/;"	f	struct:CBlockIndexWorkComparator
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const CKeyID &id) const         { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const CNoDestination &id) const { return false; }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessUnknown &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV0KeyHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV0ScriptHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV14KeyHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/coinaddr.h	/^bool inline CCoinAddrVisitor::operator()(const WitnessV14ScriptHash &id) const { return addr->Set(id); }$/;"	f	class:CCoinAddrVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const CKeyID &keyID) const { return keystore->HaveKey(keyID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const CKeyID& keyID) const $/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const CNoDestination &dest) const { return false; }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const CNoDestination& dest) const $/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const CScriptID& scriptID) const $/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessUnknown& id) const { return false; }$/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessUnknown& id) const {$/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV0KeyHash& id) const $/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV0KeyHash& keyId) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV0ScriptHash& id) const {$/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV0ScriptHash& scriptID) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV14KeyHash& id) const $/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV14KeyHash& keyId) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV14ScriptHash& id) const {$/;"	f	class:CScriptVisitor
operator ()	../../server/script.cpp	/^    bool operator()(const WitnessV14ScriptHash& scriptID) const $/;"	f	class:CKeyStoreIsMineVisitor
operator ()	../../server/wallet.cpp	/^	bool operator()(const pair<int64, pair<const CWalletTx*, unsigned int> >& t1,$/;"	f	struct:CompareValueOnly
operator ()	../../test/testcoin_bip32.cpp	/^    TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {$/;"	f	struct:TestVector
operator ()	../../test/testcoin_sip33.cpp	/^    sip33_TestVector& operator()(std::string pubkey, unsigned int nChild) {$/;"	f	struct:sip33_TestVector
operator +	../../server/script.h	/^    friend CScript operator+(const CScript& a, const CScript& b)$/;"	f	class:CScript
operator +	../../server/script.h	/^    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }$/;"	f	class:CScriptNum
operator +	../../server/script.h	/^    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}$/;"	f	class:CScriptNum
operator +=	../../server/script.h	/^    CScript& operator+=(const CScript& b)$/;"	f	class:CScript
operator +=	../../server/script.h	/^    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator +=	../../server/script.h	/^    inline CScriptNum& operator+=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator +=	../../server/txfeerate.h	/^    CFeeRate& operator+=(const CFeeRate& a) { nCoinPerK += a.nCoinPerK; return *this; }$/;"	f	class:CFeeRate
operator -	../../server/script.h	/^    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }$/;"	f	class:CScriptNum
operator -	../../server/script.h	/^    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}$/;"	f	class:CScriptNum
operator -	../../server/script.h	/^    inline CScriptNum operator-()                         const$/;"	f	class:CScriptNum
operator -=	../../server/script.h	/^    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }$/;"	f	class:CScriptNum
operator -=	../../server/script.h	/^    inline CScriptNum& operator-=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator <	../../server/base58.h	/^		bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }$/;"	f	class:CBase58Data
operator <	../../server/block.h	/^    friend bool operator<(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator <	../../server/key.h	/^		friend bool operator<(const CPubKey &a, const CPubKey &b) { return a.vchPubKey < b.vchPubKey; }$/;"	f	class:CPubKey
operator <	../../server/mruset.h	/^		bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }$/;"	f	class:mruset
operator <	../../server/protocol.cpp	/^bool operator<(const CInv& a, const CInv& b)$/;"	f
operator <	../../server/script.h	/^	friend bool operator<(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator <	../../server/script.h	/^    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator <	../../server/script.h	/^    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }$/;"	f	class:CScriptNum
operator <	../../server/script.h	/^    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }$/;"	f	class:CScriptNum
operator <	../../server/txfeerate.h	/^    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK < b.nCoinPerK; }$/;"	f	class:CFeeRate
operator <	../../server/txmempool.h	/^    bool operator < (const CPoolTx& ptx) const$/;"	f	class:CPoolTx
operator <<	../../server/script.h	/^    CScript& operator<<(const CBigNum& b)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(const CPubKey& key)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(const CScript& b)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(const CScriptNum& b)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(const std::vector<unsigned char>& b)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(const uint160& b)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(const uint256& b)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(int b)            { return push_int64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(int64 b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(long b)           { return push_int64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(opcodetype opcode)$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(short b)          { return push_int64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(signed char b)    { return push_int64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(uint64 b)         { return push_uint64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(unsigned char b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(unsigned int b)   { return push_uint64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(unsigned long b)  { return push_uint64(b); }$/;"	f	class:CScript
operator <<	../../server/script.h	/^    CScript& operator<<(unsigned short b) { return push_uint64(b); }$/;"	f	class:CScript
operator <=	../../server/base58.h	/^		bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }$/;"	f	class:CBase58Data
operator <=	../../server/script.h	/^    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }$/;"	f	class:CScriptNum
operator <=	../../server/script.h	/^    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }$/;"	f	class:CScriptNum
operator <=	../../server/txfeerate.h	/^    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK <= b.nCoinPerK; }$/;"	f	class:CFeeRate
operator =	../../server/dikey.h	/^    DIKey& operator=(const DIKey& b)$/;"	f	class:DIKey
operator =	../../server/eckey.h	/^    ECKey& operator=(const ECKey& b)$/;"	f	class:ECKey
operator =	../../server/hdkey.h	/^    HDMasterPrivKey operator=(const HDMasterPrivKey &b)$/;"	f	class:HDMasterPrivKey
operator =	../../server/hdkey.h	/^    HDPrivKey operator=(const HDPrivKey &b)$/;"	f	class:HDPrivKey
operator =	../../server/hdkey.h	/^    HDPubKey operator=(const HDPubKey &b)$/;"	f	class:HDPubKey
operator =	../../server/key.h	/^    CKey& operator=(const CKey& b)$/;"	f	class:CKey
operator =	../../server/matrix.h	/^		CTxMatrix operator=(const CTxMatrix &b)$/;"	f	class:CTxMatrix
operator =	../../server/script.h	/^    inline CScriptNum& operator=( const int64_t& rhs)$/;"	f	class:CScriptNum
operator ==	../../server/account.h	/^		friend bool operator==(const CAccountCache& a, const CAccountCache& b)$/;"	f	class:CAccountCache
operator ==	../../server/base58.h	/^		bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }$/;"	f	class:CBase58Data
operator ==	../../server/block.h	/^		friend bool operator==(const CTxOut& a, const CTxOut& b)$/;"	f	class:CTxOut
operator ==	../../server/block.h	/^    friend bool operator==(const CBlockHeader& a, const CBlockHeader& b)$/;"	f	class:CBlockHeader
operator ==	../../server/block.h	/^    friend bool operator==(const CDiskTxPos& a, const CDiskTxPos& b)$/;"	f	class:CDiskTxPos
operator ==	../../server/block.h	/^    friend bool operator==(const COutPoint& a, const COutPoint& b)$/;"	f	class:COutPoint
operator ==	../../server/block.h	/^    friend bool operator==(const CTransaction& a, const CTransaction& b)$/;"	f	class:CTransaction
operator ==	../../server/block.h	/^    friend bool operator==(const CTransactionCore& a, const CTransactionCore& b)$/;"	f	class:CTransactionCore
operator ==	../../server/block.h	/^    friend bool operator==(const CTxIn& a, const CTxIn& b)$/;"	f	class:CTxIn
operator ==	../../server/block.h	/^    friend bool operator==(const CTxIndex& a, const CTxIndex& b)$/;"	f	class:CTxIndex
operator ==	../../server/dikey.h	/^		friend bool operator==(const DIKey &a, const DIKey &b) { return a.vch == b.vch; }$/;"	f	class:DIKey
operator ==	../../server/dikey.h	/^	friend bool operator==(const DIExtKey& a, const DIExtKey& b)$/;"	f	struct:DIExtKey
operator ==	../../server/dikey.h	/^	friend bool operator==(const DIExtPubKey &a, const DIExtPubKey &b)$/;"	f	struct:DIExtPubKey
operator ==	../../server/eckey.h	/^		friend bool operator==(const ECKey &a, const ECKey &b) { return a.vch == b.vch; }$/;"	f	class:ECKey
operator ==	../../server/eckey.h	/^	friend bool operator==(const ECExtKey& a, const ECExtKey& b)$/;"	f	struct:ECExtKey
operator ==	../../server/eckey.h	/^	friend bool operator==(const ECExtPubKey &a, const ECExtPubKey &b)$/;"	f	struct:ECExtPubKey
operator ==	../../server/hdkey.h	/^    friend bool operator==(const HDMasterPrivKey &a, const HDMasterPrivKey &b) $/;"	f	class:HDMasterPrivKey
operator ==	../../server/hdkey.h	/^    friend bool operator==(const HDPrivKey &a, const HDPrivKey &b) $/;"	f	class:HDPrivKey
operator ==	../../server/hdkey.h	/^    friend bool operator==(const HDPubKey &a, const HDPubKey &b) $/;"	f	class:HDPubKey
operator ==	../../server/key.h	/^		friend bool operator==(const CPubKey &a, const CPubKey &b) { return a.vchPubKey == b.vchPubKey; }$/;"	f	class:CPubKey
operator ==	../../server/matrix.h	/^			friend bool operator==(const CTxMatrix& a, const CTxMatrix& b)$/;"	f	class:CTxMatrix
operator ==	../../server/mruset.h	/^		bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }$/;"	f	class:mruset
operator ==	../../server/mruset.h	/^		bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }$/;"	f	class:mruset
operator ==	../../server/script.h	/^	friend bool operator==(const WitnessUnknown& w1, const WitnessUnknown& w2) {$/;"	f	struct:WitnessUnknown
operator ==	../../server/script.h	/^    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }$/;"	f	class:CNoDestination
operator ==	../../server/script.h	/^    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }$/;"	f	class:CScriptNum
operator ==	../../server/script.h	/^    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }$/;"	f	class:CScriptNum
operator ==	../../server/shlib.h	/^    friend bool operator==(const SHPeer &a, const SHPeer &b)$/;"	f	class:SHPeer
operator ==	../../server/shlib.h	/^    friend bool operator==(const SHSig &a, const SHSig &b)$/;"	f	class:SHSig
operator ==	../../server/txfeerate.h	/^    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK == b.nCoinPerK; }$/;"	f	class:CFeeRate
operator ==	../../server/txmempool.h	/^    bool operator == (const CPoolTx& b) const$/;"	f	class:CPoolTx
operator >	../../server/base58.h	/^		bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }$/;"	f	class:CBase58Data
operator >	../../server/script.h	/^    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }$/;"	f	class:CScriptNum
operator >	../../server/script.h	/^    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }$/;"	f	class:CScriptNum
operator >	../../server/txfeerate.h	/^    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK > b.nCoinPerK; }$/;"	f	class:CFeeRate
operator >	../../server/txmempool.h	/^    bool operator > (const CPoolTx& ptx) const$/;"	f	class:CPoolTx
operator >=	../../server/base58.h	/^		bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }$/;"	f	class:CBase58Data
operator >=	../../server/script.h	/^    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }$/;"	f	class:CScriptNum
operator >=	../../server/script.h	/^    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }$/;"	f	class:CScriptNum
operator >=	../../server/txfeerate.h	/^    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nCoinPerK >= b.nCoinPerK; }$/;"	f	class:CFeeRate
originPeer	../../server/block.h	/^    mutable CNode *originPeer;$/;"	m	class:CBlock
overflow	../../server/txmempool.h	/^    pool_map overflow;$/;"	m	class:CPool
pSHA256InitState	../../server/main.cpp	/^static const unsigned int pSHA256InitState[8] =$/;"	v	file:
page	../../stratum/stratum_http.h	/^	char *page;$/;"	m	struct:http_t
param	../../server/block.h	/^		CParam param; $/;"	m	class:CTransaction
param1	../../server/net.h	/^    void* param1;$/;"	m	class:CRequestTracker
params_Bech32HRP	../../server/coinaddr.cpp	/^static bool params_Bech32HRP(int ifaceIndex, string strName)$/;"	f	file:
pass	../../stratum/stratum.h	/^  char pass[256];$/;"	m	struct:user_t
path	../../server/chain.h	/^  char path[PATH_MAX+1];$/;"	m	struct:ChainOp
pathEnv	../../server/txidx.h	/^    boost::filesystem::path pathEnv;$/;"	m	class:CDBEnv
pdb	../../server/txidx.h	/^    Db* pdb;$/;"	m	class:CDB
peer	../../server/net.h	/^		CNode *peer;$/;"	m	class:CValidateState
peer	../../server/shlib.h	/^    shpeer_t peer;$/;"	m	class:SHPeer
peer	../../stratum/stratum.h	/^  scrypt_peer peer;$/;"	m	struct:user_t
peer	../../unet/unet.h	/^  shpeer_t peer;$/;"	m	struct:unet_bind_t
peer	../../unet/unet_peerdb.c	/^  shpeer_t peer;$/;"	m	struct:peerdb_t	file:
peer_db	../../unet/unet.h	/^  bc_t *peer_db;$/;"	m	struct:unet_bind_t
peerdb_del	../../unet/unet_peerdb.c	/^static void peerdb_del(int mode, shkey_t *key)$/;"	f	file:
peerdb_key_hash	../../unet/unet_peerdb.c	/^static void peerdb_key_hash(shkey_t *key, bc_hash_t *hash_p)$/;"	f	file:
peerdb_list_free	../../unet/unet_peerdb.c	/^static void peerdb_list_free(peerdb_t **p_list)$/;"	f	file:
peerdb_mode_label	../../unet/unet_peerdb.c	/^char *peerdb_mode_label(int mode)$/;"	f
peerdb_new	../../unet/unet_peerdb.c	/^static peerdb_t *peerdb_new(int mode, shpeer_t *peer)$/;"	f	file:
peerdb_new_host	../../unet/unet_peerdb.c	/^static peerdb_t *peerdb_new_host(int mode, char *hostname, unsigned int port)$/;"	f	file:
peerdb_open	../../unet/unet_peerdb.c	/^static bc_t *peerdb_open(int mode)$/;"	f	file:
peerdb_read	../../unet/unet_peerdb.c	/^static int peerdb_read(bc_t *db, shkey_t *key, peerdb_t **peer_p)$/;"	f	file:
peerdb_read_index	../../unet/unet_peerdb.c	/^static int peerdb_read_index(bc_t *db, int pos, peerdb_t **peer_p)$/;"	f	file:
peerdb_sort	../../unet/unet_peerdb.c	/^static void peerdb_sort(peerdb_t **ret_list, size_t ret_size, int fact)$/;"	f	file:
peerdb_sort_cmp	../../unet/unet_peerdb.c	/^static int peerdb_sort_cmp(void *a_p, void *b_p)$/;"	f	file:
peerdb_sort_revcmp	../../unet/unet_peerdb.c	/^static int peerdb_sort_revcmp(void *a_p, void *b_p)$/;"	f	file:
peerdb_t	../../unet/unet_peerdb.c	/^typedef struct peerdb_t$/;"	s	file:
peerdb_t	../../unet/unet_peerdb.c	/^} peerdb_t;$/;"	t	typeref:struct:peerdb_t	file:
peerdb_track_list	../../unet/unet_peerdb.c	/^static peerdb_t **peerdb_track_list(int mode, int ret_max)$/;"	f	file:
peerdb_track_scan	../../unet/unet_peerdb.c	/^static peerdb_t **peerdb_track_scan(bc_t *db, int max)$/;"	f	file:
peerdb_write	../../unet/unet_peerdb.c	/^static int peerdb_write(bc_t *db, peerdb_t *p)$/;"	f	file:
pend_block_height	../../stratum/stratum_blake2s.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_groestl.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_keccak.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_qubit.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_sha256d.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_skein.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_task.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pend_block_height	../../stratum/stratum_x11.c	/^static uint64_t pend_block_height[MAX_COIN_IFACE];$/;"	v	file:
pending	../../server/txmempool.h	/^    pool_map pending;$/;"	m	class:CPool
pfilter	../../server/net.h	/^    CBloomFilter *pfilter;$/;"	m	class:CNode
phashBlock	../../server/block.h	/^    const uint256* phashBlock;$/;"	m	class:CBlockIndex
phexdigit	../../server/util.cpp	/^static signed char phexdigit[256] =$/;"	v	file:
pindexBestHeader	../../server/wallet.h	/^		CBlockIndex *pindexBestHeader;$/;"	m	class:CWallet
pindexBestHeaderSend	../../server/net.h	/^		CBlockIndex *pindexBestHeaderSend;$/;"	m	class:CNode
pindexBestKnownBlock	../../server/net.h	/^		CBlockIndex *pindexBestKnownBlock;$/;"	m	class:CNode
pindexGenesisBlock	../../proto/color_proto.cpp	/^CBlockIndex *COLORBlock::pindexGenesisBlock = NULL;$/;"	m	class:COLORBlock	file:
pindexGenesisBlock	../../proto/emc2_proto.cpp	/^CBlockIndex *EMC2Block::pindexGenesisBlock = NULL;$/;"	m	class:EMC2Block	file:
pindexGenesisBlock	../../proto/ltc_proto.cpp	/^CBlockIndex *LTCBlock::pindexGenesisBlock = NULL;$/;"	m	class:LTCBlock	file:
pindexGenesisBlock	../../proto/shc_proto.cpp	/^CBlockIndex *SHCBlock::pindexGenesisBlock = NULL;$/;"	m	class:SHCBlock	file:
pindexGenesisBlock	../../proto/test_proto.cpp	/^CBlockIndex *TESTBlock::pindexGenesisBlock = NULL;$/;"	m	class:TESTBlock	file:
pindexGenesisBlock	../../proto/testnet_proto.cpp	/^CBlockIndex *TESTNETBlock::pindexGenesisBlock = NULL;$/;"	m	class:TESTNETBlock	file:
pindexLastBlock	../../server/net.h	/^		CBlockIndex *pindexLastBlock;$/;"	m	class:CNode
pindexLastGetBlocksBegin	../../server/net.h	/^    CBlockIndex* pindexLastGetBlocksBegin;$/;"	m	class:CNode
pindexLastHeader	../../server/net.h	/^		CBlockIndex *pindexLastHeader;$/;"	m	class:CNode
pkey	../../server/shlib.h	/^    mutable shkey_t pkey;$/;"	m	class:SHPeer
pnext	../../server/block.h	/^    CBlockIndex* pnext;$/;"	m	class:CBlockIndex
pool	../../server/block_cmpct.h	/^		CTxMemPool* pool;$/;"	m	class:PartiallyDownloadedBlock
pool_map	../../server/txmempool.h	/^typedef map<const uint256, CPoolTx> pool_map;$/;"	t
popstack	../../server/script.cpp	/^static inline void popstack(vector<valtype>& stack)$/;"	f	file:
port	../../proto/coin_proto.h	/^  int port;$/;"	m	struct:coin_iface_t
port	../../unet/unet.h	/^  int port;$/;"	m	struct:unet_bind_t
pos	../../server/block.h	/^    CDiskTxPos pos;$/;"	m	class:CTxIndex
pos	../../server/chain.h	/^  int pos;$/;"	m	struct:ChainOp
ppmutexOpenSSL	../../server/util.cpp	/^static CCriticalSection** ppmutexOpenSSL;$/;"	v	file:
pprev	../../server/block.h	/^    CBlockIndex* pprev;$/;"	m	class:CBlockIndex
ppszTypeName	../../server/protocol.cpp	/^static const char* ppszTypeName[] =$/;"	v	file:
prefilled_count	../../server/block_cmpct.h	/^		size_t prefilled_count = 0, mempool_count = 0, extra_count = 0;$/;"	m	class:PartiallyDownloadedBlock
prefilledtxn	../../server/block_cmpct.h	/^		std::vector<PrefilledTransaction> prefilledtxn;$/;"	m	class:CBlockHeaderAndShortTxIDs
prev_hash	../../stratum/stratum.h	/^  char prev_hash[256];$/;"	m	struct:task_t
prevout	../../server/block.h	/^    COutPoint prevout;$/;"	m	class:CTxIn
priLikely	../../server/txfeerate.h	/^    double priLikely, priUnlikely;$/;"	m	class:CBlockPolicyEstimator
priStats	../../server/txfeerate.h	/^    TxConfirmStats feeStats, priStats;$/;"	m	class:CBlockPolicyEstimator
priUnlikely	../../server/txfeerate.h	/^    double priLikely, priUnlikely;$/;"	m	class:CBlockPolicyEstimator
primary_ipaddr	../../unet/unet_local.c	/^static char primary_ipaddr[MAXHOSTNAMELEN+1];$/;"	v	file:
print	../../server/block.h	/^    void print() const$/;"	f	class:CBlockIndex
print	../../server/block.h	/^    void print() const$/;"	f	class:CDiskBlockIndex
print	../../server/block.h	/^    void print() const$/;"	f	class:CDiskTxPos
print	../../server/block.h	/^    void print() const$/;"	f	class:COutPoint
print	../../server/block.h	/^    void print() const$/;"	f	class:CTxIn
print	../../server/block.h	/^    void print()$/;"	f	class:CBlock
print	../../server/block.h	/^    void print(int ifaceIndex)$/;"	f	class:CTransaction
print	../../server/protocol.cpp	/^void CInv::print() const$/;"	f	class:CInv
print	../../server/script.h	/^    void print() const$/;"	f	class:CScript
print	../../server/wallet.h	/^		void print() const$/;"	f	class:COutput
processBlock	../../server/txfeerate.cpp	/^void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,$/;"	f	class:CBlockPolicyEstimator
processBlockTx	../../server/txfeerate.cpp	/^void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, CPoolTx& entry)$/;"	f	class:CBlockPolicyEstimator
processTransaction	../../server/txfeerate.cpp	/^void CBlockPolicyEstimator::processTransaction(CPoolTx& entry, bool fCurrentEstimate)$/;"	f	class:CBlockPolicyEstimator
program	../../server/script.h	/^	unsigned char program[40];$/;"	m	struct:WitnessUnknown
proto_ver	../../proto/coin_proto.h	/^  int proto_ver;$/;"	m	struct:coin_iface_t
prv	../../test/testcoin_bip32.cpp	/^    std::string prv;$/;"	m	struct:TestDerivation	file:
pskip	../../server/block.h	/^    CBlockIndex *pskip;$/;"	m	class:CBlockIndex
pszBase58	../../server/base58.cpp	/^static const char* pszBase58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";$/;"	v	file:
ptx	../../server/block.h	/^    CTransaction* ptx;$/;"	m	class:CInPoint
pub	../../test/testcoin_bip32.cpp	/^    std::string pub;$/;"	m	struct:TestDerivation	file:
pubkey	../../server/dikey.h	/^	CPubKey pubkey;$/;"	m	struct:DIExtPubKey
pubkey	../../server/eckey.h	/^	CPubKey pubkey;$/;"	m	struct:ECExtPubKey
pubkey	../../test/testcoin_sip33.cpp	/^    std::string pubkey;$/;"	m	struct:sip33_TestDerivation	file:
push_int64	../../server/script.h	/^    CScript& push_int64(int64 n)$/;"	f	class:CScript
push_uint64	../../server/script.h	/^    CScript& push_uint64(uint64 n)$/;"	f	class:CScript
pwallet	../../server/wallet.h	/^		CWallet *pwallet;$/;"	m	class:CWalletTx
pwalletdbEncryption	../../server/wallet.h	/^		CWalletDB *pwalletdbEncryption;$/;"	m	class:CWallet
queryHashes	../../server/txmempool.h	/^    void queryHashes(std::vector<uint256>& vtxid)$/;"	f	class:CPool
queue	../../server/mruset.h	/^		std::deque<T> queue;$/;"	m	class:mruset
ran	../../test/CuTest.h	/^	int ran;$/;"	m	struct:CuTest
raw	../../blockchain/bc.h	/^  uint8_t *raw;$/;"	m	struct:bc_map_t
real_strprintf	../../server/util.cpp	/^string real_strprintf(const std::string &format, int dummy, ...)$/;"	f
reject	../../server/block.cpp	/^void CBlockHeader::reject(CValidateState *state, int err_code, string err_text)$/;"	f	class:CBlockHeader
reject	../../server/block.cpp	/^void CTransaction::reject(CValidateState *state, int err_code, string err_text)$/;"	f	class:CTransaction
removeTx	../../server/txfeerate.cpp	/^void CBlockPolicyEstimator::removeTx(uint256 hash)$/;"	f	class:CBlockPolicyEstimator
removeTx	../../server/txfeerate.cpp	/^void TxConfirmStats::removeTx(unsigned int entryHeight, unsigned int nBestSeenHeight, unsigned int bucketindex)$/;"	f	class:TxConfirmStats
reward_height	../../stratum/stratum.h	/^  uint64_t reward_height;$/;"	m	struct:user_t
reward_time	../../stratum/stratum.h	/^  time_t reward_time;$/;"	m	struct:user_t
rollingMinimumFeeRate	../../server/txfeerate.h	/^    mutable double rollingMinimumFeeRate;$/;"	m	class:CBlockPolicyEstimator
round	../../server/txfeerate.cpp	/^CAmount FeeFilterRounder::round(CAmount currentMinFee)$/;"	f	class:FeeFilterRounder
round_stamp	../../stratum/stratum.h	/^  time_t round_stamp;$/;"	m	struct:user_t
runCommand	../../server/util.cpp	/^void runCommand(std::string strCommand)$/;"	f
s0	../../test/testcoin_algo.cpp	74;"	d	file:
s1	../../test/testcoin_algo.cpp	75;"	d	file:
sError	../../server/net.h	/^		std::string sError;$/;"	m	class:CValidateState
scan_freq	../../unet/unet.h	/^  double scan_freq;$/;"	m	struct:unet_bind_t
scan_stamp	../../unet/unet.h	/^  shtime_t scan_stamp;$/;"	m	struct:unet_bind_t
script	../../server/script.cpp	/^    CScript *script;$/;"	m	class:CScriptVisitor	file:
scriptPub	../../server/txcreator.h	/^    CScript scriptPub;$/;"	m	class:CTxBatchCreator
scriptPubKey	../../server/block.h	/^		CScript scriptPubKey;$/;"	m	class:CTxOut
scriptSig	../../server/block.h	/^    CScript scriptSig;$/;"	m	class:CTxIn
scriptWitness	../../server/block.h	/^    CScriptWitness scriptWitness;$/;"	m	class:CTxInWitness
scriptnum_error	../../server/script.h	/^    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}$/;"	f	class:scriptnum_error
scriptnum_error	../../server/script.h	/^class scriptnum_error : public std::runtime_error$/;"	c
secp256k1_context_sign	../../server/eckey.cpp	/^static secp256k1_context* secp256k1_context_sign = NULL;$/;"	v	file:
secp256k1_context_verify	../../server/eckey.cpp	/^static secp256k1_context* secp256k1_context_verify = NULL;$/;"	v	file:
serialize	../../server/script.h	/^    static std::vector<unsigned char> serialize(const int64_t& value)$/;"	f	class:CScriptNum
serv_peer	../../test/test_shcoind.c	/^shpeer_t *serv_peer;$/;"	v
serv_state	../../server/chain.cpp	/^static bool serv_state(CIface *iface, int flag)$/;"	f	file:
server_shutdown	../../server/init.cpp	/^void server_shutdown(void)$/;"	f
server_start_t	../../test/test_shcoind.c	/^shtime_t server_start_t;$/;"	v
services	../../proto/coin_proto.h	/^  uint64_t services; \/* NODE_XXX *\/$/;"	m	struct:coin_iface_t
set	../../server/mruset.h	/^		std::set<T> set;$/;"	m	class:mruset
setAddrKnown	../../server/net.h	/^    std::set<CAddress> setAddrKnown;$/;"	m	class:CNode
setAutoLock	../../server/txcreator.h	/^		void setAutoLock(bool b)$/;"	f	class:CTxCreator
setAutoParam	../../server/txcreator.h	/^		void setAutoParam(bool b)$/;"	f	class:CTxCreator
setBanned	../../server/net.h	/^    static std::map<CNetAddr, int64> setBanned;$/;"	m	class:CNode
setBlockIndexValid	../../server/block.cpp	/^ValidIndexSet setBlockIndexValid[MAX_COIN_IFACE];$/;"	v
setCoins	../../server/txcreator.h	/^    set<pair<const CWalletTx*,unsigned int> > setCoins;$/;"	m	class:CTxBatchCreator
setCoinsRet	../../test/testcoin_coin.cpp	/^static CoinSet setCoinsRet, setCoinsRet2;$/;"	v	file:
setCoinsRet2	../../test/testcoin_coin.cpp	/^static CoinSet setCoinsRet, setCoinsRet2;$/;"	v	file:
setHighFeeRate	../../server/txcreator.h	/^		void setHighFeeRate()$/;"	f	class:CTxCreator
setInput	../../server/txcreator.h	/^    coin_set setInput;$/;"	m	class:CTxCreator
setInventoryKnown	../../server/net.h	/^    mruset<CInv> setInventoryKnown;$/;"	m	class:CNode
setKnown	../../server/net.h	/^    std::set<uint256> setKnown;$/;"	m	class:CNode
setLocal	../../server/txmempool.h	/^    void setLocal(bool val)$/;"	f	class:CPoolTx
setLowFeeRate	../../server/txcreator.h	/^		void setLowFeeRate()$/;"	f	class:CTxCreator
setSeq	../../server/txcreator.h	/^		map<unsigned int,unsigned int> setSeq;$/;"	m	class:CTxCreator
set_serv_state	../../server/chain.cpp	/^static void set_serv_state(CIface *iface, int flag)$/;"	f	file:
set_shapi_error	../../shapi/shapi_protocol.c	/^void set_shapi_error(shjson_t *reply, int code, char *str)$/;"	f
set_stratum_error	../../stratum/stratum_protocol.c	/^void set_stratum_error(shjson_t *reply, int code, char *str)$/;"	f
set_vch	../../server/script.h	/^    static int64_t set_vch(const std::vector<unsigned char>& vch)$/;"	f	class:CScriptNum
sha256_BlockMerkleRoot	../../server/sha256d_merkle.cpp	/^uint256 sha256_BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
sha256_h	../../test/testcoin_algo.cpp	/^static const uint32_t sha256_h[8] = {$/;"	v	file:
sha256_init	../../test/testcoin_algo.cpp	/^void sha256_init(uint32_t *state)$/;"	f
sha256_k	../../test/testcoin_algo.cpp	/^static const uint32_t sha256_k[64] = {$/;"	v	file:
sha256_transform	../../test/testcoin_algo.cpp	/^void sha256_transform(uint32_t *state, const uint32_t *block, int swap)$/;"	f
sha256d	../../test/testcoin_algo.cpp	/^extern void sha256d(unsigned char *hash, const unsigned char *data, int len)$/;"	f
sha256d_80_swap	../../test/testcoin_algo.cpp	/^static void sha256d_80_swap(uint32_t *hash, const uint32_t *data)$/;"	f	file:
sha256d_BlockMerkleRoot	../../server/sha256d_merkle.cpp	/^uint256 sha256d_BlockMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
sha256d_BlockWitnessMerkleRoot	../../server/sha256d_merkle.cpp	/^uint256 sha256d_BlockWitnessMerkleRoot(const CBlock& block, bool* mutated)$/;"	f
sha256d_ComputeMerkleRoot	../../server/sha256d_merkle.cpp	/^uint256 sha256d_ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) $/;"	f
sha256d_hash1	../../test/testcoin_algo.cpp	/^static const uint32_t sha256d_hash1[16] = {$/;"	v	file:
sha256d_ms	../../test/testcoin_algo.cpp	/^static inline void sha256d_ms(uint32_t *hash, uint32_t *W,$/;"	f	file:
sha256d_preextend	../../test/testcoin_algo.cpp	/^static inline void sha256d_preextend(uint32_t *W)$/;"	f	file:
sha256d_prehash	../../test/testcoin_algo.cpp	/^static inline void sha256d_prehash(uint32_t *S, const uint32_t *W)$/;"	f	file:
shapi_accept	../../shapi/shapi.c	/^void shapi_accept(int fd, struct sockaddr *net_addr)$/;"	f
shapi_api_account_addr	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_addr(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
shapi_api_account_addrlist	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_addrlist(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
shapi_api_account_create	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_create(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_account_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_list(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
shapi_api_account_secret	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_secret(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
shapi_api_account_send	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_send(int ifaceIndex, string strAccount, shjson_t *params, string& strError, uint160 hColor = 0)$/;"	f	file:
shapi_api_account_txlist	../../shapi/shapi_api.cpp	/^const ApiItems& shapi_api_account_txlist(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f
shapi_api_account_unspent	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_account_unspent(int ifaceIndex, string strAccount, shjson_t *params, uint160 hColor = 0)$/;"	f	file:
shapi_api_alias_get	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alias_get(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alias_info	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alias_info(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alias_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alias_list(int ifaceIndex, string strAccount, shjson_t *params, int64 begin_t, bool fSelf)$/;"	f	file:
shapi_api_alias_set	../../shapi/shapi_api.cpp	/^static int shapi_api_alias_set(int ifaceIndex, ApiItems& result, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alt_balance	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alt_balance(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alt_block	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alt_block(int ifaceIndex, shapi_t *user, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alt_get	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alt_get(int ifaceIndex, shapi_t *user, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alt_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alt_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_alt_send	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alt_send(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_alt_tx	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_alt_tx(int ifaceIndex, shapi_t *user, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_asset_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_asset_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_block_get	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_block_get(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_block_info	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_block_info(int ifaceIndex, shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_block_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_block_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_block_mined	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_block_mined(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_book	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_book(int ifaceIndex, shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_cert_info	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_cert_info(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
shapi_api_cert_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_cert_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_context_get	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_context_get(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_context_info	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_context_info(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_context_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_context_list(int ifaceIndex, string strAccount, shjson_t *params, int64 begin_t, bool fSelf)$/;"	f	file:
shapi_api_context_set	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_context_set(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_context_setid	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_context_setid(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
shapi_api_exec_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_exec_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_faucet_info	../../shapi/shapi_api_faucet.cpp	/^const ApiItems& shapi_api_faucet_info(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f
shapi_api_faucet_list	../../shapi/shapi_api_faucet.cpp	/^const ApiItems& shapi_api_faucet_list(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f
shapi_api_faucet_recv	../../shapi/shapi_api_faucet.cpp	/^const ApiItems& shapi_api_faucet_recv(int ifaceIndex, string strAccount, shjson_t *params, string& strError, uint160 hColor)$/;"	f
shapi_api_faucet_send	../../shapi/shapi_api_faucet.cpp	/^const ApiItems& shapi_api_faucet_send(int ifaceIndex, string strAccount, shjson_t *params, string& strError, uint160 hColor)$/;"	f
shapi_api_ident_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_ident_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_license_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_license_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_offer_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_offer_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_api_order_create	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_order_create(shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_order_fills	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_order_fills(shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_order_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_order_list(shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_order_remove	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_order_remove(shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_order_ticker	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_order_ticker(shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_order_trades	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_order_trades(shapi_t *user, shjson_t *params)$/;"	f	file:
shapi_api_validate_list	../../shapi/shapi_api.cpp	/^static const ApiItems& shapi_api_validate_list(int ifaceIndex, shapi_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
shapi_client_list	../../shapi/shapi_user.c	/^shapi_t *shapi_client_list;$/;"	v
shapi_close	../../shapi/shapi.c	/^void shapi_close(int fd, struct sockaddr *net_addr)$/;"	f
shapi_close_all	../../shapi/shapi.c	/^static void shapi_close_all(void)$/;"	f	file:
shapi_close_free	../../shapi/shapi.c	/^static void shapi_close_free(void)$/;"	f	file:
shapi_get_iface	../../shapi/shapi_protocol.c	/^int shapi_get_iface(char *iface_str)$/;"	f
shapi_init	../../shapi/shapi.c	/^int shapi_init(void)$/;"	f
shapi_json	../../shapi/shapi.c	/^shjson_t *shapi_json(const char *json_text)$/;"	f
shapi_register_client	../../shapi/shapi.c	/^shapi_t *shapi_register_client(int fd)$/;"	f
shapi_register_client_task	../../shapi/shapi.c	/^int shapi_register_client_task(shapi_t *user, char *json_text)$/;"	f
shapi_request_api	../../shapi/shapi_api.cpp	/^shjson_t *shapi_request_api(int ifaceIndex, shapi_t *user, char *method, shjson_t *params, shjson_t *auth)$/;"	f
shapi_request_api_list	../../shapi/shapi_api.cpp	/^shjson_t *shapi_request_api_list(int ifaceIndex, shapi_t *user, string strAccount, char *method, shjson_t *params)$/;"	f
shapi_request_id	../../shapi/shapi_protocol.c	/^uint32_t shapi_request_id(void)$/;"	f
shapi_request_message	../../shapi/shapi_protocol.c	/^int shapi_request_message(shapi_t *user, shjson_t *json)$/;"	f
shapi_runtime_session	../../shapi/shapi_protocol.c	/^char *shapi_runtime_session(void)$/;"	f
shapi_send_message	../../shapi/shapi_protocol.c	/^int shapi_send_message(shapi_t *user, shjson_t *msg)$/;"	f
shapi_t	../../shapi/shapi.h	/^typedef struct shapi_t$/;"	s
shapi_t	../../shapi/shapi.h	/^} shapi_t;$/;"	t	typeref:struct:shapi_t
shapi_term	../../shapi/shapi.c	/^void shapi_term(void)$/;"	f
shapi_timer	../../shapi/shapi.c	/^static void shapi_timer(void)$/;"	f	file:
shapi_user_count	../../shapi/shapi_user.c	/^int shapi_user_count(shapi_t *user)$/;"	f
shapi_user_free	../../shapi/shapi_user.c	/^void shapi_user_free(shapi_t *f_user)$/;"	f
shapi_user_get	../../shapi/shapi_user.c	/^shapi_t *shapi_user_get(int fd)$/;"	f
shapi_user_init	../../shapi/shapi_user.c	/^shapi_t *shapi_user_init(int fd)$/;"	f
shc_GetMainAccountPubKey	../../proto/shc_proto.cpp	/^static CPubKey shc_GetMainAccountPubKey(CWallet *wallet)$/;"	f	file:
shc_bind	../../proto/shc_proto.cpp	/^static int shc_bind(CIface *iface, void *_unused_)$/;"	f	file:
shc_block_new	../../proto/shc_proto.cpp	/^static int shc_block_new(CIface *iface, CBlock **block_p)$/;"	f	file:
shc_block_process	../../proto/shc_proto.cpp	/^static int shc_block_process(CIface *iface, CBlock *block)$/;"	f	file:
shc_block_templ	../../proto/shc_proto.cpp	/^static int shc_block_templ(CIface *iface, CBlock **block_p)$/;"	f	file:
shc_coin_iface	../../proto/shc_proto.cpp	/^coin_iface_t shc_coin_iface = {$/;"	v
shc_init	../../proto/shc_proto.cpp	/^static int shc_init(CIface *iface, void *_unused_)$/;"	f	file:
shc_msg_recv	../../proto/shc_proto.cpp	/^static int shc_msg_recv(CIface *iface, CNode *pnode)$/;"	f	file:
shc_msg_send	../../proto/shc_proto.cpp	/^static int shc_msg_send(CIface *iface, CNode *pnode)$/;"	f	file:
shc_peer_add	../../proto/shc_proto.cpp	/^static int shc_peer_add(CIface *iface, void *arg)$/;"	f	file:
shc_peer_recv	../../proto/shc_proto.cpp	/^static int shc_peer_recv(CIface *iface, void *arg)$/;"	f	file:
shc_seed_list	../../unet/unet_seed.h	/^static char *shc_seed_list[SHC_SEED_LIST_SIZE] = {$/;"	v
shc_term	../../proto/shc_proto.cpp	/^static int shc_term(CIface *iface, void *_unused_)$/;"	f	file:
shc_tx_new	../../proto/shc_proto.cpp	/^static int shc_tx_new(CIface *iface, void *arg)$/;"	f	file:
shc_tx_pool	../../proto/shc_proto.cpp	/^static int shc_tx_pool(CIface *iface, CTxMemPool **pool_p)$/;"	f	file:
shcoind_peer	../../test/test_shcoind.c	/^shpeer_t *shcoind_peer(void)$/;"	f
shcoind_tool_usage	../../deprec/shcoind_tool.cpp	/^void shcoind_tool_usage(char *prog_name)$/;"	f
shcoind_tool_version	../../deprec/shcoind_tool.cpp	/^void shcoind_tool_version(char *prog_name)$/;"	f
shnet_inform	../../server/shlib.h	/^inline int shnet_inform(CIface *iface, int tx_op, void *data, size_t data_len)$/;"	f
shorttxidk0	../../server/block_cmpct.h	/^		mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxidk1	../../server/block_cmpct.h	/^		mutable uint64_t shorttxidk0, shorttxidk1;$/;"	m	class:CBlockHeaderAndShortTxIDs
shorttxids	../../server/block_cmpct.h	/^		std::vector<uint64_t> shorttxids;$/;"	m	class:CBlockHeaderAndShortTxIDs
shscrypt_swab256	../../stratum/stratum_message.c	/^static void shscrypt_swab256(void *dest_p, const void *src_p)$/;"	f	file:
sig	../../server/shlib.h	/^    shsig_t sig;$/;"	m	class:SHSig
sip33_TestDerivation	../../test/testcoin_sip33.cpp	/^struct sip33_TestDerivation {$/;"	s	file:
sip33_TestVector	../../test/testcoin_sip33.cpp	/^    explicit sip33_TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}$/;"	f	struct:sip33_TestVector
sip33_TestVector	../../test/testcoin_sip33.cpp	/^struct sip33_TestVector {$/;"	s	file:
size	../../blockchain/bc.h	/^  bcsize_t size;$/;"	m	struct:bc_idx_t
size	../../blockchain/bc.h	/^  volatile size_t size;$/;"	m	struct:bc_map_t
size	../../proto/coin_proto.h	/^  uint32_t size;$/;"	m	struct:coinhdr_t
size	../../server/key.h	/^		unsigned int size() const { return (vch.size()); }$/;"	f	class:CKey
size	../../server/key.h	/^		unsigned int size() const { return vchPubKey.size(); }$/;"	f	class:CPubKey
size	../../server/mruset.h	/^		size_type size() const { return set.size(); }$/;"	f	class:mruset
size	../../server/txmempool.h	/^    int size()$/;"	f	class:CTxMemPool
size	../../test/CuTest.h	/^	int size;$/;"	m	struct:__anon10
size_type	../../server/mruset.h	/^		typedef typename std::set<T>::size_type size_type;$/;"	t	class:mruset
socklen_t	../../unet/unet.h	/^typedef int socklen_t;$/;"	t
sort_forward	../../shapi/shapi_api.cpp	/^static bool sort_forward(Object a, Object b) {$/;"	f	file:
sort_forward	../../stratum/stratum_api.cpp	/^static bool sort_forward(Object a, Object b) {$/;"	f	file:
sort_reverse	../../shapi/shapi_api.cpp	/^static bool sort_reverse(Object a, Object b) {$/;"	f	file:
sort_reverse	../../stratum/stratum_api.cpp	/^static bool sort_reverse(Object a, Object b) {$/;"	f	file:
special_modulo	../../server/mnemonic.cpp	/^uint32_t special_modulo(int u, int v)$/;"	f
speed	../../stratum/stratum.h	/^double speed[MAX_SPEED_STEP];$/;"	m	struct:user_t
spring_bits	../../server/spring.c	/^typedef struct spring_bits$/;"	s	file:
spring_bits	../../server/spring.c	/^} spring_bits;$/;"	t	typeref:struct:spring_bits	file:
spring_loc_bits	../../server/spring.c	/^static void spring_loc_bits(spring_bits *bits)$/;"	f	file:
spring_loc_claim	../../server/spring.c	/^void spring_loc_claim(double lat, double lon)$/;"	f
spring_loc_search	../../server/spring.c	/^int spring_loc_search(double cur_lat, double cur_lon, double *lat_p, double *lon_p)$/;"	f
spring_loc_set	../../server/spring.c	/^void spring_loc_set(double lat, double lon)$/;"	f
spring_matrix_bit	../../server/spring.c	/^static unsigned int spring_matrix_bit(uint64_t seed)$/;"	f	file:
spring_matrix_compress	../../server/spring.c	/^void spring_matrix_compress(uint32_t matrix[3][3])$/;"	f
spring_render_fractal	../../server/spring.c	/^int spring_render_fractal(char *img_path, double zoom, double span, double x_of, double y_of)$/;"	f
stack	../../server/block.h	/^    cstack_t stack;$/;"	m	struct:CScriptWitness
stacktop	../../server/script.cpp	101;"	d	file:
stale	../../server/txmempool.h	/^    pool_map stale;$/;"	m	class:CPool
stamp	../../blockchain/bc.h	/^  shtime_t stamp;$/;"	m	struct:bc_hdr_t
stamp	../../blockchain/bc.h	/^  time_t stamp; $/;"	m	struct:bc_map_t
stamp	../../server/txmempool.h	/^    time_t stamp;$/;"	m	class:CPoolTx
stamp	../../stratum/stratum_task.c	/^  time_t stamp;$/;"	m	struct:task_stat_t	file:
stat	../../proto/coin_proto.h	/^  } stat;$/;"	m	struct:coin_iface_t	typeref:struct:coin_iface_t::coin_stat_t
stats	../../server/txfeerate.h	/^        TxConfirmStats *stats;$/;"	m	struct:CBlockPolicyEstimator::TxStatsInfo
strAccount	../../server/account.h	/^		string strAccount;$/;"	m	class:CAccountCache
strAccount	../../server/wallet.h	/^		std::string strAccount;$/;"	m	class:CAccountingEntry
strComment	../../server/wallet.h	/^		std::string strComment;$/;"	m	class:CAccountingEntry
strComment	../../server/wallet.h	/^		std::string strComment;$/;"	m	class:CWalletKey
strError	../../server/txcreator.h	/^    string strError; $/;"	m	class:CTxCreator
strFile	../../server/txidx.h	/^    std::string strFile;$/;"	m	class:CDB
strFromAccount	../../server/wallet.h	/^		std::string strFromAccount;$/;"	m	class:CWalletTx
strHexMaster	../../test/testcoin_bip32.cpp	/^    std::string strHexMaster;$/;"	m	struct:TestVector	file:
strHexMaster	../../test/testcoin_sip33.cpp	/^    std::string strHexMaster;$/;"	m	struct:sip33_TestVector	file:
strMiscWarning	../../server/util.cpp	/^string strMiscWarning;$/;"	v
strOtherAccount	../../server/wallet.h	/^		std::string strOtherAccount;$/;"	m	class:CAccountingEntry
strSubVer	../../server/net.h	/^    std::string strSubVer;$/;"	m	class:CNode
strSubVer	../../server/net.h	/^    std::string strSubVer;$/;"	m	class:CNodeStats
strWalletFile	../../server/wallet.h	/^		std::string strWalletFile;$/;"	m	class:CWallet
stratum_accept	../../stratum/stratum.c	/^void stratum_accept(int fd, struct sockaddr *net_addr)$/;"	f
stratum_api_account_addr	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_account_addr(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
stratum_api_account_create	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_account_create(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_account_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_account_list(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
stratum_api_account_secret	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_account_secret(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
stratum_api_account_send	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_account_send(int ifaceIndex, string strAccount, shjson_t *params, string& strError, uint160 hColor = 0)$/;"	f	file:
stratum_api_account_txlist	../../stratum/stratum_api.cpp	/^const ApiItems& stratum_api_account_txlist(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f
stratum_api_account_unspent	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_account_unspent(int ifaceIndex, string strAccount, shjson_t *params, uint160 hColor = 0)$/;"	f	file:
stratum_api_alias_get	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alias_get(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alias_info	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alias_info(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alias_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alias_list(int ifaceIndex, string strAccount, shjson_t *params, int64 begin_t, bool fSelf)$/;"	f	file:
stratum_api_alias_set	../../stratum/stratum_api.cpp	/^static int stratum_api_alias_set(int ifaceIndex, ApiItems& result, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alt_balance	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alt_balance(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alt_block	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alt_block(int ifaceIndex, user_t *user, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alt_get	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alt_get(int ifaceIndex, user_t *user, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alt_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alt_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_alt_send	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alt_send(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_alt_tx	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_alt_tx(int ifaceIndex, user_t *user, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_asset_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_asset_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_block_get	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_block_get(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_block_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_block_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_block_mined	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_block_mined(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_book	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_book(int ifaceIndex, user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_cert_info	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_cert_info(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f	file:
stratum_api_cert_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_cert_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_context_get	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_context_get(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_context_info	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_context_info(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_context_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_context_list(int ifaceIndex, string strAccount, shjson_t *params, int64 begin_t, bool fSelf)$/;"	f	file:
stratum_api_context_set	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_context_set(int ifaceIndex, string strAccount, shjson_t *params, string& strError)$/;"	f	file:
stratum_api_exec_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_exec_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_faucet_info	../../stratum/stratum_api_faucet.cpp	/^const ApiItems& stratum_api_faucet_info(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f
stratum_api_faucet_list	../../stratum/stratum_api_faucet.cpp	/^const ApiItems& stratum_api_faucet_list(int ifaceIndex, string strAccount, shjson_t *params)$/;"	f
stratum_api_faucet_recv	../../stratum/stratum_api_faucet.cpp	/^const ApiItems& stratum_api_faucet_recv(int ifaceIndex, string strAccount, shjson_t *params, string& strError, uint160 hColor)$/;"	f
stratum_api_faucet_send	../../stratum/stratum_api_faucet.cpp	/^const ApiItems& stratum_api_faucet_send(int ifaceIndex, string strAccount, shjson_t *params, string& strError, uint160 hColor)$/;"	f
stratum_api_ident_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_ident_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_license_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_license_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_offer_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_offer_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_api_order_create	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_order_create(user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_order_fills	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_order_fills(user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_order_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_order_list(user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_order_remove	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_order_remove(user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_order_ticker	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_order_ticker(user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_order_trades	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_order_trades(user_t *user, shjson_t *params)$/;"	f	file:
stratum_api_validate_list	../../stratum/stratum_api.cpp	/^static const ApiItems& stratum_api_validate_list(int ifaceIndex, user_t *user, shjson_t *params, int64 begin_t)$/;"	f	file:
stratum_blake2s_accept	../../stratum/stratum_blake2s.c	/^static void stratum_blake2s_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_blake2s_close	../../stratum/stratum_blake2s.c	/^static void stratum_blake2s_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_blake2s_init	../../stratum/stratum_blake2s.c	/^int stratum_blake2s_init(void)$/;"	f
stratum_blake2s_task_gen	../../stratum/stratum_blake2s.c	/^static void stratum_blake2s_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_blake2s_term	../../stratum/stratum_blake2s.c	/^static void stratum_blake2s_term(void)$/;"	f	file:
stratum_blake2s_timer	../../stratum/stratum_blake2s.c	/^static void stratum_blake2s_timer(void)$/;"	f	file:
stratum_close	../../stratum/stratum.c	/^void stratum_close(int fd, struct sockaddr *net_addr)$/;"	f
stratum_close_all	../../stratum/stratum.c	/^static void stratum_close_all(void)$/;"	f	file:
stratum_close_free	../../stratum/stratum.c	/^static void stratum_close_free(void)$/;"	f	file:
stratum_command_api	../../stratum/stratum_command.c	/^int stratum_command_api(int ifaceIndex, user_t *user, const char *method, shjson_t *param)$/;"	f
stratum_command_f	../../stratum/stratum_command.c	/^typedef int (*stratum_command_f)(CIface *, user_t *, shjson_t *, shjson_t **);$/;"	t	file:
stratum_command_t	../../stratum/stratum_command.c	/^typedef struct stratum_command_t$/;"	s	file:
stratum_command_t	../../stratum/stratum_command.c	/^} stratum_command_t;$/;"	t	typeref:struct:stratum_command_t	file:
stratum_command_table	../../stratum/stratum_command.c	/^static stratum_command_t stratum_command_table[] =$/;"	v	file:
stratum_find_netid	../../stratum/stratum_sync.c	/^user_t *stratum_find_netid(shkey_t *netid, char *worker)$/;"	f
stratum_generic_error	../../stratum/stratum_protocol.c	/^static shjson_t *stratum_generic_error(void)$/;"	f	file:
stratum_get_iface	../../stratum/stratum_protocol.c	/^int stratum_get_iface(char *iface_str)$/;"	f
stratum_groestl_accept	../../stratum/stratum_groestl.c	/^static void stratum_groestl_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_groestl_close	../../stratum/stratum_groestl.c	/^static void stratum_groestl_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_groestl_init	../../stratum/stratum_groestl.c	/^int stratum_groestl_init(void)$/;"	f
stratum_groestl_task_gen	../../stratum/stratum_groestl.c	/^static void stratum_groestl_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_groestl_term	../../stratum/stratum_groestl.c	/^static void stratum_groestl_term(void)$/;"	f	file:
stratum_groestl_timer	../../stratum/stratum_groestl.c	/^static void stratum_groestl_timer(void)$/;"	f	file:
stratum_html_content	../../stratum/stratum_http.c	/^shbuf_t *stratum_html_content(httpreq_t *req)$/;"	f
stratum_html_header	../../stratum/stratum_http.c	/^void stratum_html_header(shbuf_t *buff)$/;"	f
stratum_html_main_content	../../stratum/stratum_http.c	/^shbuf_t *stratum_html_main_content(struct httpreq_t *req)$/;"	f
stratum_http_args	../../stratum/stratum_http.c	/^static shjson_t *stratum_http_args(char *url, char *ret_url)$/;"	f	file:
stratum_http_block_html	../../stratum/stratum_http.c	/^void stratum_http_block_html(int ifaceIndex, shbuf_t *buff)$/;"	f
stratum_http_call	../../stratum/stratum_http.c	/^int stratum_http_call(const char *url, shbuf_t *buff)$/;"	f
stratum_http_header	../../stratum/stratum_http.c	/^void stratum_http_header(http_t *h, shbuf_t *buff, size_t data_len)$/;"	f
stratum_http_main_html	../../stratum/stratum_http.c	/^void stratum_http_main_html(unsigned int sk, char *url, shbuf_t *buff)$/;"	f
stratum_http_request	../../stratum/stratum_http.c	/^void stratum_http_request(unsigned int sk, char *url)$/;"	f
stratum_http_response	../../stratum/stratum_http.c	/^char *stratum_http_response(unsigned int sk, char *url, int *idx_p)$/;"	f
stratum_http_spring_html	../../stratum/stratum_http.c	/^void stratum_http_spring_html(unsigned int sk, char *url, shbuf_t *buff)$/;"	f
stratum_http_spring_img	../../stratum/stratum_http.c	/^void stratum_http_spring_img(char *args, shbuf_t *buff)$/;"	f
stratum_http_spring_img_html	../../stratum/stratum_http.c	/^void stratum_http_spring_img_html(shbuf_t *buff)$/;"	f
stratum_http_validate_img	../../stratum/stratum_http.c	/^void stratum_http_validate_img(char *args, shbuf_t *buff)$/;"	f
stratum_http_validate_img_html	../../stratum/stratum_http.c	/^void stratum_http_validate_img_html(shbuf_t *buff)$/;"	f
stratum_init	../../stratum/stratum.c	/^int stratum_init(void)$/;"	f
stratum_json	../../stratum/stratum.c	/^shjson_t *stratum_json(const char *json_text)$/;"	f
stratum_keccak_accept	../../stratum/stratum_keccak.c	/^static void stratum_keccak_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_keccak_close	../../stratum/stratum_keccak.c	/^static void stratum_keccak_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_keccak_init	../../stratum/stratum_keccak.c	/^int stratum_keccak_init(void)$/;"	f
stratum_keccak_task_gen	../../stratum/stratum_keccak.c	/^static void stratum_keccak_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_keccak_term	../../stratum/stratum_keccak.c	/^static void stratum_keccak_term(void)$/;"	f	file:
stratum_keccak_timer	../../stratum/stratum_keccak.c	/^static void stratum_keccak_timer(void)$/;"	f	file:
stratum_miner_extranonce_subscribe	../../stratum/stratum_miner.cpp	/^int stratum_miner_extranonce_subscribe(CIface *iface, user_t *user, shjson_t *param, shjson_t **reply_p)$/;"	f
stratum_miner_get_transactions	../../stratum/stratum_miner.cpp	/^int stratum_miner_get_transactions(CIface *iface, user_t *user, shjson_t *param, shjson_t **reply_p)$/;"	f
stratum_miner_getblocktemplate	../../stratum/stratum_miner.cpp	/^shjson_t *stratum_miner_getblocktemplate(int ifaceIndex, int nAlg)$/;"	f
stratum_miner_lastminerblock	../../stratum/stratum_miner.cpp	/^shjson_t *stratum_miner_lastminerblock(int ifaceIndex)$/;"	f
stratum_miner_minerblockvalue	../../stratum/stratum_miner.cpp	/^int64 stratum_miner_minerblockvalue(int ifaceIndex, const CWalletTx& wtx)$/;"	f
stratum_miner_submitblock	../../stratum/stratum_miner.cpp	/^int stratum_miner_submitblock(unsigned int workId, unsigned int nTime, unsigned int nNonce, char *xn_hex, char *ret_hash, double *ret_diff)$/;"	f
stratum_qubit_accept	../../stratum/stratum_qubit.c	/^static void stratum_qubit_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_qubit_close	../../stratum/stratum_qubit.c	/^static void stratum_qubit_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_qubit_init	../../stratum/stratum_qubit.c	/^int stratum_qubit_init(void)$/;"	f
stratum_qubit_task_gen	../../stratum/stratum_qubit.c	/^static void stratum_qubit_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_qubit_term	../../stratum/stratum_qubit.c	/^static void stratum_qubit_term(void)$/;"	f	file:
stratum_qubit_timer	../../stratum/stratum_qubit.c	/^static void stratum_qubit_timer(void)$/;"	f	file:
stratum_register_client	../../stratum/stratum.c	/^user_t *stratum_register_client(int fd)$/;"	f
stratum_register_client_task	../../stratum/stratum.c	/^int stratum_register_client_task(user_t *user, char *json_text)$/;"	f
stratum_register_html_task	../../stratum/stratum.c	/^int stratum_register_html_task(user_t *user, char *html_text)$/;"	f
stratum_request_account_address	../../stratum/stratum_protocol.c	/^static int stratum_request_account_address(int ifaceIndex, user_t *user, char *hash)$/;"	f	file:
stratum_request_account_alias	../../stratum/stratum_protocol.c	/^static int stratum_request_account_alias(int ifaceIndex, user_t *user, char *account, char *pkey_str, char *mode, char *alias_name, char *alias_addr)$/;"	f	file:
stratum_request_account_certificate	../../stratum/stratum_protocol.c	/^static int stratum_request_account_certificate(int ifaceIndex, user_t *user, char *account, char *pkey_str, char *mode, char *ctx_name, char *ctx_issuer, double ctx_fee)$/;"	f	file:
stratum_request_account_context	../../stratum/stratum_protocol.c	/^static int stratum_request_account_context(int ifaceIndex, user_t *user, char *account, char *pkey_str, char *mode, char *ctx_name, char *ctx_value)$/;"	f	file:
stratum_request_account_create	../../stratum/stratum_protocol.c	/^static int stratum_request_account_create(int ifaceIndex, user_t *user, char *account)$/;"	f	file:
stratum_request_account_import	../../stratum/stratum_protocol.c	/^static int stratum_request_account_import(int ifaceIndex, user_t *user, char *hash, const char *privaddr_str)$/;"	f	file:
stratum_request_account_info	../../stratum/stratum_protocol.c	/^static int stratum_request_account_info(int ifaceIndex, user_t *user, char *account, char *pkey_str)$/;"	f	file:
stratum_request_account_secret	../../stratum/stratum_protocol.c	/^static int stratum_request_account_secret(int ifaceIndex, user_t *user, char *hash, const char *pkey_str)$/;"	f	file:
stratum_request_account_transfer	../../stratum/stratum_protocol.c	/^static int stratum_request_account_transfer(int ifaceIndex, user_t *user, char *account, char *pkey_str, char *dest, double amount)$/;"	f	file:
stratum_request_account_tx	../../stratum/stratum_protocol.c	/^static int stratum_request_account_tx(int ifaceIndex, user_t *user, char *account, char *pkey_str)$/;"	f	file:
stratum_request_account_verify_transfer	../../stratum/stratum_protocol.c	/^static int stratum_request_account_verify_transfer(int ifaceIndex, user_t *user, char *account, char *pkey_str, char *dest, double amount)$/;"	f	file:
stratum_request_api	../../stratum/stratum_api.cpp	/^shjson_t *stratum_request_api(int ifaceIndex, user_t *user, char *method, shjson_t *params, shjson_t *auth)$/;"	f
stratum_request_api_list	../../stratum/stratum_api.cpp	/^shjson_t *stratum_request_api_list(int ifaceIndex, user_t *user, string strAccount, char *method, shjson_t *params)$/;"	f
stratum_request_id	../../stratum/stratum_protocol.c	/^uint32_t stratum_request_id(void)$/;"	f
stratum_request_message	../../stratum/stratum_protocol.c	/^int stratum_request_message(user_t *user, shjson_t *json)$/;"	f
stratum_request_wallet_sync	../../stratum/stratum_protocol.c	/^static int stratum_request_wallet_sync(int ifaceIndex, user_t *user, uint32_t pin, shjson_t *pub_obj)$/;"	f	file:
stratum_round_reset	../../stratum/stratum_task.c	/^void stratum_round_reset(time_t stamp)$/;"	f
stratum_runtime_session	../../stratum/stratum_protocol.c	/^char *stratum_runtime_session(void)$/;"	f
stratum_send_client_ver	../../stratum/stratum_protocol.c	/^int stratum_send_client_ver(user_t *user)$/;"	f
stratum_send_difficulty	../../stratum/stratum_protocol.c	/^int stratum_send_difficulty(user_t *user)$/;"	f
stratum_send_error	../../stratum/stratum_message.c	/^int stratum_send_error(user_t *user, int err_code)$/;"	f
stratum_send_message	../../stratum/stratum_message.c	/^int stratum_send_message(user_t *user, shjson_t *msg)$/;"	f
stratum_send_subscribe	../../stratum/stratum_message.c	/^int stratum_send_subscribe(user_t *user)$/;"	f
stratum_send_task	../../stratum/stratum_message.c	/^int stratum_send_task(user_t *user, task_t *task, int clean)$/;"	f
stratum_session_nonce	../../stratum/stratum_protocol.c	/^int stratum_session_nonce(void)$/;"	f
stratum_set_difficulty	../../stratum/stratum_protocol.c	/^int stratum_set_difficulty(user_t *user, int diff)$/;"	f
stratum_sha256d_accept	../../stratum/stratum_sha256d.c	/^static void stratum_sha256d_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_sha256d_close	../../stratum/stratum_sha256d.c	/^static void stratum_sha256d_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_sha256d_init	../../stratum/stratum_sha256d.c	/^int stratum_sha256d_init(void)$/;"	f
stratum_sha256d_task_gen	../../stratum/stratum_sha256d.c	/^static void stratum_sha256d_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_sha256d_term	../../stratum/stratum_sha256d.c	/^static void stratum_sha256d_term(void)$/;"	f	file:
stratum_sha256d_timer	../../stratum/stratum_sha256d.c	/^static void stratum_sha256d_timer(void)$/;"	f	file:
stratum_skein_accept	../../stratum/stratum_skein.c	/^static void stratum_skein_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_skein_close	../../stratum/stratum_skein.c	/^static void stratum_skein_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_skein_init	../../stratum/stratum_skein.c	/^int stratum_skein_init(void)$/;"	f
stratum_skein_task_gen	../../stratum/stratum_skein.c	/^static void stratum_skein_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_skein_term	../../stratum/stratum_skein.c	/^static void stratum_skein_term(void)$/;"	f	file:
stratum_skein_timer	../../stratum/stratum_skein.c	/^static void stratum_skein_timer(void)$/;"	f	file:
stratum_subscribe	../../stratum/stratum_protocol.c	/^static int stratum_subscribe(user_t *user)$/;"	f	file:
stratum_sync	../../stratum/stratum_sync.c	/^void stratum_sync(void)$/;"	f
stratum_sync_connect	../../stratum/stratum_sync.c	/^int stratum_sync_connect(user_t *user)$/;"	f
stratum_sync_cycle	../../stratum/stratum_sync.c	/^void stratum_sync_cycle(CIface *iface, user_t *user)$/;"	f
stratum_sync_elevate_req	../../stratum/stratum_sync.c	/^static int stratum_sync_elevate_req(user_t *user)$/;"	f	file:
stratum_sync_ident_req	../../stratum/stratum_sync.c	/^static int stratum_sync_ident_req(user_t *user)$/;"	f	file:
stratum_sync_init	../../stratum/stratum_sync.c	/^void stratum_sync_init(void)$/;"	f
stratum_sync_ping_req	../../stratum/stratum_sync.c	/^static int stratum_sync_ping_req(user_t *user)$/;"	f	file:
stratum_sync_recv	../../stratum/stratum_sync.c	/^int stratum_sync_recv(user_t *peer, char *json_text)$/;"	f
stratum_sync_resp	../../stratum/stratum_sync.c	/^int stratum_sync_resp(user_t *user, shjson_t *tree)$/;"	f
stratum_sync_userlist_req	../../stratum/stratum_sync.c	/^static int stratum_sync_userlist_req(user_t *user)$/;"	f	file:
stratum_sync_userlist_resp	../../stratum/stratum_sync.c	/^int stratum_sync_userlist_resp(user_t *user, shjson_t *tree)$/;"	f
stratum_sync_wallet_listaddr_req	../../stratum/stratum_sync.c	/^static int stratum_sync_wallet_listaddr_req(user_t *user)$/;"	f	file:
stratum_sync_wallet_setkey_req	../../stratum/stratum_sync.c	/^static int stratum_sync_wallet_setkey_req(user_t *user)$/;"	f	file:
stratum_sync_walletlist_resp	../../stratum/stratum_sync.c	/^int stratum_sync_walletlist_resp(user_t *user, shjson_t *tree)$/;"	f
stratum_task_gen	../../stratum/stratum_task.c	/^void stratum_task_gen(task_attr_t *attr)$/;"	f
stratum_task_weight	../../stratum/stratum_task.c	/^void stratum_task_weight(task_attr_t *attr)$/;"	f
stratum_task_work	../../stratum/stratum_task.c	/^void stratum_task_work(task_t *task, task_attr_t *attr)$/;"	f
stratum_term	../../stratum/stratum.c	/^void stratum_term(void)$/;"	f
stratum_timer	../../stratum/stratum.c	/^static void stratum_timer(void)$/;"	f	file:
stratum_user	../../stratum/stratum_user.c	/^user_t *stratum_user(user_t *user, char *username)$/;"	f
stratum_user_block	../../stratum/stratum_user.c	/^void stratum_user_block(user_t *user, double share_diff)$/;"	f
stratum_user_broadcast_task	../../stratum/stratum_user.c	/^int stratum_user_broadcast_task(task_t *task, task_attr_t *attr)$/;"	f
stratum_user_count	../../stratum/stratum_user.c	/^int stratum_user_count(user_t *user)$/;"	f
stratum_user_find	../../stratum/stratum_user.c	/^user_t *stratum_user_find(char *username)$/;"	f
stratum_user_free	../../stratum/stratum_user.c	/^void stratum_user_free(user_t *f_user)$/;"	f
stratum_user_get	../../stratum/stratum_user.c	/^user_t *stratum_user_get(int fd)$/;"	f
stratum_user_init	../../stratum/stratum_user.c	/^user_t *stratum_user_init(int fd)$/;"	f
stratum_user_max_height	../../stratum/stratum_task.c	/^static uint64_t stratum_user_max_height(void)$/;"	f	file:
stratum_user_speed	../../stratum/stratum_user.c	/^double stratum_user_speed(user_t *user)$/;"	f
stratum_validate_submit	../../stratum/stratum_protocol.c	/^int stratum_validate_submit(user_t *user, shjson_t *json)$/;"	f
stratum_work_cycle	../../stratum/stratum.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_blake2s.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_groestl.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_keccak.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_qubit.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_sha256d.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_skein.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_work_cycle	../../stratum/stratum_x11.c	/^static volatile time_t stratum_work_cycle;$/;"	v	file:
stratum_x11_accept	../../stratum/stratum_x11.c	/^static void stratum_x11_accept(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_x11_close	../../stratum/stratum_x11.c	/^static void stratum_x11_close(int fd, struct sockaddr *net_addr)$/;"	f	file:
stratum_x11_init	../../stratum/stratum_x11.c	/^int stratum_x11_init(void)$/;"	f
stratum_x11_task_gen	../../stratum/stratum_x11.c	/^static void stratum_x11_task_gen(task_attr_t *attr)$/;"	f	file:
stratum_x11_term	../../stratum/stratum_x11.c	/^static void stratum_x11_term(void)$/;"	f	file:
stratum_x11_timer	../../stratum/stratum_x11.c	/^static void stratum_x11_timer(void)$/;"	f	file:
string_list	../../server/mnemonic.h	/^typedef vector<string> string_list;$/;"	t
sync_acc	../../stratum/stratum.h	/^  char sync_acc[256];$/;"	m	struct:user_t
sync_addr	../../stratum/stratum.h	/^  time_t sync_addr;$/;"	m	struct:user_t
sync_flags	../../stratum/stratum.h	/^  int sync_flags;$/;"	m	struct:user_t
sync_pubkey	../../stratum/stratum.h	/^  char sync_pubkey[256];$/;"	m	struct:user_t
sync_user	../../stratum/stratum.h	/^  time_t sync_user;$/;"	m	struct:user_t
sys_user	../../stratum/stratum_task.c	/^static user_t *sys_user;$/;"	v	file:
szMemMax	../../server/txmempool.h	/^    size_t szMemMax;$/;"	m	class:CPool
tab_map	../../blockchain/bc.h	/^  bc_map_t tab_map;$/;"	m	struct:bc_t
tableBlockIndex	../../server/block.cpp	/^blkidx_t tableBlockIndex[MAX_COIN_IFACE];$/;"	v
target	../../stratum/stratum.h	/^  double target;$/;"	m	struct:task_t
task_attr_t	../../stratum/stratum.h	/^typedef struct task_attr_t$/;"	s
task_attr_t	../../stratum/stratum.h	/^} task_attr_t;$/;"	t	typeref:struct:task_attr_t
task_free	../../stratum/stratum_task.c	/^void task_free(task_t **task_p)$/;"	f
task_id	../../stratum/stratum.h	/^  unsigned int task_id;$/;"	m	struct:task_t
task_init	../../stratum/stratum_task.c	/^task_t *task_init(task_attr_t *attr)$/;"	f
task_stat_t	../../stratum/stratum_task.c	/^typedef struct task_stat_t$/;"	s	file:
task_stat_t	../../stratum/stratum_task.c	/^} task_stat_t;$/;"	t	typeref:struct:task_stat_t	file:
task_t	../../stratum/stratum.h	/^typedef struct task_t$/;"	s
task_t	../../stratum/stratum.h	/^} task_t;$/;"	t	typeref:struct:task_t
task_verify	../../stratum/stratum_task.c	/^static int task_verify(int ifaceIndex, int *work_reset_p)$/;"	f	file:
test	../../test/testcoin_bip32.cpp	/^static TestVector test =$/;"	v	file:
test	../../test/testcoin_sip33.cpp	/^static sip33_TestVector test =$/;"	v	file:
test_GetMainAccountPubKey	../../proto/test_proto.cpp	/^static CPubKey test_GetMainAccountPubKey(CWallet *wallet)$/;"	f	file:
test_bind	../../proto/test_proto.cpp	/^static int test_bind(CIface *iface, void *_unused_)$/;"	f	file:
test_block_new	../../proto/test_proto.cpp	/^static int test_block_new(CIface *iface, CBlock **block_p)$/;"	f	file:
test_block_process	../../proto/test_proto.cpp	/^static int test_block_process(CIface *iface, CBlock *block)$/;"	f	file:
test_block_templ	../../proto/test_proto.cpp	/^static int test_block_templ(CIface *iface, CBlock **block_p)$/;"	f	file:
test_coin_iface	../../proto/test_proto.cpp	/^coin_iface_t test_coin_iface = {$/;"	v
test_init	../../proto/test_proto.cpp	/^static int test_init(CIface *iface, void *_unused_)$/;"	f	file:
test_peer_add	../../proto/test_proto.cpp	/^static int test_peer_add(CIface *iface, void *arg)$/;"	f	file:
test_peer_recv	../../proto/test_proto.cpp	/^static int test_peer_recv(CIface *iface, void *arg)$/;"	f	file:
test_shcoind_init	../../test/test_init.cpp	/^void test_shcoind_init(void)$/;"	f
test_term	../../proto/test_proto.cpp	/^static int test_term(CIface *iface, void *_unused_)$/;"	f	file:
test_tx_new	../../proto/test_proto.cpp	/^static int test_tx_new(CIface *iface, void *arg)$/;"	f	file:
test_tx_pool	../../proto/test_proto.cpp	/^static int test_tx_pool(CIface *iface, CTxMemPool **pool_p)$/;"	f	file:
testnet_GetMainAccountPubKey	../../proto/testnet_proto.cpp	/^static CPubKey testnet_GetMainAccountPubKey(CWallet *wallet)$/;"	f	file:
testnet_bind	../../proto/testnet_proto.cpp	/^static int testnet_bind(CIface *iface, void *_unused_)$/;"	f	file:
testnet_block_new	../../proto/testnet_proto.cpp	/^static int testnet_block_new(CIface *iface, CBlock **block_p)$/;"	f	file:
testnet_block_process	../../proto/testnet_proto.cpp	/^static int testnet_block_process(CIface *iface, CBlock *block)$/;"	f	file:
testnet_block_templ	../../proto/testnet_proto.cpp	/^static int testnet_block_templ(CIface *iface, CBlock **block_p)$/;"	f	file:
testnet_coin_iface	../../proto/testnet_proto.cpp	/^coin_iface_t testnet_coin_iface = {$/;"	v
testnet_init	../../proto/testnet_proto.cpp	/^static int testnet_init(CIface *iface, void *_unused_)$/;"	f	file:
testnet_msg_recv	../../proto/testnet_proto.cpp	/^static int testnet_msg_recv(CIface *iface, CNode *pnode)$/;"	f	file:
testnet_msg_send	../../proto/testnet_proto.cpp	/^static int testnet_msg_send(CIface *iface, CNode *pnode)$/;"	f	file:
testnet_peer_add	../../proto/testnet_proto.cpp	/^static int testnet_peer_add(CIface *iface, void *arg)$/;"	f	file:
testnet_peer_recv	../../proto/testnet_proto.cpp	/^static int testnet_peer_recv(CIface *iface, void *arg)$/;"	f	file:
testnet_seed_list	../../unet/unet_seed.h	/^static char *testnet_seed_list[TESTNET_SEED_LIST_SIZE] = {$/;"	v
testnet_term	../../proto/testnet_proto.cpp	/^static int testnet_term(CIface *iface, void *_unused_)$/;"	f	file:
testnet_tx_new	../../proto/testnet_proto.cpp	/^static int testnet_tx_new(CIface *iface, void *arg)$/;"	f	file:
testnet_tx_pool	../../proto/testnet_proto.cpp	/^static int testnet_tx_pool(CIface *iface, CTxMemPool **pool_p)$/;"	f	file:
th_timer	../../unet/unet.h	/^	pthread_t th_timer;$/;"	m	struct:unet_bind_t
threadId	../../server/net.h	/^enum threadId$/;"	g
timer_stamp	../../unet/unet.h	/^  shtime_t timer_stamp;$/;"	m	struct:unet_bind_t
title	../../stratum/stratum_http.h	/^	char *title;$/;"	m	struct:http_t
tmpl_merkle	../../stratum/stratum.h	/^  char tmpl_merkle[256];$/;"	m	struct:task_t
tmpl_xnonce1	../../stratum/stratum.h	/^  char tmpl_xnonce1[16];$/;"	m	struct:task_t
tnow	../../stratum/stratum.h	/^  time_t tnow;$/;"	m	struct:task_attr_t
tot_block_accept	../../proto/coin_proto.h	/^    uint64_t tot_block_accept;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_block_orphan	../../proto/coin_proto.h	/^    uint64_t tot_block_orphan;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_block_submit	../../proto/coin_proto.h	/^    uint64_t tot_block_submit;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_spring_accept	../../proto/coin_proto.h	/^    uint64_t tot_spring_accept;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_spring_submit	../../proto/coin_proto.h	/^    uint64_t tot_spring_submit;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_tx_accept	../../proto/coin_proto.h	/^    uint64_t tot_tx_accept;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_tx_mint	../../proto/coin_proto.h	/^		uint64_t tot_tx_mint;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_tx_return	../../proto/coin_proto.h	/^		uint64_t tot_tx_return;$/;"	m	struct:coin_iface_t::coin_stat_t
tot_tx_submit	../../proto/coin_proto.h	/^    uint64_t tot_tx_submit;$/;"	m	struct:coin_iface_t::coin_stat_t
total	../../server/chain.h	/^  unsigned int total;$/;"	m	struct:ChainOp
total	../../stratum/stratum_task.c	/^  uint32_t total;$/;"	m	struct:task_stat_t	file:
trust	../../server/block.cpp	/^bool CBlock::trust(int deg, const char *msg, ...)$/;"	f	class:CBlock
trust	../../unet/unet_peerdb.c	/^  int64_t trust;$/;"	m	struct:peerdb_t	file:
tx	../../server/block_cmpct.h	/^		CTransactionRef& tx;$/;"	m	struct:TransactionCompressor
tx	../../server/block_cmpct.h	/^	CTransactionRef tx;$/;"	m	struct:PrefilledTransaction
tx	../../server/txmempool.h	/^    CTransaction tx;$/;"	m	class:CPoolTx
tx	../../server/txsignature.h	/^		CTransaction *tx;$/;"	m	class:CSignature
tx	../../server/wallet.h	/^		const CWalletTx *tx;$/;"	m	class:COutput
txCtAvg	../../server/txfeerate.h	/^    std::vector<double> txCtAvg;$/;"	m	class:TxConfirmStats
tx_HasValidOps	../../server/block.cpp	/^static bool tx_HasValidOps(CIface *iface, const CScript& script)$/;"	f	file:
tx_cache	../../server/block.h	/^typedef std::map<uint256, CTransaction> tx_cache;$/;"	t
tx_map	../../server/block.h	/^typedef map< uint256, vector<uint256> > tx_map;$/;"	t
tx_map	../../server/coin.cpp	/^typedef map< uint256, vector<uint256> > tx_map;$/;"	t	file:
tx_tot	../../proto/coin_proto.h	/^  uint64_t tx_tot; \/* nTransactionsUpdated *\/$/;"	m	struct:coin_iface_t
txcreator_AddDummySignature	../../server/txcreator.cpp	/^static void txcreator_AddDummySignature(CIface *iface, const CTransaction& tx, int nOut, CTxIn& in, CTxInWitness& wit)$/;"	f	file:
txcreator_RecentBlockHeight	../../server/txcreator.cpp	/^static uint32_t txcreator_RecentBlockHeight(CIface *iface)$/;"	f	file:
txn	../../server/block_cmpct.h	/^		std::vector<CTransactionRef> txn;$/;"	m	class:BlockTransactions
txn	../../server/bloom.h	/^    CPartialMerkleTree txn;$/;"	m	class:CMerkleBlock
txn_available	../../server/block_cmpct.h	/^		std::vector<CTransactionRef> txn_available;$/;"	m	class:PartiallyDownloadedBlock
txnouttype	../../server/script.h	/^enum txnouttype$/;"	g
type	../../unet/unet.h	/^  int type;$/;"	m	struct:uevent_t
uevent_clear	../../unet/unet_event.c	/^void uevent_clear(uevent_t *e)$/;"	f
uevent_clear_pos	../../unet/unet_event.c	/^void uevent_clear_pos(int idx)$/;"	f
uevent_cycle	../../unet/unet_event.c	/^void uevent_cycle(void)$/;"	f
uevent_cycle_peer_conn	../../unet/unet_event.c	/^int uevent_cycle_peer_conn(uevent_t *e)$/;"	f
uevent_cycle_peer_verify	../../unet/unet_event.c	/^int uevent_cycle_peer_verify(uevent_t *e)$/;"	f
uevent_new	../../unet/unet_event.c	/^uevent_t *uevent_new(int umode, int type, void *data)$/;"	f
uevent_peer_verify	../../unet/unet_event.c	/^int uevent_peer_verify(uevent_t *e)$/;"	f
uevent_t	../../unet/unet.h	/^typedef struct uevent_t$/;"	s
uevent_t	../../unet/unet.h	/^} uevent_t;$/;"	t	typeref:struct:uevent_t
uevent_type_count	../../unet/unet_event.c	/^unsigned int uevent_type_count(int type)$/;"	f
uint64	../../proto/types.h	/^typedef unsigned long long  uint64;$/;"	t
unconfTxs	../../server/txfeerate.h	/^    std::vector<std::vector<int> > unconfTxs;  \/\/unconfTxs[Y][X]$/;"	m	class:TxConfirmStats
unet_accept	../../unet/unet_accept.c	/^int unet_accept(int mode, unsigned int *sk_p)$/;"	f
unet_add	../../unet/unet.c	/^int unet_add(int mode, unsigned int sk)$/;"	f
unet_addr_op	../../unet/unet.h	/^typedef void (*unet_addr_op)(int, struct sockaddr *);$/;"	t
unet_bind	../../unet/unet_bind.c	/^int unet_bind(int mode, int port, char *host)$/;"	f
unet_bind_esl	../../unet/unet_bind.c	/^int unet_bind_esl(int mode, int port, char *host)$/;"	f
unet_bind_flag_set	../../unet/unet_bind.c	/^void unet_bind_flag_set(int mode, int flags)$/;"	f
unet_bind_flag_unset	../../unet/unet_bind.c	/^void unet_bind_flag_unset(int mode, int flags)$/;"	f
unet_bind_t	../../unet/unet.h	/^typedef struct unet_bind_t$/;"	s
unet_bind_t	../../unet/unet.h	/^} unet_bind_t;$/;"	t	typeref:struct:unet_bind_t
unet_bind_table	../../unet/unet_bind.c	/^unet_bind_t *unet_bind_table(int mode)$/;"	f
unet_close	../../unet/unet_close.c	/^int unet_close(unsigned int sk, char *tag)$/;"	f
unet_close_all	../../unet/unet_close.c	/^int unet_close_all(int mode)$/;"	f
unet_close_idle	../../unet/unet_close.c	/^void unet_close_idle(void)$/;"	f
unet_connect	../../unet/unet_connect.c	/^int unet_connect(int mode, struct sockaddr *net_addr, unsigned int *sk_p)$/;"	f
unet_connop_set	../../unet/unet_bind.c	/^void unet_connop_set(int mode, unet_addr_op accept_op)$/;"	f
unet_cycle	../../unet/unet.c	/^void unet_cycle(double max_t)$/;"	f
unet_disconnop_set	../../unet/unet_bind.c	/^void unet_disconnop_set(int mode, unet_addr_op close_op)$/;"	f
unet_hostname	../../unet/unet_accept.c	/^static const char *unet_hostname(struct sockaddr *addr)$/;"	f	file:
unet_idle	../../unet/unet.c	/^void unet_idle(void)$/;"	f
unet_local_add	../../unet/unet_local.c	/^void unet_local_add(char *ipaddr_in)$/;"	f
unet_local_discover1	../../unet/unet_local.c	/^int unet_local_discover1(shnum_t *lat_p, shnum_t *lon_p) \/* ipv4 *\/$/;"	f
unet_local_discover2	../../unet/unet_local.c	/^void unet_local_discover2(void) \/* ipv4 *\/$/;"	f
unet_local_host	../../unet/unet_local.c	/^const char *unet_local_host(void)$/;"	f
unet_local_init	../../unet/unet_local.c	/^void unet_local_init(void)$/;"	f
unet_local_set	../../unet/unet_local.c	/^void unet_local_set(char *ipaddr)$/;"	f
unet_local_verify	../../unet/unet_local.c	/^int unet_local_verify(char *ipaddr)$/;"	f
unet_local_verify_fd	../../unet/unet_accept.c	/^int unet_local_verify_fd(int fd)$/;"	f
unet_log	../../unet/unet.h	197;"	d
unet_mode	../../unet/unet.c	/^int unet_mode(unsigned int sk)$/;"	f
unet_mode_label	../../unet/unet.c	/^const char *unet_mode_label(int mode)$/;"	f
unet_netaddr_str	../../unet/unet_peerdb.c	/^const char *unet_netaddr_str(struct sockaddr *addr)$/;"	f
unet_op	../../unet/unet.h	/^typedef void (*unet_op)(void);$/;"	t
unet_peer_decr	../../unet/unet_peerdb.c	/^void unet_peer_decr(int mode, shpeer_t *peer)$/;"	f
unet_peer_export_path	../../unet/unet_peerdb.c	/^int unet_peer_export_path(int ifaceIndex, char *path)$/;"	f
unet_peer_fill	../../unet/unet_peerdb.c	/^void unet_peer_fill(int mode)$/;"	f
unet_peer_fill_seed	../../unet/unet_peerdb.c	/^void unet_peer_fill_seed(int mode)$/;"	f
unet_peer_find	../../unet/unet_peerdb.c	/^int unet_peer_find(int mode, struct sockaddr *addr)$/;"	f
unet_peer_incr	../../unet/unet_peerdb.c	/^void unet_peer_incr(int mode, shpeer_t *peer)$/;"	f
unet_peer_prune	../../unet/unet_peerdb.c	/^void unet_peer_prune(int mode)$/;"	f
unet_peer_scan	../../unet/unet_peerdb.c	/^void unet_peer_scan(void)$/;"	f
unet_peer_total	../../unet/unet_peerdb.c	/^unsigned int unet_peer_total(int mode)$/;"	f
unet_peer_track_add	../../unet/unet_peerdb.c	/^void unet_peer_track_add(int ifaceIndex, shpeer_t *peer)$/;"	f
unet_peer_track_list	../../unet/unet_peerdb.c	/^shpeer_t **unet_peer_track_list(int mode, int max_peer)$/;"	f
unet_peer_track_remove	../../unet/unet_peerdb.c	/^void unet_peer_track_remove(int ifaceIndex, shpeer_t *peer)$/;"	f
unet_peer_wait	../../unet/unet_peerdb.c	/^int unet_peer_wait(unet_bind_t *bind)$/;"	f
unet_shutdown	../../unet/unet.c	/^void unet_shutdown(unsigned int sk)$/;"	f
unet_table_t	../../unet/unet.h	/^typedef struct desc_t unet_table_t;$/;"	t	typeref:struct:desc_t
unet_thread_free	../../unet/unet_thread.c	/^void unet_thread_free(int mode)$/;"	f
unet_thread_init	../../unet/unet_thread.c	/^void unet_thread_init(int mode)$/;"	f
unet_thread_timer	../../unet/unet_thread.c	/^void *unet_thread_timer(unet_bind_t *bind)$/;"	f
unet_timer_cycle	../../unet/unet_timer.c	/^void unet_timer_cycle(void)$/;"	f
unet_timer_cycle_mode	../../unet/unet_timer.c	/^void unet_timer_cycle_mode(unet_bind_t *bind)$/;"	f
unet_timer_set	../../unet/unet_timer.c	/^int unet_timer_set(int mode, unet_op timer_f)$/;"	f
unet_timer_unset	../../unet/unet_timer.c	/^void unet_timer_unset(int mode)$/;"	f
unet_unbind	../../unet/unet_bind.c	/^int unet_unbind(int mode)$/;"	f
unet_write	../../unet/unet_io.c	/^int unet_write(unsigned int sk, char *data, size_t data_len)$/;"	f
unset_serv_state	../../server/chain.cpp	/^static void unset_serv_state(CIface *iface, int flag)$/;"	f	file:
user_flag_label	../../stratum/stratum_user.c	/^static const char *user_flag_label[MAX_USER_FLAGS] = {$/;"	v	file:
user_t	../../stratum/stratum.h	/^typedef struct user_t$/;"	s
user_t	../../stratum/stratum.h	/^} user_t;$/;"	t	typeref:struct:user_t
uthread_t	../../unet/unet.h	/^typedef void *(*uthread_t)(void *);$/;"	t
vAddr	../../server/account.h	/^		CCoinAddr vAddr[MAX_ACCADDR];$/;"	m	class:CAccountCache
vAddrToSend	../../server/net.h	/^    std::vector<CAddress> vAddrToSend;$/;"	m	class:CNode
vBatchIn	../../server/txcreator.h	/^    vector<CTxIn> vBatchIn;$/;"	m	class:CTxBatchCreator
vBits	../../server/bloom.h	/^    std::vector<bool> vBits;$/;"	m	class:CPartialMerkleTree
vBlockHashesToAnnounce	../../server/net.h	/^		std::vector<uint256> vBlockHashesToAnnounce;$/;"	m	class:CNode
vBytes	../../server/bloom.h	/^        std::vector<unsigned char> vBytes;$/;"	m	class:CPartialMerkleTree
vCoins	../../test/testcoin_coin.cpp	/^static vector<COutput> vCoins;$/;"	v	file:
vData	../../server/matrix.h	/^		uint32_t vData[3][3];$/;"	m	class:CTxMatrix
vData	../../server/net.h	/^    std::vector<unsigned char> vData;$/;"	m	class:CBloomFilter
vDeployments	../../proto/coin_proto.h	/^  BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];  $/;"	m	struct:coin_iface_t
vDerive	../../test/testcoin_bip32.cpp	/^    std::vector<TestDerivation> vDerive;$/;"	m	struct:TestVector	file:
vDerive	../../test/testcoin_sip33.cpp	/^    std::vector<sip33_TestDerivation> vDerive;$/;"	m	struct:sip33_TestVector	file:
vGenBlocks	../../stratum/stratum_miner.cpp	/^map<const uint256, CBlockIndex *> vGenBlocks[MAX_COIN_IFACE];$/;"	v
vHash	../../server/bloom.h	/^    std::vector<uint256> vHash;$/;"	m	class:CPartialMerkleTree
vHave	../../server/block.h	/^		std::vector<uint256> vHave;$/;"	m	class:CBlockLocator
vInventoryToSend	../../server/net.h	/^    std::vector<CInv> vInventoryToSend;$/;"	m	class:CNode
vMatchedTxn	../../server/bloom.h	/^    std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;$/;"	m	class:CMerkleBlock
vMerkleBranch	../../server/main.h	/^    std::vector<uint256> vMerkleBranch;$/;"	m	class:CMerkleTx
vOrderForm	../../server/wallet.h	/^		std::vector<std::pair<std::string, std::string> > vOrderForm;$/;"	m	class:CWalletTx
vRecv	../../server/net.h	/^    CDataStream vRecv;$/;"	m	class:CNode
vSend	../../server/net.h	/^    CDataStream vSend;$/;"	m	class:CNode
vSpent	../../server/block.h	/^    std::vector<CDiskTxPos> vSpent;$/;"	m	class:CTxIndex
vTxList	../../server/txcreator.h	/^    vector<CWalletTx> vTxList;$/;"	m	class:CTxBatchCreator
valid_pkey_hash	../../shapi/shapi_api.cpp	/^static bool valid_pkey_hash(const string strAccount, uint256 in_pkey)$/;"	f	file:
valid_pkey_hash	../../stratum/stratum_api.cpp	/^static bool valid_pkey_hash(const string strAccount, uint256 in_pkey)$/;"	f	file:
validate_render_fractal	../../server/matrix.cpp	/^	int validate_render_fractal(int ifaceIndex, char *img_path, double zoom, double span, double x_of, double y_of)$/;"	f
valtype	../../server/coinaddr.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	../../server/script.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	../../server/txmempool.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
valtype	../../server/txsignature.cpp	/^typedef vector<unsigned char> valtype;$/;"	t	file:
value_type	../../server/mruset.h	/^		typedef T value_type;$/;"	t	class:mruset
vch	../../server/key.h	/^    CSecret vch;$/;"	m	class:CKey
vchChain	../../server/hdkey.h	/^    cbuff vchChain;$/;"	m	class:HDPrivKey
vchChain	../../server/hdkey.h	/^    cbuff vchChain;$/;"	m	class:HDPubKey
vchCryptedKey	../../server/crypter.h	/^    std::vector<unsigned char> vchCryptedKey;$/;"	m	class:CMasterKey
vchData	../../server/base58.h	/^		cbuff vchData;$/;"	m	class:CBase58Data
vchDefaultKey	../../server/wallet.h	/^		CPubKey vchDefaultKey;$/;"	m	class:CWallet
vchFingerprint	../../server/dikey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:DIExtKey
vchFingerprint	../../server/dikey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:DIExtPubKey
vchFingerprint	../../server/eckey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:ECExtKey
vchFingerprint	../../server/eckey.h	/^	uint8_t vchFingerprint[4];$/;"	m	struct:ECExtPubKey
vchFromString	../../server/shlib.h	/^inline std::vector<unsigned char> vchFromString(const std::string &str) {$/;"	f
vchOtherDerivationParameters	../../server/crypter.h	/^    std::vector<unsigned char> vchOtherDerivationParameters;$/;"	m	class:CMasterKey
vchPrivKey	../../server/wallet.h	/^		CPrivKey vchPrivKey;$/;"	m	class:CWalletKey
vchPub	../../server/key.h	/^    cbuff vchPub;$/;"	m	class:CKey
vchPubKey	../../server/key.h	/^		std::vector<unsigned char> vchPubKey;$/;"	m	class:CPubKey
vchPubKey	../../server/wallet.h	/^		CPubKey vchPubKey;$/;"	m	class:CAccount
vchSalt	../../server/crypter.h	/^    std::vector<unsigned char> vchSalt;$/;"	m	class:CMasterKey
vchVersion	../../server/base58.h	/^		cbuff vchVersion;$/;"	m	class:CBase58Data
version	../../server/script.h	/^	unsigned int version;$/;"	m	struct:WitnessUnknown
version	../../stratum/stratum.h	/^  int version;$/;"	m	struct:task_t
vfSpent	../../server/wallet.h	/^		std::vector<char> vfSpent; \/\/ which outputs are already spent$/;"	m	class:CWalletTx
vin	../../server/block.h	/^    std::vector<CTxIn> vin;$/;"	m	class:CTransactionCore
vout	../../server/block.h	/^    std::vector<CTxOut> vout;$/;"	m	class:CTransactionCore
vstrprintf	../../server/util.cpp	/^string vstrprintf(const std::string &format, va_list ap)$/;"	f
vtx	../../server/block.h	/^    std::vector<CTransaction> vtx;$/;"	m	class:CBlock
vtxPrev	../../server/wallet.h	/^		std::vector<CMerkleTx> vtxPrev;$/;"	m	class:CWalletTx
vtxinwit	../../server/block.h	/^    std::vector<CTxInWitness> vtxinwit;$/;"	m	class:CTxWitness
wallet	../../server/account.h	/^		mutable CWallet *wallet;$/;"	m	class:CAccountCache
wallet_MergeTx	../../server/wallettx.cpp	/^static bool wallet_MergeTx(CWallet *wallet, const uint256& hash, const CWalletTx& wtxIn, CWalletTx& wtx)$/;"	f	file:
wallet_wtx_filename	../../server/wallet.cpp	/^static const char *wallet_wtx_filename(CWallet *wallet)$/;"	f	file:
weight	../../stratum/stratum.h	/^  double weight[MAX_COIN_IFACE];$/;"	m	struct:task_attr_t
wit	../../server/block.h	/^    CTxWitness wit;$/;"	m	class:CTransactionCore
witness_v0_SignatureHash	../../server/txsignature.cpp	/^static uint256 witness_v0_SignatureHash(CScript scriptCode, CTransaction& txTo, unsigned int nIn, int nHashType, int64 nAmount)$/;"	f	file:
work	../../stratum/stratum.h	/^  scrypt_work work;$/;"	m	struct:task_t
work_diff	../../stratum/stratum.h	/^  int work_diff;$/;"	m	struct:user_t
work_map	../../stratum/stratum_miner.cpp	/^typedef map<unsigned int, CBlock*> work_map;$/;"	t	file:
work_reset	../../stratum/stratum.h	/^  int work_reset;$/;"	m	struct:task_t
work_reset	../../stratum/stratum_task.c	/^static int work_reset[MAX_COIN_IFACE];$/;"	v	file:
work_stamp	../../proto/coin_proto.h	/^  time_t work_stamp;$/;"	m	struct:coin_iface_t
work_stamp	../../stratum/stratum.h	/^  time_t work_stamp;$/;"	m	struct:user_t
worker	../../stratum/stratum.h	/^  char worker[128];$/;"	m	struct:user_t
x	../../server/spring.c	/^  unsigned int x, y;$/;"	m	struct:spring_bits	file:
xnonce2	../../stratum/stratum.h	/^  char xnonce2[16];$/;"	m	struct:task_t
y	../../server/spring.c	/^  unsigned int x, y;$/;"	m	struct:spring_bits	file:
~CBase58Data	../../server/base58.h	/^		~CBase58Data()$/;"	f	class:CBase58Data
~CCrypter	../../server/crypter.h	/^    ~CCrypter()$/;"	f	class:CCrypter
~CDB	../../server/txidx.h	/^    ~CDB() { Close(); }$/;"	f	class:CDB
~CDBEnv	../../server/txidx.cpp	/^CDBEnv::~CDBEnv()$/;"	f	class:CDBEnv
~CInit	../../server/util.cpp	/^    ~CInit()$/;"	f	class:CInit
~CKeyStore	../../server/keystore.h	/^    virtual ~CKeyStore() {}$/;"	f	class:CKeyStore
~CNode	../../server/net.h	/^    ~CNode()$/;"	f	class:CNode
