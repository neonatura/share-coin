!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARG_CHECK	secp256k1.c	21;"	d	file:
BE32	hash_impl.h	272;"	d
BE32	hash_impl.h	31;"	d
BE32	hash_impl.h	33;"	d
CHECK	secp256k1_util.h	46;"	d
CHECK	secp256k1_util.h	52;"	d
CURVE_B	group_impl.h	/^const int CURVE_B = 2;$/;"	v
CURVE_B	group_impl.h	/^const int CURVE_B = 4;$/;"	v
CURVE_B	group_impl.h	/^const int CURVE_B = 7;$/;"	v
Ch	hash_impl.h	16;"	d
Ch	hash_impl.h	279;"	d
ECMULT_CONST_TABLE_GET_GE	ecmult_const_impl.h	23;"	d
ECMULT_TABLE_GET_GE	ecmult_impl.h	134;"	d
ECMULT_TABLE_GET_GE_STORAGE	ecmult_impl.h	145;"	d
ECMULT_TABLE_SIZE	ecmult_impl.h	45;"	d
EXPECT	secp256k1_util.h	40;"	d
EXPECT	secp256k1_util.h	42;"	d
I64FORMAT	secp256k1_util.h	94;"	d
I64FORMAT	secp256k1_util.h	97;"	d
I64uFORMAT	secp256k1_util.h	95;"	d
I64uFORMAT	secp256k1_util.h	98;"	d
Maj	hash_impl.h	17;"	d
Maj	hash_impl.h	278;"	d
NUM_LIMBS	num_gmp.h	12;"	d
Round	hash_impl.h	23;"	d
Round	hash_impl.h	273;"	d
SECP256K1_FE_CONST	field_10x26.h	36;"	d
SECP256K1_FE_CONST	field_10x26.h	38;"	d
SECP256K1_FE_CONST	field_5x52.h	31;"	d
SECP256K1_FE_CONST	field_5x52.h	33;"	d
SECP256K1_FE_CONST_INNER	field_10x26.h	22;"	d
SECP256K1_FE_CONST_INNER	field_5x52.h	22;"	d
SECP256K1_FE_STORAGE_CONST	field_10x26.h	45;"	d
SECP256K1_FE_STORAGE_CONST	field_5x52.h	40;"	d
SECP256K1_FE_STORAGE_CONST_GET	field_10x26.h	46;"	d
SECP256K1_GEJ_CONST	group.h	31;"	d
SECP256K1_GEJ_CONST_INFINITY	group.h	32;"	d
SECP256K1_GE_CONST	group.h	20;"	d
SECP256K1_GE_CONST_INFINITY	group.h	21;"	d
SECP256K1_GE_STORAGE_CONST	group.h	39;"	d
SECP256K1_GE_STORAGE_CONST_GET	group.h	41;"	d
SECP256K1_GNUC_EXT	secp256k1_util.h	103;"	d
SECP256K1_GNUC_EXT	secp256k1_util.h	105;"	d
SECP256K1_N_0	scalar_4x64_impl.h	11;"	d
SECP256K1_N_0	scalar_8x32_impl.h	11;"	d
SECP256K1_N_1	scalar_4x64_impl.h	12;"	d
SECP256K1_N_1	scalar_8x32_impl.h	12;"	d
SECP256K1_N_2	scalar_4x64_impl.h	13;"	d
SECP256K1_N_2	scalar_8x32_impl.h	13;"	d
SECP256K1_N_3	scalar_4x64_impl.h	14;"	d
SECP256K1_N_3	scalar_8x32_impl.h	14;"	d
SECP256K1_N_4	scalar_8x32_impl.h	15;"	d
SECP256K1_N_5	scalar_8x32_impl.h	16;"	d
SECP256K1_N_6	scalar_8x32_impl.h	17;"	d
SECP256K1_N_7	scalar_8x32_impl.h	18;"	d
SECP256K1_N_C_0	scalar_4x64_impl.h	17;"	d
SECP256K1_N_C_0	scalar_8x32_impl.h	21;"	d
SECP256K1_N_C_1	scalar_4x64_impl.h	18;"	d
SECP256K1_N_C_1	scalar_8x32_impl.h	22;"	d
SECP256K1_N_C_2	scalar_4x64_impl.h	19;"	d
SECP256K1_N_C_2	scalar_8x32_impl.h	23;"	d
SECP256K1_N_C_3	scalar_8x32_impl.h	24;"	d
SECP256K1_N_C_4	scalar_8x32_impl.h	25;"	d
SECP256K1_N_H_0	scalar_4x64_impl.h	22;"	d
SECP256K1_N_H_0	scalar_8x32_impl.h	28;"	d
SECP256K1_N_H_1	scalar_4x64_impl.h	23;"	d
SECP256K1_N_H_1	scalar_8x32_impl.h	29;"	d
SECP256K1_N_H_2	scalar_4x64_impl.h	24;"	d
SECP256K1_N_H_2	scalar_8x32_impl.h	30;"	d
SECP256K1_N_H_3	scalar_4x64_impl.h	25;"	d
SECP256K1_N_H_3	scalar_8x32_impl.h	31;"	d
SECP256K1_N_H_4	scalar_8x32_impl.h	32;"	d
SECP256K1_N_H_5	scalar_8x32_impl.h	33;"	d
SECP256K1_N_H_6	scalar_8x32_impl.h	34;"	d
SECP256K1_N_H_7	scalar_8x32_impl.h	35;"	d
SECP256K1_RESTRICT	secp256k1_util.h	78;"	d
SECP256K1_RESTRICT	secp256k1_util.h	82;"	d
SECP256K1_RESTRICT	secp256k1_util.h	84;"	d
SECP256K1_RESTRICT	secp256k1_util.h	86;"	d
SECP256K1_RESTRICT	secp256k1_util.h	89;"	d
SECP256K1_SCALAR_CONST	scalar_4x64.h	17;"	d
SECP256K1_SCALAR_CONST	scalar_8x32.h	17;"	d
Sigma0	hash_impl.h	18;"	d
Sigma0	hash_impl.h	277;"	d
Sigma1	hash_impl.h	19;"	d
Sigma1	hash_impl.h	276;"	d
TEST_FAILURE	secp256k1_util.h	28;"	d
TEST_FAILURE	secp256k1_util.h	33;"	d
USE_ASM_X86_64	basic-config.h	12;"	d
USE_BASIC_CONFIG	gen_context.c	7;"	d	file:
USE_ENDOMORPHISM	basic-config.h	13;"	d
USE_FIELD_10X26	basic-config.h	14;"	d
USE_FIELD_10X26	basic-config.h	28;"	d
USE_FIELD_5X52	basic-config.h	15;"	d
USE_FIELD_INV_BUILTIN	basic-config.h	16;"	d
USE_FIELD_INV_BUILTIN	basic-config.h	26;"	d
USE_FIELD_INV_NUM	basic-config.h	17;"	d
USE_NUM_GMP	basic-config.h	18;"	d
USE_NUM_NONE	basic-config.h	19;"	d
USE_NUM_NONE	basic-config.h	25;"	d
USE_SCALAR_4X64	basic-config.h	20;"	d
USE_SCALAR_8X32	basic-config.h	21;"	d
USE_SCALAR_8X32	basic-config.h	29;"	d
USE_SCALAR_INV_BUILTIN	basic-config.h	22;"	d
USE_SCALAR_INV_BUILTIN	basic-config.h	27;"	d
USE_SCALAR_INV_NUM	basic-config.h	23;"	d
VERIFY_BITS	field_10x26_impl.h	439;"	d
VERIFY_BITS	field_10x26_impl.h	441;"	d
VERIFY_BITS	field_5x52_int128_impl.h	13;"	d
VERIFY_BITS	field_5x52_int128_impl.h	15;"	d
VERIFY_CHECK	secp256k1_util.h	61;"	d
VERIFY_CHECK	secp256k1_util.h	64;"	d
VERIFY_SETUP	secp256k1_util.h	62;"	d
VERIFY_SETUP	secp256k1_util.h	65;"	d
WINDOW_A	ecmult_impl.h	21;"	d
WINDOW_A	ecmult_impl.h	24;"	d
WINDOW_A	ecmult_impl.h	27;"	d
WINDOW_A	ecmult_impl.h	32;"	d
WINDOW_G	ecmult_impl.h	22;"	d
WINDOW_G	ecmult_impl.h	25;"	d
WINDOW_G	ecmult_impl.h	28;"	d
WINDOW_G	ecmult_impl.h	37;"	d
WINDOW_G	ecmult_impl.h	40;"	d
WNAF_BITS	ecmult_const_impl.h	16;"	d
WNAF_BITS	ecmult_const_impl.h	18;"	d
WNAF_SIZE	ecmult_const_impl.h	20;"	d
_SECP256K1_BASIC_CONFIG_	basic-config.h	8;"	d
_SECP256K1_BENCH_H_	bench.h	8;"	d
_SECP256K1_ECDSA_	ecdsa.h	8;"	d
_SECP256K1_ECDSA_IMPL_H_	ecdsa_impl.h	9;"	d
_SECP256K1_ECKEY_	eckey.h	8;"	d
_SECP256K1_ECKEY_IMPL_H_	eckey_impl.h	8;"	d
_SECP256K1_ECMULT_	ecmult.h	8;"	d
_SECP256K1_ECMULT_CONST_	ecmult_const.h	8;"	d
_SECP256K1_ECMULT_CONST_IMPL_	ecmult_const_impl.h	8;"	d
_SECP256K1_ECMULT_GEN_	ecmult_gen.h	8;"	d
_SECP256K1_ECMULT_GEN_IMPL_H_	ecmult_gen_impl.h	8;"	d
_SECP256K1_ECMULT_IMPL_H_	ecmult_impl.h	8;"	d
_SECP256K1_FIELD_	field.h	8;"	d
_SECP256K1_FIELD_IMPL_H_	field_impl.h	8;"	d
_SECP256K1_FIELD_INNER5X52_IMPL_H_	field_5x52_asm_impl.h	15;"	d
_SECP256K1_FIELD_INNER5X52_IMPL_H_	field_5x52_int128_impl.h	8;"	d
_SECP256K1_FIELD_REPR_	field_10x26.h	8;"	d
_SECP256K1_FIELD_REPR_	field_5x52.h	8;"	d
_SECP256K1_FIELD_REPR_IMPL_H_	field_10x26_impl.h	8;"	d
_SECP256K1_FIELD_REPR_IMPL_H_	field_5x52_impl.h	8;"	d
_SECP256K1_GROUP_	group.h	8;"	d
_SECP256K1_GROUP_IMPL_H_	group_impl.h	8;"	d
_SECP256K1_HASH_	hash.h	8;"	d
_SECP256K1_HASH_IMPL_H_	hash_impl.h	8;"	d
_SECP256K1_NUM_	num.h	8;"	d
_SECP256K1_NUM_IMPL_H_	num_impl.h	8;"	d
_SECP256K1_NUM_REPR_	num_gmp.h	8;"	d
_SECP256K1_NUM_REPR_IMPL_H_	num_gmp_impl.h	8;"	d
_SECP256K1_SCALAR_	scalar.h	8;"	d
_SECP256K1_SCALAR_IMPL_H_	scalar_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_	scalar_4x64.h	8;"	d
_SECP256K1_SCALAR_REPR_	scalar_8x32.h	8;"	d
_SECP256K1_SCALAR_REPR_	scalar_low.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	scalar_4x64_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	scalar_8x32_impl.h	8;"	d
_SECP256K1_SCALAR_REPR_IMPL_H_	scalar_low_impl.h	8;"	d
_SECP256K1_TESTRAND_H_	testrand.h	8;"	d
_SECP256K1_TESTRAND_IMPL_H_	testrand_impl.h	8;"	d
_SECP256K1_UTIL_H_	secp256k1_util.h	8;"	d
_mpn_copyi	num_gmp_impl.h	/^static void _mpn_copyi(mp_ptr rp, mp_srcptr up, mp_size_t n)$/;"	f
_mpn_copyi	num_gmp_impl.h	250;"	d
bench_context_sign	bench_internal.c	/^void bench_context_sign(void* arg) {$/;"	f
bench_context_verify	bench_internal.c	/^void bench_context_verify(void* arg) {$/;"	f
bench_ecdh	bench_ecdh.c	/^static void bench_ecdh(void* arg) {$/;"	f	file:
bench_ecdh_setup	bench_ecdh.c	/^static void bench_ecdh_setup(void* arg) {$/;"	f	file:
bench_ecdh_t	bench_ecdh.c	/^} bench_ecdh_t;$/;"	t	typeref:struct:__anon1	file:
bench_ecmult_wnaf	bench_internal.c	/^void bench_ecmult_wnaf(void* arg) {$/;"	f
bench_field_inverse	bench_internal.c	/^void bench_field_inverse(void* arg) {$/;"	f
bench_field_inverse_var	bench_internal.c	/^void bench_field_inverse_var(void* arg) {$/;"	f
bench_field_mul	bench_internal.c	/^void bench_field_mul(void* arg) {$/;"	f
bench_field_normalize	bench_internal.c	/^void bench_field_normalize(void* arg) {$/;"	f
bench_field_normalize_weak	bench_internal.c	/^void bench_field_normalize_weak(void* arg) {$/;"	f
bench_field_sqr	bench_internal.c	/^void bench_field_sqr(void* arg) {$/;"	f
bench_field_sqrt	bench_internal.c	/^void bench_field_sqrt(void* arg) {$/;"	f
bench_group_add_affine	bench_internal.c	/^void bench_group_add_affine(void* arg) {$/;"	f
bench_group_add_affine_var	bench_internal.c	/^void bench_group_add_affine_var(void* arg) {$/;"	f
bench_group_add_var	bench_internal.c	/^void bench_group_add_var(void* arg) {$/;"	f
bench_group_double_var	bench_internal.c	/^void bench_group_double_var(void* arg) {$/;"	f
bench_group_jacobi_var	bench_internal.c	/^void bench_group_jacobi_var(void* arg) {$/;"	f
bench_hmac_sha256	bench_internal.c	/^void bench_hmac_sha256(void* arg) {$/;"	f
bench_inv_t	bench_internal.c	/^} bench_inv_t;$/;"	t	typeref:struct:__anon2	file:
bench_num_jacobi	bench_internal.c	/^void bench_num_jacobi(void* arg) {$/;"	f
bench_recover	bench_recover.c	/^void bench_recover(void* arg) {$/;"	f
bench_recover_setup	bench_recover.c	/^void bench_recover_setup(void* arg) {$/;"	f
bench_recover_t	bench_recover.c	/^} bench_recover_t;$/;"	t	typeref:struct:__anon3	file:
bench_rfc6979_hmac_sha256	bench_internal.c	/^void bench_rfc6979_hmac_sha256(void* arg) {$/;"	f
bench_scalar_add	bench_internal.c	/^void bench_scalar_add(void* arg) {$/;"	f
bench_scalar_inverse	bench_internal.c	/^void bench_scalar_inverse(void* arg) {$/;"	f
bench_scalar_inverse_var	bench_internal.c	/^void bench_scalar_inverse_var(void* arg) {$/;"	f
bench_scalar_mul	bench_internal.c	/^void bench_scalar_mul(void* arg) {$/;"	f
bench_scalar_negate	bench_internal.c	/^void bench_scalar_negate(void* arg) {$/;"	f
bench_scalar_split	bench_internal.c	/^void bench_scalar_split(void* arg) {$/;"	f
bench_scalar_sqr	bench_internal.c	/^void bench_scalar_sqr(void* arg) {$/;"	f
bench_setup	bench_internal.c	/^void bench_setup(void* arg) {$/;"	f
bench_sha256	bench_internal.c	/^void bench_sha256(void* arg) {$/;"	f
bench_sign	bench_sign.c	/^static void bench_sign(void* arg) {$/;"	f	file:
bench_sign_setup	bench_sign.c	/^static void bench_sign_setup(void* arg) {$/;"	f	file:
bench_sign_t	bench_sign.c	/^} bench_sign_t;$/;"	t	typeref:struct:__anon6	file:
bench_wnaf_const	bench_internal.c	/^void bench_wnaf_const(void* arg) {$/;"	f
benchmark_schnorr_init	bench_schnorr_verify.c	/^static void benchmark_schnorr_init(void* arg) {$/;"	f	file:
benchmark_schnorr_sig_t	bench_schnorr_verify.c	/^} benchmark_schnorr_sig_t;$/;"	t	typeref:struct:__anon4	file:
benchmark_schnorr_verify	bench_schnorr_verify.c	/^static void benchmark_schnorr_verify(void* arg) {$/;"	f	file:
benchmark_schnorr_verify_t	bench_schnorr_verify.c	/^} benchmark_schnorr_verify_t;$/;"	t	typeref:struct:__anon5	file:
benchmark_verify	bench_verify.c	/^static void benchmark_verify(void* arg) {$/;"	f	file:
benchmark_verify_openssl	bench_verify.c	/^static void benchmark_verify_openssl(void* arg) {$/;"	f	file:
benchmark_verify_t	bench_verify.c	/^} benchmark_verify_t;$/;"	t	typeref:struct:__anon7	file:
blind	ecmult_gen.h	/^    secp256k1_scalar blind;$/;"	m	struct:__anon8
buf	hash.h	/^    uint32_t buf[16]; \/* In big endian *\/$/;"	m	struct:__anon17
bytes	hash.h	/^    size_t bytes;$/;"	m	struct:__anon17
checked_malloc	secp256k1_util.h	/^static SECP256K1_INLINE void *checked_malloc(const secp256k1_callback* cb, size_t size) {$/;"	f
ctx	bench_ecdh.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon1	file:
ctx	bench_recover.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon3	file:
ctx	bench_schnorr_verify.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon5	file:
ctx	bench_sign.c	/^    secp256k1_context* ctx;$/;"	m	struct:__anon6	file:
ctx	bench_verify.c	/^    secp256k1_context *ctx;$/;"	m	struct:__anon7	file:
d	scalar_4x64.h	/^    uint64_t d[4];$/;"	m	struct:__anon21
d	scalar_8x32.h	/^    uint32_t d[8];$/;"	m	struct:__anon22
data	bench_internal.c	/^    unsigned char data[64];$/;"	m	struct:__anon2	file:
data	num_gmp.h	/^    mp_limb_t data[2*NUM_LIMBS];$/;"	m	struct:__anon20
data	secp256k1_util.h	/^    const void* data;$/;"	m	struct:__anon23
default_error_callback	gen_context.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback	secp256k1.c	/^static const secp256k1_callback default_error_callback = {$/;"	v	file:
default_error_callback_fn	gen_context.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_error_callback_fn	secp256k1.c	/^static void default_error_callback_fn(const char* str, void* data) {$/;"	f	file:
default_illegal_callback	secp256k1.c	/^static const secp256k1_callback default_illegal_callback = {$/;"	v	file:
default_illegal_callback_fn	secp256k1.c	/^static void default_illegal_callback_fn(const char* str, void* data) {$/;"	f	file:
ec_group	bench_verify.c	/^    EC_GROUP* ec_group;$/;"	m	struct:__anon7	file:
ec_privkey_export_der	secp256k1_aux.c	/^int ec_privkey_export_der(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed) $/;"	f
ec_privkey_import_der	secp256k1_aux.c	/^int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen) $/;"	f
ecdsa_signature_parse_der_lax	secp256k1_aux.c	/^int ecdsa_signature_parse_der_lax(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) $/;"	f
ecmult_ctx	secp256k1.c	/^    secp256k1_ecmult_context ecmult_ctx;$/;"	m	struct:secp256k1_context_struct	file:
ecmult_gen_ctx	secp256k1.c	/^    secp256k1_ecmult_gen_context ecmult_gen_ctx;$/;"	m	struct:secp256k1_context_struct	file:
error_callback	secp256k1.c	/^    secp256k1_callback error_callback;$/;"	m	struct:secp256k1_context_struct	file:
extract	scalar_4x64_impl.h	255;"	d
extract	scalar_4x64_impl.h	888;"	d
extract	scalar_8x32_impl.h	334;"	d
extract	scalar_8x32_impl.h	644;"	d
extract_fast	scalar_4x64_impl.h	263;"	d
extract_fast	scalar_4x64_impl.h	889;"	d
extract_fast	scalar_8x32_impl.h	342;"	d
extract_fast	scalar_8x32_impl.h	645;"	d
fe_x	bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon2	file:
fe_y	bench_internal.c	/^    secp256k1_fe fe_x, fe_y;$/;"	m	struct:__anon2	file:
fn	secp256k1_util.h	/^    void (*fn)(const char *text, void* data);$/;"	m	struct:__anon23
ge_x	bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon2	file:
ge_y	bench_internal.c	/^    secp256k1_ge ge_x, ge_y;$/;"	m	struct:__anon2	file:
gej_x	bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon2	file:
gej_y	bench_internal.c	/^    secp256k1_gej gej_x, gej_y;$/;"	m	struct:__anon2	file:
gettimedouble	bench.h	/^static double gettimedouble(void) {$/;"	f
have_flag	bench_internal.c	/^int have_flag(int argc, char** argv, char *flag) {$/;"	f
illegal_callback	secp256k1.c	/^    secp256k1_callback illegal_callback;$/;"	m	struct:secp256k1_context_struct	file:
infinity	group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon14
infinity	group.h	/^    int infinity; \/* whether this represents the point at infinity *\/$/;"	m	struct:__anon15
initial	ecmult_gen.h	/^    secp256k1_gej initial;$/;"	m	struct:__anon8
inner	hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon18
k	hash.h	/^    unsigned char k[32];$/;"	m	struct:__anon19
key	bench_schnorr_verify.c	/^    unsigned char key[32];$/;"	m	struct:__anon4	file:
key	bench_sign.c	/^    unsigned char key[32];$/;"	m	struct:__anon6	file:
key	bench_verify.c	/^    unsigned char key[32];$/;"	m	struct:__anon7	file:
limbs	num_gmp.h	/^    int limbs;$/;"	m	struct:__anon20
magnitude	field_10x26.h	/^    int magnitude;$/;"	m	struct:__anon10
magnitude	field_5x52.h	/^    int magnitude;$/;"	m	struct:__anon12
main	bench_ecdh.c	/^int main(void) {$/;"	f
main	bench_internal.c	/^int main(int argc, char **argv) {$/;"	f
main	bench_recover.c	/^int main(void) {$/;"	f
main	bench_schnorr_verify.c	/^int main(void) {$/;"	f
main	bench_sign.c	/^int main(void) {$/;"	f
main	bench_verify.c	/^int main(void) {$/;"	f
main	gen_context.c	/^int main(int argc, char **argv) {$/;"	f
msg	bench_recover.c	/^    unsigned char msg[32];$/;"	m	struct:__anon3	file:
msg	bench_schnorr_verify.c	/^    unsigned char msg[32];$/;"	m	struct:__anon5	file:
msg	bench_sign.c	/^    unsigned char msg[32];$/;"	m	struct:__anon6	file:
msg	bench_verify.c	/^    unsigned char msg[32];$/;"	m	struct:__anon7	file:
muladd	scalar_4x64_impl.h	187;"	d
muladd	scalar_4x64_impl.h	885;"	d
muladd	scalar_8x32_impl.h	266;"	d
muladd	scalar_8x32_impl.h	641;"	d
muladd2	scalar_4x64_impl.h	216;"	d
muladd2	scalar_4x64_impl.h	887;"	d
muladd2	scalar_8x32_impl.h	295;"	d
muladd2	scalar_8x32_impl.h	643;"	d
muladd_fast	scalar_4x64_impl.h	202;"	d
muladd_fast	scalar_4x64_impl.h	886;"	d
muladd_fast	scalar_8x32_impl.h	281;"	d
muladd_fast	scalar_8x32_impl.h	642;"	d
n	field_10x26.h	/^    uint32_t n[10];$/;"	m	struct:__anon10
n	field_10x26.h	/^    uint32_t n[8];$/;"	m	struct:__anon11
n	field_5x52.h	/^    uint64_t n[4];$/;"	m	struct:__anon13
n	field_5x52.h	/^    uint64_t n[5];$/;"	m	struct:__anon12
neg	num_gmp.h	/^    int neg;$/;"	m	struct:__anon20
nonce_function_rfc6979	secp256k1.c	/^static int nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, const unsigned char *algo16, void *data, unsigned int counter) {$/;"	f	file:
normalized	field_10x26.h	/^    int normalized;$/;"	m	struct:__anon10
normalized	field_5x52.h	/^    int normalized;$/;"	m	struct:__anon12
numsigs	bench_schnorr_verify.c	/^    int numsigs;$/;"	m	struct:__anon5	file:
outer	hash.h	/^    secp256k1_sha256_t inner, outer;$/;"	m	struct:__anon18
point	bench_ecdh.c	/^    secp256k1_pubkey point;$/;"	m	struct:__anon1	file:
pre_g	ecmult.h	/^    secp256k1_ge_storage (*pre_g)[];    \/* odd multiples of the generator *\/$/;"	m	struct:__anon9
pre_g_128	ecmult.h	/^    secp256k1_ge_storage (*pre_g_128)[]; \/* odd multiples of 2^128*generator *\/$/;"	m	struct:__anon9
prec	ecmult_gen.h	/^    secp256k1_ge_storage (*prec)[64][16]; \/* prec[j][i] = 16^j * i * G + U_i *\/$/;"	m	struct:__anon8
print_number	bench.h	/^void print_number(double x) {$/;"	f
pubkey	bench_schnorr_verify.c	/^    unsigned char pubkey[33];$/;"	m	struct:__anon4	file:
pubkey	bench_verify.c	/^    unsigned char pubkey[33];$/;"	m	struct:__anon7	file:
pubkeylen	bench_schnorr_verify.c	/^    size_t pubkeylen;$/;"	m	struct:__anon4	file:
pubkeylen	bench_verify.c	/^    size_t pubkeylen;$/;"	m	struct:__anon7	file:
retry	hash.h	/^    int retry;$/;"	m	struct:__anon19
run_benchmark	bench.h	/^void run_benchmark(char *name, void (*benchmark)(void*), void (*setup)(void*), void (*teardown)(void*), void* data, int count, int iter) {$/;"	f
s	hash.h	/^    uint32_t s[8];$/;"	m	struct:__anon17
scalar	bench_ecdh.c	/^    unsigned char scalar[32];$/;"	m	struct:__anon1	file:
scalar_x	bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon2	file:
scalar_y	bench_internal.c	/^    secp256k1_scalar scalar_x, scalar_y;$/;"	m	struct:__anon2	file:
secp256k1_callback	secp256k1_util.h	/^} secp256k1_callback;$/;"	t	typeref:struct:__anon23
secp256k1_callback_call	secp256k1_util.h	/^static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback * const cb, const char * const text) {$/;"	f
secp256k1_context_clone	secp256k1.c	/^secp256k1_context* secp256k1_context_clone(const secp256k1_context* ctx) {$/;"	f
secp256k1_context_create	secp256k1.c	/^secp256k1_context* secp256k1_context_create(unsigned int flags) {$/;"	f
secp256k1_context_destroy	secp256k1.c	/^void secp256k1_context_destroy(secp256k1_context* ctx) {$/;"	f
secp256k1_context_randomize	secp256k1.c	/^int secp256k1_context_randomize(secp256k1_context* ctx, const unsigned char *seed32) {$/;"	f
secp256k1_context_set_error_callback	secp256k1.c	/^void secp256k1_context_set_error_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_set_illegal_callback	secp256k1.c	/^void secp256k1_context_set_illegal_callback(secp256k1_context* ctx, void (*fun)(const char* message, void* data), const void* data) {$/;"	f
secp256k1_context_struct	secp256k1.c	/^struct secp256k1_context_struct {$/;"	s	file:
secp256k1_der_parse_integer	ecdsa_impl.h	/^static int secp256k1_der_parse_integer(secp256k1_scalar *r, const unsigned char **sig, const unsigned char *sigend) {$/;"	f
secp256k1_der_read_len	ecdsa_impl.h	/^static int secp256k1_der_read_len(const unsigned char **sigp, const unsigned char *sigend) {$/;"	f
secp256k1_ec_privkey_tweak_add	secp256k1.c	/^int secp256k1_ec_privkey_tweak_add(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_privkey_tweak_mul	secp256k1.c	/^int secp256k1_ec_privkey_tweak_mul(const secp256k1_context* ctx, unsigned char *seckey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_combine	secp256k1.c	/^int secp256k1_ec_pubkey_combine(const secp256k1_context* ctx, secp256k1_pubkey *pubnonce, const secp256k1_pubkey * const *pubnonces, size_t n) {$/;"	f
secp256k1_ec_pubkey_create	secp256k1.c	/^int secp256k1_ec_pubkey_create(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *seckey) {$/;"	f
secp256k1_ec_pubkey_parse	secp256k1.c	/^int secp256k1_ec_pubkey_parse(const secp256k1_context* ctx, secp256k1_pubkey* pubkey, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ec_pubkey_serialize	secp256k1.c	/^int secp256k1_ec_pubkey_serialize(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_pubkey* pubkey, unsigned int flags) {$/;"	f
secp256k1_ec_pubkey_tweak_add	secp256k1.c	/^int secp256k1_ec_pubkey_tweak_add(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_pubkey_tweak_mul	secp256k1.c	/^int secp256k1_ec_pubkey_tweak_mul(const secp256k1_context* ctx, secp256k1_pubkey *pubkey, const unsigned char *tweak) {$/;"	f
secp256k1_ec_seckey_verify	secp256k1.c	/^int secp256k1_ec_seckey_verify(const secp256k1_context* ctx, const unsigned char *seckey) {$/;"	f
secp256k1_ecdsa_const_order_as_fe	ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_order_as_fe = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_const_p_minus_order	ecdsa_impl.h	/^static const secp256k1_fe secp256k1_ecdsa_const_p_minus_order = SECP256K1_FE_CONST($/;"	v
secp256k1_ecdsa_sig_parse	ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_parse(secp256k1_scalar *rr, secp256k1_scalar *rs, const unsigned char *sig, size_t size) {$/;"	f
secp256k1_ecdsa_sig_serialize	ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_serialize(unsigned char *sig, size_t *size, const secp256k1_scalar* ar, const secp256k1_scalar* as) {$/;"	f
secp256k1_ecdsa_sig_sign	ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_sign(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *sigr, secp256k1_scalar *sigs, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid) {$/;"	f
secp256k1_ecdsa_sig_verify	ecdsa_impl.h	/^static int secp256k1_ecdsa_sig_verify(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, const secp256k1_ge *pubkey, const secp256k1_scalar *message) {$/;"	f
secp256k1_ecdsa_sign	secp256k1.c	/^int secp256k1_ecdsa_sign(const secp256k1_context* ctx, secp256k1_ecdsa_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void* noncedata) {$/;"	f
secp256k1_ecdsa_signature_load	secp256k1.c	/^static void secp256k1_ecdsa_signature_load(const secp256k1_context* ctx, secp256k1_scalar* r, secp256k1_scalar* s, const secp256k1_ecdsa_signature* sig) {$/;"	f	file:
secp256k1_ecdsa_signature_normalize	secp256k1.c	/^int secp256k1_ecdsa_signature_normalize(const secp256k1_context* ctx, secp256k1_ecdsa_signature *sigout, const secp256k1_ecdsa_signature *sigin) {$/;"	f
secp256k1_ecdsa_signature_parse_compact	secp256k1.c	/^int secp256k1_ecdsa_signature_parse_compact(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input64) {$/;"	f
secp256k1_ecdsa_signature_parse_der	secp256k1.c	/^int secp256k1_ecdsa_signature_parse_der(const secp256k1_context* ctx, secp256k1_ecdsa_signature* sig, const unsigned char *input, size_t inputlen) {$/;"	f
secp256k1_ecdsa_signature_save	secp256k1.c	/^static void secp256k1_ecdsa_signature_save(secp256k1_ecdsa_signature* sig, const secp256k1_scalar* r, const secp256k1_scalar* s) {$/;"	f	file:
secp256k1_ecdsa_signature_serialize_compact	secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_compact(const secp256k1_context* ctx, unsigned char *output64, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_signature_serialize_der	secp256k1.c	/^int secp256k1_ecdsa_signature_serialize_der(const secp256k1_context* ctx, unsigned char *output, size_t *outputlen, const secp256k1_ecdsa_signature* sig) {$/;"	f
secp256k1_ecdsa_verify	secp256k1.c	/^int secp256k1_ecdsa_verify(const secp256k1_context* ctx, const secp256k1_ecdsa_signature *sig, const unsigned char *msg32, const secp256k1_pubkey *pubkey) {$/;"	f
secp256k1_eckey_privkey_tweak_add	eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_add(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_privkey_tweak_mul	eckey_impl.h	/^static int secp256k1_eckey_privkey_tweak_mul(secp256k1_scalar *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_parse	eckey_impl.h	/^static int secp256k1_eckey_pubkey_parse(secp256k1_ge *elem, const unsigned char *pub, size_t size) {$/;"	f
secp256k1_eckey_pubkey_serialize	eckey_impl.h	/^static int secp256k1_eckey_pubkey_serialize(secp256k1_ge *elem, unsigned char *pub, size_t *size, int compressed) {$/;"	f
secp256k1_eckey_pubkey_tweak_add	eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_add(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_eckey_pubkey_tweak_mul	eckey_impl.h	/^static int secp256k1_eckey_pubkey_tweak_mul(const secp256k1_ecmult_context *ctx, secp256k1_ge *key, const secp256k1_scalar *tweak) {$/;"	f
secp256k1_ecmult	ecmult_impl.h	/^static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {$/;"	f
secp256k1_ecmult_const	ecmult_const_impl.h	/^static void secp256k1_ecmult_const(secp256k1_gej *r, const secp256k1_ge *a, const secp256k1_scalar *scalar) {$/;"	f
secp256k1_ecmult_context	ecmult.h	/^} secp256k1_ecmult_context;$/;"	t	typeref:struct:__anon9
secp256k1_ecmult_context_build	ecmult_impl.h	/^static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_context_clear	ecmult_impl.h	/^static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_clone	ecmult_impl.h	/^static void secp256k1_ecmult_context_clone(secp256k1_ecmult_context *dst,$/;"	f
secp256k1_ecmult_context_init	ecmult_impl.h	/^static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_context_is_built	ecmult_impl.h	/^static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {$/;"	f
secp256k1_ecmult_gen	ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn) {$/;"	f
secp256k1_ecmult_gen_blind	ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_blind(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32) {$/;"	f
secp256k1_ecmult_gen_context	ecmult_gen.h	/^} secp256k1_ecmult_gen_context;$/;"	t	typeref:struct:__anon8
secp256k1_ecmult_gen_context_build	ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_build(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback* cb) {$/;"	f
secp256k1_ecmult_gen_context_clear	ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clear(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_clone	ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_clone(secp256k1_ecmult_gen_context *dst,$/;"	f
secp256k1_ecmult_gen_context_init	ecmult_gen_impl.h	/^static void secp256k1_ecmult_gen_context_init(secp256k1_ecmult_gen_context *ctx) {$/;"	f
secp256k1_ecmult_gen_context_is_built	ecmult_gen_impl.h	/^static int secp256k1_ecmult_gen_context_is_built(const secp256k1_ecmult_gen_context* ctx) {$/;"	f
secp256k1_ecmult_odd_multiples_table	ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_globalz_windowa	ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {$/;"	f
secp256k1_ecmult_odd_multiples_table_storage_var	ecmult_impl.h	/^static void secp256k1_ecmult_odd_multiples_table_storage_var(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb) {$/;"	f
secp256k1_ecmult_wnaf	ecmult_impl.h	/^static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {$/;"	f
secp256k1_fe	field_10x26.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon10
secp256k1_fe	field_5x52.h	/^} secp256k1_fe;$/;"	t	typeref:struct:__anon12
secp256k1_fe_add	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_add	field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_add(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_clear	field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_clear(secp256k1_fe *a) {$/;"	f
secp256k1_fe_cmov	field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmov	field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_cmov(secp256k1_fe *r, const secp256k1_fe *a, int flag) {$/;"	f
secp256k1_fe_cmp_var	field_10x26_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_cmp_var	field_5x52_impl.h	/^static int secp256k1_fe_cmp_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal	field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_equal_var	field_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_equal_var(const secp256k1_fe *a, const secp256k1_fe *b) {$/;"	f
secp256k1_fe_from_storage	field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_from_storage	field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_from_storage(secp256k1_fe *r, const secp256k1_fe_storage *a) {$/;"	f
secp256k1_fe_get_b32	field_10x26_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_get_b32	field_5x52_impl.h	/^static void secp256k1_fe_get_b32(unsigned char *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv	field_impl.h	/^static void secp256k1_fe_inv(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_inv_all_var	field_impl.h	/^static void secp256k1_fe_inv_all_var(secp256k1_fe *r, const secp256k1_fe *a, size_t len) {$/;"	f
secp256k1_fe_inv_var	field_impl.h	/^static void secp256k1_fe_inv_var(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_odd	field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_odd(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_quad_var	field_impl.h	/^static int secp256k1_fe_is_quad_var(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	field_10x26_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_is_zero	field_5x52_impl.h	/^SECP256K1_INLINE static int secp256k1_fe_is_zero(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_mul	field_10x26_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul	field_5x52_impl.h	/^static void secp256k1_fe_mul(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint32_t *r, const uint32_t *a, const uint32_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_inner	field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_inner(uint64_t *r, const uint64_t *a, const uint64_t * SECP256K1_RESTRICT b) {$/;"	f
secp256k1_fe_mul_int	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_mul_int	field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_mul_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_negate	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_negate	field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_negate(secp256k1_fe *r, const secp256k1_fe *a, int m) {$/;"	f
secp256k1_fe_normalize	field_10x26_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize	field_5x52_impl.h	/^static void secp256k1_fe_normalize(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	field_10x26_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_var	field_5x52_impl.h	/^static void secp256k1_fe_normalize_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	field_10x26_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalize_weak	field_5x52_impl.h	/^static void secp256k1_fe_normalize_weak(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero	field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	field_10x26_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_normalizes_to_zero_var	field_5x52_impl.h	/^static int secp256k1_fe_normalizes_to_zero_var(secp256k1_fe *r) {$/;"	f
secp256k1_fe_set_b32	field_10x26_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_b32	field_5x52_impl.h	/^static int secp256k1_fe_set_b32(secp256k1_fe *r, const unsigned char *a) {$/;"	f
secp256k1_fe_set_int	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_set_int	field_5x52_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_set_int(secp256k1_fe *r, int a) {$/;"	f
secp256k1_fe_sqr	field_10x26_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr	field_5x52_impl.h	/^static void secp256k1_fe_sqr(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_sqr_inner	field_10x26_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint32_t *r, const uint32_t *a) {$/;"	f
secp256k1_fe_sqr_inner	field_5x52_asm_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqr_inner	field_5x52_int128_impl.h	/^SECP256K1_INLINE static void secp256k1_fe_sqr_inner(uint64_t *r, const uint64_t *a) {$/;"	f
secp256k1_fe_sqrt	field_impl.h	/^static int secp256k1_fe_sqrt(secp256k1_fe *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_storage	field_10x26.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon11
secp256k1_fe_storage	field_5x52.h	/^} secp256k1_fe_storage;$/;"	t	typeref:struct:__anon13
secp256k1_fe_storage_cmov	field_10x26_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_storage_cmov	field_5x52_impl.h	/^static SECP256K1_INLINE void secp256k1_fe_storage_cmov(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag) {$/;"	f
secp256k1_fe_to_storage	field_10x26_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_to_storage	field_5x52_impl.h	/^static void secp256k1_fe_to_storage(secp256k1_fe_storage *r, const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	field_10x26_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_fe_verify	field_5x52_impl.h	/^static void secp256k1_fe_verify(const secp256k1_fe *a) {$/;"	f
secp256k1_ge	group.h	/^} secp256k1_ge;$/;"	t	typeref:struct:__anon14
secp256k1_ge_clear	group_impl.h	/^static void secp256k1_ge_clear(secp256k1_ge *r) {$/;"	f
secp256k1_ge_const_g	group_impl.h	/^const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_const_g	group_impl.h	/^static const secp256k1_ge secp256k1_ge_const_g = SECP256K1_GE_CONST($/;"	v
secp256k1_ge_from_storage	group_impl.h	/^static void secp256k1_ge_from_storage(secp256k1_ge *r, const secp256k1_ge_storage *a) {$/;"	f
secp256k1_ge_globalz_set_table_gej	group_impl.h	/^static void secp256k1_ge_globalz_set_table_gej(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr) {$/;"	f
secp256k1_ge_is_infinity	group_impl.h	/^static int secp256k1_ge_is_infinity(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_is_valid_var	group_impl.h	/^static int secp256k1_ge_is_valid_var(const secp256k1_ge *a) {$/;"	f
secp256k1_ge_mul_lambda	group_impl.h	/^static void secp256k1_ge_mul_lambda(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_neg	group_impl.h	/^static void secp256k1_ge_neg(secp256k1_ge *r, const secp256k1_ge *a) {$/;"	f
secp256k1_ge_set_all_gej_var	group_impl.h	/^static void secp256k1_ge_set_all_gej_var(secp256k1_ge *r, const secp256k1_gej *a, size_t len, const secp256k1_callback *cb) {$/;"	f
secp256k1_ge_set_gej	group_impl.h	/^static void secp256k1_ge_set_gej(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_var	group_impl.h	/^static void secp256k1_ge_set_gej_var(secp256k1_ge *r, secp256k1_gej *a) {$/;"	f
secp256k1_ge_set_gej_zinv	group_impl.h	/^static void secp256k1_ge_set_gej_zinv(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi) {$/;"	f
secp256k1_ge_set_infinity	group_impl.h	/^static void secp256k1_ge_set_infinity(secp256k1_ge *r) {$/;"	f
secp256k1_ge_set_table_gej_var	group_impl.h	/^static void secp256k1_ge_set_table_gej_var(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr, size_t len) {$/;"	f
secp256k1_ge_set_xo_var	group_impl.h	/^static int secp256k1_ge_set_xo_var(secp256k1_ge *r, const secp256k1_fe *x, int odd) {$/;"	f
secp256k1_ge_set_xquad	group_impl.h	/^static int secp256k1_ge_set_xquad(secp256k1_ge *r, const secp256k1_fe *x) {$/;"	f
secp256k1_ge_set_xy	group_impl.h	/^static void secp256k1_ge_set_xy(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y) {$/;"	f
secp256k1_ge_storage	group.h	/^} secp256k1_ge_storage;$/;"	t	typeref:struct:__anon16
secp256k1_ge_storage_cmov	group_impl.h	/^static SECP256K1_INLINE void secp256k1_ge_storage_cmov(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag) {$/;"	f
secp256k1_ge_to_storage	group_impl.h	/^static void secp256k1_ge_to_storage(secp256k1_ge_storage *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej	group.h	/^} secp256k1_gej;$/;"	t	typeref:struct:__anon15
secp256k1_gej_add_ge	group_impl.h	/^static void secp256k1_gej_add_ge(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b) {$/;"	f
secp256k1_gej_add_ge_var	group_impl.h	/^static void secp256k1_gej_add_ge_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_var	group_impl.h	/^static void secp256k1_gej_add_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_add_zinv_var	group_impl.h	/^static void secp256k1_gej_add_zinv_var(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv) {$/;"	f
secp256k1_gej_clear	group_impl.h	/^static void secp256k1_gej_clear(secp256k1_gej *r) {$/;"	f
secp256k1_gej_double_nonzero	group_impl.h	/^static SECP256K1_INLINE void secp256k1_gej_double_nonzero(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_double_var	group_impl.h	/^static void secp256k1_gej_double_var(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr) {$/;"	f
secp256k1_gej_eq_x_var	group_impl.h	/^static int secp256k1_gej_eq_x_var(const secp256k1_fe *x, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_has_quad_y_var	group_impl.h	/^static int secp256k1_gej_has_quad_y_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_infinity	group_impl.h	/^static int secp256k1_gej_is_infinity(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_is_valid_var	group_impl.h	/^static int secp256k1_gej_is_valid_var(const secp256k1_gej *a) {$/;"	f
secp256k1_gej_neg	group_impl.h	/^static void secp256k1_gej_neg(secp256k1_gej *r, const secp256k1_gej *a) {$/;"	f
secp256k1_gej_rescale	group_impl.h	/^static void secp256k1_gej_rescale(secp256k1_gej *r, const secp256k1_fe *s) {$/;"	f
secp256k1_gej_set_ge	group_impl.h	/^static void secp256k1_gej_set_ge(secp256k1_gej *r, const secp256k1_ge *a) {$/;"	f
secp256k1_gej_set_infinity	group_impl.h	/^static void secp256k1_gej_set_infinity(secp256k1_gej *r) {$/;"	f
secp256k1_hmac_sha256_finalize	hash_impl.h	/^static void secp256k1_hmac_sha256_finalize(secp256k1_hmac_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_hmac_sha256_initialize	hash_impl.h	/^static void secp256k1_hmac_sha256_initialize(secp256k1_hmac_sha256_t *hash, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_hmac_sha256_t	hash.h	/^} secp256k1_hmac_sha256_t;$/;"	t	typeref:struct:__anon18
secp256k1_hmac_sha256_write	hash_impl.h	/^static void secp256k1_hmac_sha256_write(secp256k1_hmac_sha256_t *hash, const unsigned char *data, size_t size) {$/;"	f
secp256k1_nonce_function_default	secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_default = nonce_function_rfc6979;$/;"	v
secp256k1_nonce_function_rfc6979	secp256k1.c	/^const secp256k1_nonce_function secp256k1_nonce_function_rfc6979 = nonce_function_rfc6979;$/;"	v
secp256k1_num	num_gmp.h	/^} secp256k1_num;$/;"	t	typeref:struct:__anon20
secp256k1_num_add	num_gmp_impl.h	/^static void secp256k1_num_add(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_add_abs	num_gmp_impl.h	/^static void secp256k1_num_add_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_cmp	num_gmp_impl.h	/^static int secp256k1_num_cmp(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_copy	num_gmp_impl.h	/^static void secp256k1_num_copy(secp256k1_num *r, const secp256k1_num *a) {$/;"	f
secp256k1_num_eq	num_gmp_impl.h	/^static int secp256k1_num_eq(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_get_bin	num_gmp_impl.h	/^static void secp256k1_num_get_bin(unsigned char *r, unsigned int rlen, const secp256k1_num *a) {$/;"	f
secp256k1_num_is_neg	num_gmp_impl.h	/^static int secp256k1_num_is_neg(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_one	num_gmp_impl.h	/^static int secp256k1_num_is_one(const secp256k1_num *a) {$/;"	f
secp256k1_num_is_zero	num_gmp_impl.h	/^static int secp256k1_num_is_zero(const secp256k1_num *a) {$/;"	f
secp256k1_num_jacobi	num_gmp_impl.h	/^static int secp256k1_num_jacobi(const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_mod	num_gmp_impl.h	/^static void secp256k1_num_mod(secp256k1_num *r, const secp256k1_num *m) {$/;"	f
secp256k1_num_mod_inverse	num_gmp_impl.h	/^static void secp256k1_num_mod_inverse(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m) {$/;"	f
secp256k1_num_mul	num_gmp_impl.h	/^static void secp256k1_num_mul(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_negate	num_gmp_impl.h	/^static void secp256k1_num_negate(secp256k1_num *r) {$/;"	f
secp256k1_num_sanity	num_gmp_impl.h	/^static void secp256k1_num_sanity(const secp256k1_num *a) {$/;"	f
secp256k1_num_sanity	num_gmp_impl.h	22;"	d
secp256k1_num_set_bin	num_gmp_impl.h	/^static void secp256k1_num_set_bin(secp256k1_num *r, const unsigned char *a, unsigned int alen) {$/;"	f
secp256k1_num_shift	num_gmp_impl.h	/^static void secp256k1_num_shift(secp256k1_num *r, int bits) {$/;"	f
secp256k1_num_sub	num_gmp_impl.h	/^static void secp256k1_num_sub(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_sub_abs	num_gmp_impl.h	/^static void secp256k1_num_sub_abs(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b) {$/;"	f
secp256k1_num_subadd	num_gmp_impl.h	/^static void secp256k1_num_subadd(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b, int bneg) {$/;"	f
secp256k1_pubkey_load	secp256k1.c	/^static int secp256k1_pubkey_load(const secp256k1_context* ctx, secp256k1_ge* ge, const secp256k1_pubkey* pubkey) {$/;"	f	file:
secp256k1_pubkey_save	secp256k1.c	/^static void secp256k1_pubkey_save(secp256k1_pubkey* pubkey, secp256k1_ge* ge) {$/;"	f	file:
secp256k1_rand256	testrand_impl.h	/^static void secp256k1_rand256(unsigned char *b32) {$/;"	f
secp256k1_rand256_test	testrand_impl.h	/^static void secp256k1_rand256_test(unsigned char *b32) {$/;"	f
secp256k1_rand32	testrand_impl.h	/^SECP256K1_INLINE static uint32_t secp256k1_rand32(void) {$/;"	f
secp256k1_rand_bits	testrand_impl.h	/^static uint32_t secp256k1_rand_bits(int bits) {$/;"	f
secp256k1_rand_bytes_test	testrand_impl.h	/^static void secp256k1_rand_bytes_test(unsigned char *bytes, size_t len) {$/;"	f
secp256k1_rand_int	testrand_impl.h	/^static uint32_t secp256k1_rand_int(uint32_t range) {$/;"	f
secp256k1_rand_seed	testrand_impl.h	/^SECP256K1_INLINE static void secp256k1_rand_seed(const unsigned char *seed16) {$/;"	f
secp256k1_rfc6979_hmac_sha256_finalize	hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_finalize(secp256k1_rfc6979_hmac_sha256_t *rng) {$/;"	f
secp256k1_rfc6979_hmac_sha256_generate	hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_generate(secp256k1_rfc6979_hmac_sha256_t *rng, unsigned char *out, size_t outlen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_initialize	hash_impl.h	/^static void secp256k1_rfc6979_hmac_sha256_initialize(secp256k1_rfc6979_hmac_sha256_t *rng, const unsigned char *key, size_t keylen) {$/;"	f
secp256k1_rfc6979_hmac_sha256_t	hash.h	/^} secp256k1_rfc6979_hmac_sha256_t;$/;"	t	typeref:struct:__anon19
secp256k1_scalar	scalar_4x64.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon21
secp256k1_scalar	scalar_8x32.h	/^} secp256k1_scalar;$/;"	t	typeref:struct:__anon22
secp256k1_scalar	scalar_low.h	/^typedef uint32_t secp256k1_scalar;$/;"	t
secp256k1_scalar_add	scalar_4x64_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	scalar_8x32_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_add	scalar_low_impl.h	/^static int secp256k1_scalar_add(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_cadd_bit	scalar_4x64_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	scalar_8x32_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_cadd_bit	scalar_low_impl.h	/^static void secp256k1_scalar_cadd_bit(secp256k1_scalar *r, unsigned int bit, int flag) {$/;"	f
secp256k1_scalar_check_overflow	scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_check_overflow	scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_check_overflow(const secp256k1_scalar *a) { return *a >= EXHAUSTIVE_TEST_ORDER; }$/;"	f
secp256k1_scalar_clear	scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) {$/;"	f
secp256k1_scalar_clear	scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_clear(secp256k1_scalar *r) { *r = 0; }$/;"	f
secp256k1_scalar_cond_negate	scalar_4x64_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	scalar_8x32_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_cond_negate	scalar_low_impl.h	/^static int secp256k1_scalar_cond_negate(secp256k1_scalar *r, int flag) {$/;"	f
secp256k1_scalar_eq	scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_eq	scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_eq(const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_get_b32	scalar_4x64_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	scalar_8x32_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_b32	scalar_low_impl.h	/^static void secp256k1_scalar_get_b32(unsigned char *bin, const secp256k1_scalar* a) {$/;"	f
secp256k1_scalar_get_bits	scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits	scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	scalar_4x64_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	scalar_8x32_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_bits_var	scalar_low_impl.h	/^SECP256K1_INLINE static unsigned int secp256k1_scalar_get_bits_var(const secp256k1_scalar *a, unsigned int offset, unsigned int count) {$/;"	f
secp256k1_scalar_get_num	scalar_impl.h	/^static void secp256k1_scalar_get_num(secp256k1_num *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_inverse	scalar_impl.h	/^static void secp256k1_scalar_inverse(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_inverse_var	scalar_impl.h	/^static void secp256k1_scalar_inverse_var(secp256k1_scalar *r, const secp256k1_scalar *x) {$/;"	f
secp256k1_scalar_is_even	scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_even(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	scalar_4x64_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	scalar_8x32_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_high	scalar_low_impl.h	/^static int secp256k1_scalar_is_high(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_one	scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_one(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_is_zero	scalar_low_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_is_zero(const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_mul	scalar_4x64_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	scalar_8x32_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul	scalar_low_impl.h	/^static void secp256k1_scalar_mul(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	scalar_4x64_impl.h	/^static void secp256k1_scalar_mul_512(uint64_t l[8], const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_512	scalar_8x32_impl.h	/^static void secp256k1_scalar_mul_512(uint32_t *l, const secp256k1_scalar *a, const secp256k1_scalar *b) {$/;"	f
secp256k1_scalar_mul_shift_var	scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_mul_shift_var	scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_mul_shift_var(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift) {$/;"	f
secp256k1_scalar_negate	scalar_4x64_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	scalar_8x32_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_negate	scalar_low_impl.h	/^static void secp256k1_scalar_negate(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_order_get_num	scalar_impl.h	/^static void secp256k1_scalar_order_get_num(secp256k1_num *r) {$/;"	f
secp256k1_scalar_reduce	scalar_4x64_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, unsigned int overflow) {$/;"	f
secp256k1_scalar_reduce	scalar_8x32_impl.h	/^SECP256K1_INLINE static int secp256k1_scalar_reduce(secp256k1_scalar *r, uint32_t overflow) {$/;"	f
secp256k1_scalar_reduce_512	scalar_4x64_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint64_t *l) {$/;"	f
secp256k1_scalar_reduce_512	scalar_8x32_impl.h	/^static void secp256k1_scalar_reduce_512(secp256k1_scalar *r, const uint32_t *l) {$/;"	f
secp256k1_scalar_set_b32	scalar_4x64_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	scalar_8x32_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_b32	scalar_low_impl.h	/^static void secp256k1_scalar_set_b32(secp256k1_scalar *r, const unsigned char *b32, int *overflow) {$/;"	f
secp256k1_scalar_set_int	scalar_4x64_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	scalar_8x32_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) {$/;"	f
secp256k1_scalar_set_int	scalar_low_impl.h	/^SECP256K1_INLINE static void secp256k1_scalar_set_int(secp256k1_scalar *r, unsigned int v) { *r = v; }$/;"	f
secp256k1_scalar_shr_int	scalar_4x64_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	scalar_8x32_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_shr_int	scalar_low_impl.h	/^static int secp256k1_scalar_shr_int(secp256k1_scalar *r, int n) {$/;"	f
secp256k1_scalar_split_128	scalar_4x64_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	scalar_8x32_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_128	scalar_low_impl.h	/^static void secp256k1_scalar_split_128(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_split_lambda	scalar_impl.h	/^static void secp256k1_scalar_split_lambda(secp256k1_scalar *r1, secp256k1_scalar *r2, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr	scalar_low_impl.h	/^static void secp256k1_scalar_sqr(secp256k1_scalar *r, const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	scalar_4x64_impl.h	/^static void secp256k1_scalar_sqr_512(uint64_t l[8], const secp256k1_scalar *a) {$/;"	f
secp256k1_scalar_sqr_512	scalar_8x32_impl.h	/^static void secp256k1_scalar_sqr_512(uint32_t *l, const secp256k1_scalar *a) {$/;"	f
secp256k1_sha256_finalize	hash_impl.h	/^static void secp256k1_sha256_finalize(secp256k1_sha256_t *hash, unsigned char *out32) {$/;"	f
secp256k1_sha256_initialize	hash_impl.h	/^static void secp256k1_sha256_initialize(secp256k1_sha256_t *hash) {$/;"	f
secp256k1_sha256_t	hash.h	/^} secp256k1_sha256_t;$/;"	t	typeref:struct:__anon17
secp256k1_sha256_transform	hash_impl.h	/^static void secp256k1_sha256_transform(uint32_t* s, const uint32_t* chunk) {$/;"	f
secp256k1_sha256_write	hash_impl.h	/^static void secp256k1_sha256_write(secp256k1_sha256_t *hash, const unsigned char *data, size_t len) {$/;"	f
secp256k1_test_rng	testrand_impl.h	/^static secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng;$/;"	v
secp256k1_test_rng_integer	testrand_impl.h	/^static uint64_t secp256k1_test_rng_integer;$/;"	v
secp256k1_test_rng_integer_bits_left	testrand_impl.h	/^static int secp256k1_test_rng_integer_bits_left = 0;$/;"	v
secp256k1_test_rng_precomputed	testrand_impl.h	/^static uint32_t secp256k1_test_rng_precomputed[8];$/;"	v
secp256k1_test_rng_precomputed_used	testrand_impl.h	/^static int secp256k1_test_rng_precomputed_used = 8;$/;"	v
secp256k1_wnaf_const	ecmult_const_impl.h	/^static int secp256k1_wnaf_const(int *wnaf, secp256k1_scalar s, int w) {$/;"	f
sig	bench_recover.c	/^    unsigned char sig[64];$/;"	m	struct:__anon3	file:
sig	bench_schnorr_verify.c	/^    unsigned char sig[64];$/;"	m	struct:__anon4	file:
sig	bench_verify.c	/^    unsigned char sig[72];$/;"	m	struct:__anon7	file:
siglen	bench_verify.c	/^    size_t siglen;$/;"	m	struct:__anon7	file:
sigma0	hash_impl.h	20;"	d
sigma0	hash_impl.h	275;"	d
sigma1	hash_impl.h	21;"	d
sigma1	hash_impl.h	274;"	d
sigs	bench_schnorr_verify.c	/^    benchmark_schnorr_sig_t sigs[64];$/;"	m	struct:__anon5	file:
sumadd	scalar_4x64_impl.h	238;"	d
sumadd	scalar_4x64_impl.h	883;"	d
sumadd	scalar_8x32_impl.h	317;"	d
sumadd	scalar_8x32_impl.h	639;"	d
sumadd_fast	scalar_4x64_impl.h	247;"	d
sumadd_fast	scalar_4x64_impl.h	884;"	d
sumadd_fast	scalar_8x32_impl.h	326;"	d
sumadd_fast	scalar_8x32_impl.h	640;"	d
uint128_t	secp256k1_util.h	/^SECP256K1_GNUC_EXT typedef unsigned __int128 uint128_t;$/;"	t
v	hash.h	/^    unsigned char v[32];$/;"	m	struct:__anon19
wnaf	bench_internal.c	/^    int wnaf[256];$/;"	m	struct:__anon2	file:
x	group.h	/^    secp256k1_fe x; \/* actual X: x\/z^2 *\/$/;"	m	struct:__anon15
x	group.h	/^    secp256k1_fe x;$/;"	m	struct:__anon14
x	group.h	/^    secp256k1_fe_storage x;$/;"	m	struct:__anon16
y	group.h	/^    secp256k1_fe y; \/* actual Y: y\/z^3 *\/$/;"	m	struct:__anon15
y	group.h	/^    secp256k1_fe y;$/;"	m	struct:__anon14
y	group.h	/^    secp256k1_fe_storage y;$/;"	m	struct:__anon16
z	group.h	/^    secp256k1_fe z;$/;"	m	struct:__anon15
